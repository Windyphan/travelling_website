<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.vercelignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.vercelignore" />
              <option name="updatedContent" value="frontend/&#10;node_modules/&#10;.env.local&#10;.env.development&#10;.env.test&#10;*.log&#10;.DS_Store" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="updatedContent" value="# Use Node.js LTS version&#10;FROM node:18-alpine&#10;&#10;# Set working directory&#10;WORKDIR /app&#10;&#10;# Copy package files&#10;COPY package*.json ./&#10;COPY backend/package*.json ./backend/&#10;&#10;# Install dependencies&#10;RUN npm install&#10;RUN cd backend &amp;&amp; npm install&#10;&#10;# Copy source code&#10;COPY . .&#10;&#10;# Expose port&#10;EXPOSE 5000&#10;&#10;# Set environment to production&#10;ENV NODE_ENV=production&#10;&#10;# Start the server&#10;CMD [&quot;node&quot;, &quot;backend/server.js&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README-CLOUDFLARE-SETUP.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README-CLOUDFLARE-SETUP.md" />
              <option name="updatedContent" value="# Cloudflare D1 + R2 Migration Guide&#10;&#10;## Overview&#10;This guide will help you migrate your travelling website from MongoDB to Cloudflare D1 (database) and integrate R2 (object storage) for image management in your admin system.&#10;&#10;## Prerequisites&#10;- Cloudflare account with Workers and R2 enabled&#10;- Wrangler CLI installed (`npm install -g wrangler`)&#10;- Authenticated with Cloudflare (`wrangler auth login`)&#10;&#10;## Step 1: Set Up Cloudflare D1 Database&#10;&#10;1. **Create D1 Database:**&#10;   ```bash&#10;   wrangler d1 create travelling-website-db&#10;   ```&#10;&#10;2. **Copy the database ID** from the output and update your `wrangler.toml`:&#10;   ```toml&#10;   [[d1_databases]]&#10;   binding = &quot;DB&quot;&#10;   database_name = &quot;travelling-website-db&quot;&#10;   database_id = &quot;YOUR_DATABASE_ID_HERE&quot;  # Replace with actual ID&#10;   ```&#10;&#10;3. **Create database schema:**&#10;   ```bash&#10;   wrangler d1 execute travelling-website-db --file=./schema.sql&#10;   ```&#10;&#10;## Step 2: Set Up Cloudflare R2 Storage&#10;&#10;1. **Create R2 Bucket:**&#10;   ```bash&#10;   wrangler r2 bucket create travelling-website-images&#10;   ```&#10;&#10;2. **Update `wrangler.toml` with R2 configuration** (already done in your file)&#10;&#10;3. **Optional: Set up custom domain for R2**&#10;   - Go to Cloudflare Dashboard &gt; R2 &gt; Your bucket&#10;   - Add a custom domain for public access to images&#10;   - Update the `r2Helpers.uploadImage` function with your domain&#10;&#10;## Step 3: Environment Variables&#10;&#10;Set up these environment variables in your Cloudflare Workers dashboard:&#10;&#10;```&#10;JWT_SECRET=your-jwt-secret-here&#10;STRIPE_SECRET_KEY=your-stripe-secret-key&#10;STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret&#10;ALLOWED_ORIGINS=https://your-domain.com,https://www.your-domain.com&#10;```&#10;&#10;## Step 4: Update R2 Domain Configuration&#10;&#10;In `backend/config/storage.js`, update the domain URL:&#10;&#10;```javascript&#10;// Change this line:&#10;return `https://your-r2-domain.com/${fileName}`;&#10;&#10;// To your actual R2 domain:&#10;return `https://your-actual-domain.com/${fileName}`;&#10;```&#10;&#10;## Step 5: Install Dependencies&#10;&#10;```bash&#10;cd backend&#10;npm install&#10;```&#10;&#10;## Step 6: Deploy&#10;&#10;```bash&#10;# From project root&#10;wrangler deploy&#10;```&#10;&#10;## Step 7: Test the Setup&#10;&#10;1. **Test database connection:**&#10;   ```bash&#10;   wrangler d1 execute travelling-website-db --command=&quot;SELECT COUNT(*) FROM users;&quot;&#10;   ```&#10;&#10;2. **Test API endpoints:**&#10;   - POST `/api/auth/register` - Create a test user&#10;   - POST `/api/admin/upload-image` - Test image upload to R2&#10;   - GET `/api/tours` - Test tour fetching&#10;&#10;## Admin Image Management Features&#10;&#10;Your admin system now supports:&#10;&#10;### Tour Image Management&#10;- **Upload multiple images** for tours&#10;- **Replace existing images** automatically&#10;- **Delete old images** when updating&#10;- **Primary image** selection (first uploaded becomes primary)&#10;&#10;### Content Management System&#10;- **Upload images** for CMS content&#10;- **Update images** with automatic cleanup&#10;- **Delete content** with associated images&#10;&#10;### API Endpoints for Image Management&#10;&#10;```javascript&#10;// Upload image&#10;POST /api/admin/upload-image&#10;Content-Type: multipart/form-data&#10;Body: { file: [image file], folder: &quot;tours&quot; }&#10;&#10;// Delete image&#10;DELETE /api/admin/delete-image&#10;Body: { imageUrl: &quot;https://your-domain.com/path/to/image.jpg&quot; }&#10;&#10;// Create tour with images&#10;POST /api/tours&#10;Content-Type: multipart/form-data&#10;Body: { title, description, price, ..., files: [image files] }&#10;&#10;// Update tour images&#10;PUT /api/tours/:id&#10;Content-Type: multipart/form-data&#10;Body: { files: [new image files] }&#10;```&#10;&#10;## Database Migration (If You Have Existing Data)&#10;&#10;If you need to migrate existing data from MongoDB:&#10;&#10;1. **Export your MongoDB data:**&#10;   ```bash&#10;   mongoexport --db=travelling-website --collection=users --out=users.json&#10;   mongoexport --db=travelling-website --collection=tours --out=tours.json&#10;   # ... repeat for other collections&#10;   ```&#10;&#10;2. **Create migration script** to convert and import data to D1&#10;&#10;3. **Update image URLs** to point to R2 storage&#10;&#10;## Local Development&#10;&#10;For local development, you can:&#10;&#10;1. **Use Wrangler dev mode:**&#10;   ```bash&#10;   wrangler dev&#10;   ```&#10;&#10;2. **Set up local D1 database:**&#10;   ```bash&#10;   wrangler d1 execute travelling-website-db --local --file=./schema.sql&#10;   ```&#10;&#10;## Troubleshooting&#10;&#10;### Common Issues:&#10;&#10;1. **Database ID not found:**&#10;   - Ensure you've updated `wrangler.toml` with the correct database ID&#10;&#10;2. **R2 upload errors:**&#10;   - Check your R2 bucket permissions&#10;   - Verify the bucket name in `wrangler.toml`&#10;&#10;3. **Image URLs not working:**&#10;   - Set up a custom domain for your R2 bucket&#10;   - Update the domain in `storage.js`&#10;&#10;### Production Considerations:&#10;&#10;1. **Image optimization:** Consider adding image resizing/optimization&#10;2. **CDN:** Use Cloudflare's CDN for better image delivery&#10;3. **Backup:** Set up regular database backups&#10;4. **Monitoring:** Enable Cloudflare Analytics for your Workers&#10;&#10;## Benefits of This Migration&#10;&#10;✅ **Serverless architecture** - No server management needed&#10;✅ **Global edge network** - Fast worldwide performance  &#10;✅ **Integrated storage** - R2 works seamlessly with D1&#10;✅ **Cost-effective** - Pay only for what you use&#10;✅ **Scalable** - Handles traffic spikes automatically&#10;✅ **Admin image management** - Easy picture updates for tours/services" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/.env" />
              <option name="updatedContent" value="# Development Environment Variables&#10;NODE_ENV=development&#10;PORT=5000&#10;&#10;# Database&#10;MONGODB_URI=mongodb://localhost:27017/travelling_website&#10;&#10;# JWT Secret (Change this in production!)&#10;JWT_SECRET=your_super_secret_jwt_key_change_in_production_please&#10;&#10;# Client URL&#10;CLIENT_URL=http://localhost:3000&#10;&#10;# Email Configuration (Gmail example)&#10;EMAIL_HOST=smtp.gmail.com&#10;EMAIL_PORT=587&#10;EMAIL_USER=your_email@gmail.com&#10;EMAIL_PASS=your_gmail_app_password&#10;&#10;# Payment Gateway - Stripe (Get from https://stripe.com)&#10;STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here&#10;STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here&#10;STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret&#10;&#10;# Vietnamese Payment Gateway (Get from VNPay)&#10;VNPAY_TMN_CODE=your_vnpay_tmn_code&#10;VNPAY_SECRET_KEY=your_vnpay_secret_key&#10;&#10;# File Upload Configuration&#10;MAX_FILE_SIZE=10485760&#10;UPLOAD_PATH=./uploads&#10;&#10;# Admin Configuration&#10;ADMIN_EMAIL=admin@travelcompany.com&#10;COMPANY_NAME=TravelCo&#10;COMPANY_PHONE=+84-123-456-789&#10;COMPANY_ADDRESS=123 Travel Street, Ho Chi Minh City, Vietnam" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/config/database.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/config/database.js" />
              <option name="updatedContent" value="const mongoose = require('mongoose');&#10;    console.log(`MongoDB Connected: ${conn.connection.host}`);&#10;  } catch (error) {&#10;    console.error('Database connection error:', error.message);&#10;    process.exit(1);&#10;  }&#10;};&#10;&#10;module.exports = connectDB;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/config/storage.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/config/storage.js" />
              <option name="updatedContent" value="const { v4: uuidv4 } = require('uuid');&#10;&#10;// R2 Storage helper functions&#10;const r2Helpers = {&#10;  // Upload image to R2&#10;  async uploadImage(r2Bucket, file, folder = 'tours') {&#10;    try {&#10;      const fileExtension = file.name.split('.').pop();&#10;      const fileName = `${folder}/${uuidv4()}.${fileExtension}`;&#10;      &#10;      await r2Bucket.put(fileName, file.stream(), {&#10;        httpMetadata: {&#10;          contentType: file.type,&#10;          cacheControl: 'public, max-age=31536000', // 1 year&#10;        },&#10;      });&#10;      &#10;      // Return the public URL (you'll need to configure a custom domain for R2)&#10;      return `https://your-r2-domain.com/${fileName}`;&#10;    } catch (error) {&#10;      console.error('R2 upload error:', error);&#10;      throw error;&#10;    }&#10;  },&#10;&#10;  // Delete image from R2&#10;  async deleteImage(r2Bucket, imageUrl) {&#10;    try {&#10;      // Extract the key from the URL&#10;      const urlParts = imageUrl.split('/');&#10;      const key = urlParts.slice(-2).join('/'); // folder/filename&#10;      &#10;      await r2Bucket.delete(key);&#10;      return true;&#10;    } catch (error) {&#10;      console.error('R2 delete error:', error);&#10;      throw error;&#10;    }&#10;  },&#10;&#10;  // Upload multiple images&#10;  async uploadMultipleImages(r2Bucket, files, folder = 'tours') {&#10;    try {&#10;      const uploadPromises = files.map(file =&gt; this.uploadImage(r2Bucket, file, folder));&#10;      return await Promise.all(uploadPromises);&#10;    } catch (error) {&#10;      console.error('R2 multiple upload error:', error);&#10;      throw error;&#10;    }&#10;  },&#10;&#10;  // Get signed URL for private access (if needed)&#10;  async getSignedUrl(r2Bucket, key, expiresIn = 3600) {&#10;    try {&#10;      // Note: R2 doesn't have built-in signed URLs like S3&#10;      // You might need to implement this using Cloudflare's API&#10;      // For now, we'll return the public URL&#10;      return `https://your-r2-domain.com/${key}`;&#10;    } catch (error) {&#10;      console.error('R2 signed URL error:', error);&#10;      throw error;&#10;    }&#10;  },&#10;&#10;  // Validate image file&#10;  validateImage(file) {&#10;    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];&#10;    const maxSize = 10 * 1024 * 1024; // 10MB&#10;    &#10;    if (!allowedTypes.includes(file.type)) {&#10;      throw new Error('Invalid file type. Only JPEG, PNG, and WebP are allowed.');&#10;    }&#10;    &#10;    if (file.size &gt; maxSize) {&#10;      throw new Error('File too large. Maximum size is 10MB.');&#10;    }&#10;    &#10;    return true;&#10;  }&#10;};&#10;&#10;module.exports = { r2Helpers };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/controllers/adminController.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/controllers/adminController.js" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="const Booking = require('../models/Booking');&#13;&#10;const Tour = require('../models/Tour');&#13;&#10;const User = require('../models/User');&#13;&#10;const Review = require('../models/Review');&#13;&#10;const Content = require('../models/Content');&#13;&#10;const { r2Helpers } = require('../config/storage');&#13;&#10;&#13;&#10;// Dashboard analytics&#13;&#10;const getDashboardStats = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    // Get statistics from all models&#13;&#10;    const bookingStats = await Booking.getStats(req.db);&#13;&#10;    const tourStats = await Tour.getStats(req.db);&#13;&#10;    const userCount = await User.findAll(req.db, 1, 0); // Get count&#13;&#10;&#13;&#10;    // Recent bookings&#13;&#10;    const recentBookings = await Booking.findAll(req.db, { limit: 10 });&#13;&#10;&#13;&#10;    const stats = {&#13;&#10;      totalBookings: bookingStats.total,&#13;&#10;      totalTours: tourStats.total,&#13;&#10;      totalUsers: userCount.length,&#13;&#10;      totalRevenue: bookingStats.totalRevenue,&#13;&#10;      recentBookings: recentBookings,&#13;&#10;      toursByLocation: tourStats.byLocation,&#13;&#10;      toursByDifficulty: tourStats.byDifficulty,&#13;&#10;      bookingsByStatus: bookingStats.byStatus&#13;&#10;    };&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      data: stats&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Dashboard stats error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error fetching dashboard statistics'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Get all users (admin only)&#13;&#10;const getAllUsers = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const { page = 1, limit = 20 } = req.query;&#13;&#10;    const offset = (page - 1) * limit;&#13;&#10;    &#13;&#10;    const users = await User.findAll(req.db, parseInt(limit), parseInt(offset));&#13;&#10;    &#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      data: users.map(user =&gt; user.toJSON())&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Get all users error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error fetching users'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Update user role (admin only)&#13;&#10;const updateUserRole = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const { userId } = req.params;&#13;&#10;    const { role } = req.body;&#13;&#10;&#13;&#10;    if (!['user', 'admin', 'editor'].includes(role)) {&#13;&#10;      return res.status(400).json({&#13;&#10;        success: false,&#13;&#10;        message: 'Invalid role'&#13;&#10;      });&#13;&#10;    }&#13;&#10;&#13;&#10;    const user = await User.findById(req.db, userId);&#13;&#10;    if (!user) {&#13;&#10;      return res.status(404).json({&#13;&#10;        success: false,&#13;&#10;        message: 'User not found'&#13;&#10;      });&#13;&#10;    }&#13;&#10;&#13;&#10;    await user.update(req.db, { role });&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      message: 'User role updated successfully'&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Update user role error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error updating user role'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Upload image to R2 (admin only)&#13;&#10;const uploadImage = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    if (!req.file) {&#13;&#10;      return res.status(400).json({&#13;&#10;        success: false,&#13;&#10;        message: 'No image file provided'&#13;&#10;      });&#13;&#10;    }&#13;&#10;&#13;&#10;    // Validate image&#13;&#10;    r2Helpers.validateImage(req.file);&#13;&#10;&#13;&#10;    // Upload to R2&#13;&#10;    const folder = req.body.folder || 'admin';&#13;&#10;    const imageUrl = await r2Helpers.uploadImage(req.r2, req.file, folder);&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      data: { imageUrl },&#13;&#10;      message: 'Image uploaded successfully'&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Upload image error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: error.message || 'Error uploading image'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Delete image from R2 (admin only)&#13;&#10;const deleteImage = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const { imageUrl } = req.body;&#13;&#10;&#13;&#10;    if (!imageUrl) {&#13;&#10;      return res.status(400).json({&#13;&#10;        success: false,&#13;&#10;        message: 'Image URL is required'&#13;&#10;      });&#13;&#10;    }&#13;&#10;&#13;&#10;    await r2Helpers.deleteImage(req.r2, imageUrl);&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      message: 'Image deleted successfully'&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Delete image error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error deleting image'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Content Management - Create content with image&#13;&#10;const createContent = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const contentData = req.body;&#13;&#10;    const content = new Content(contentData);&#13;&#10;&#13;&#10;    // Handle image upload if provided&#13;&#10;    if (req.file) {&#13;&#10;      const imageUrl = await content.updateImage(req.r2, req.file);&#13;&#10;      content.image_url = imageUrl;&#13;&#10;    }&#13;&#10;&#13;&#10;    await content.save(req.db);&#13;&#10;&#13;&#10;    res.status(201).json({&#13;&#10;      success: true,&#13;&#10;      data: content,&#13;&#10;      message: 'Content created successfully'&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Create content error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error creating content'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Update content with image&#13;&#10;const updateContent = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const { contentId } = req.params;&#13;&#10;    const updateData = req.body;&#13;&#10;&#13;&#10;    const content = await Content.findById(req.db, contentId);&#13;&#10;    if (!content) {&#13;&#10;      return res.status(404).json({&#13;&#10;        success: false,&#13;&#10;        message: 'Content not found'&#13;&#10;      });&#13;&#10;    }&#13;&#10;&#13;&#10;    // Handle image upload if provided&#13;&#10;    if (req.file) {&#13;&#10;      const oldImageUrl = content.image_url;&#13;&#10;      const imageUrl = await content.updateImage(req.r2, req.file, oldImageUrl);&#13;&#10;      updateData.image_url = imageUrl;&#13;&#10;    }&#13;&#10;&#13;&#10;    await content.update(req.db, updateData);&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      message: 'Content updated successfully'&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Update content error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error updating content'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Delete content&#13;&#10;const deleteContent = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const { contentId } = req.params;&#13;&#10;&#13;&#10;    const content = await Content.findById(req.db, contentId);&#13;&#10;    if (!content) {&#13;&#10;      return res.status(404).json({&#13;&#10;        success: false,&#13;&#10;        message: 'Content not found'&#13;&#10;      });&#13;&#10;    }&#13;&#10;&#13;&#10;    await content.delete(req.db, req.r2);&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      message: 'Content deleted successfully'&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Delete content error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error deleting content'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Get all content&#13;&#10;const getAllContent = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const { page = 1, limit = 20, type, status } = req.query;&#13;&#10;    const offset = (page - 1) * limit;&#13;&#10;    &#13;&#10;    const options = {&#13;&#10;      limit: parseInt(limit),&#13;&#10;      offset: parseInt(offset),&#13;&#10;      type,&#13;&#10;      status&#13;&#10;    };&#13;&#10;&#13;&#10;    const content = await Content.findAll(req.db, options);&#13;&#10;    &#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      data: content&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Get all content error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error fetching content'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;module.exports = {&#13;&#10;  getDashboardStats,&#13;&#10;  getAllUsers,&#13;&#10;  updateUserRole,&#13;&#10;  uploadImage,&#13;&#10;  deleteImage,&#13;&#10;  createContent,&#13;&#10;  updateContent,&#13;&#10;  deleteContent,&#13;&#10;  getAllContent&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/controllers/authController.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/controllers/authController.js" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="const jwt = require('jsonwebtoken');&#13;&#10;const bcrypt = require('bcryptjs');&#13;&#10;const User = require('../models/User');&#13;&#10;const Joi = require('joi');&#13;&#10;&#13;&#10;// Validation schemas&#13;&#10;const registerSchema = Joi.object({&#13;&#10;  name: Joi.string().min(2).max(50).required(),&#13;&#10;  email: Joi.string().email().required(),&#13;&#10;  password: Joi.string().min(6).required(),&#13;&#10;  phone: Joi.string().optional(),&#13;&#10;  address: Joi.string().optional()&#13;&#10;});&#13;&#10;&#13;&#10;const loginSchema = Joi.object({&#13;&#10;  email: Joi.string().email().required(),&#13;&#10;  password: Joi.string().required()&#13;&#10;});&#13;&#10;&#13;&#10;// Generate JWT token&#13;&#10;const generateToken = (userId) =&gt; {&#13;&#10;  return jwt.sign({ id: userId }, process.env.JWT_SECRET, {&#13;&#10;    expiresIn: '7d'&#13;&#10;  });&#13;&#10;};&#13;&#10;&#13;&#10;// Register new user&#13;&#10;const register = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const { error } = registerSchema.validate(req.body);&#13;&#10;    if (error) {&#13;&#10;      return res.status(400).json({ message: error.details[0].message });&#13;&#10;    }&#13;&#10;&#13;&#10;    const { name, email, password, phone, address } = req.body;&#13;&#10;&#13;&#10;    // Check if user already exists&#13;&#10;    const existingUser = await User.findByEmail(req.db, email);&#13;&#10;    if (existingUser) {&#13;&#10;      return res.status(400).json({ message: 'User already exists with this email' });&#13;&#10;    }&#13;&#10;&#13;&#10;    // Create new user&#13;&#10;    const user = new User({&#13;&#10;      name,&#13;&#10;      email,&#13;&#10;      password,&#13;&#10;      phone,&#13;&#10;      address&#13;&#10;    });&#13;&#10;&#13;&#10;    await user.save(req.db);&#13;&#10;&#13;&#10;    // Generate token&#13;&#10;    const token = generateToken(user.id);&#13;&#10;&#13;&#10;    res.status(201).json({&#13;&#10;      success: true,&#13;&#10;      message: 'User registered successfully',&#13;&#10;      token,&#13;&#10;      user: user.toJSON()&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Registration error:', error);&#13;&#10;    res.status(500).json({ message: 'Error creating user' });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Login user&#13;&#10;const login = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const { error } = loginSchema.validate(req.body);&#13;&#10;    if (error) {&#13;&#10;      return res.status(400).json({ message: error.details[0].message });&#13;&#10;    }&#13;&#10;&#13;&#10;    const { email, password } = req.body;&#13;&#10;&#13;&#10;    // Find user by email&#13;&#10;    const user = await User.findByEmail(req.db, email);&#13;&#10;    if (!user) {&#13;&#10;      return res.status(400).json({ message: 'Invalid email or password' });&#13;&#10;    }&#13;&#10;&#13;&#10;    // Check password&#13;&#10;    const isPasswordValid = await user.comparePassword(password);&#13;&#10;    if (!isPasswordValid) {&#13;&#10;      return res.status(400).json({ message: 'Invalid email or password' });&#13;&#10;    }&#13;&#10;&#13;&#10;    // Generate token&#13;&#10;    const token = generateToken(user.id);&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      message: 'Login successful',&#13;&#10;      token,&#13;&#10;      user: user.toJSON()&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Login error:', error);&#13;&#10;    res.status(500).json({ message: 'Error logging in' });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Get current user profile&#13;&#10;const getProfile = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const user = await User.findById(req.db, req.user.id);&#13;&#10;    if (!user) {&#13;&#10;      return res.status(404).json({ message: 'User not found' });&#13;&#10;    }&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      user: user.toJSON()&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Get profile error:', error);&#13;&#10;    res.status(500).json({ message: 'Error fetching profile' });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Update user profile&#13;&#10;const updateProfile = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const { name, phone, address } = req.body;&#13;&#10;    const updateData = {};&#13;&#10;&#13;&#10;    if (name) updateData.name = name;&#13;&#10;    if (phone) updateData.phone = phone;&#13;&#10;    if (address) updateData.address = address;&#13;&#10;&#13;&#10;    const user = await User.findById(req.db, req.user.id);&#13;&#10;    if (!user) {&#13;&#10;      return res.status(404).json({ message: 'User not found' });&#13;&#10;    }&#13;&#10;&#13;&#10;    await user.update(req.db, updateData);&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      message: 'Profile updated successfully'&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Update profile error:', error);&#13;&#10;    res.status(500).json({ message: 'Error updating profile' });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;module.exports = {&#13;&#10;  register,&#13;&#10;  login,&#13;&#10;  getProfile,&#13;&#10;  updateProfile&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/controllers/bookingController.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/controllers/bookingController.js" />
              <option name="updatedContent" value="const Booking = require('../models/Booking');&#10;const Tour = require('../models/Tour');&#10;const User = require('../models/User');&#10;const nodemailer = require('nodemailer');&#10;&#10;// Create email transporter&#10;const createEmailTransporter = () =&gt; {&#10;  return nodemailer.createTransporter({&#10;    host: process.env.EMAIL_HOST,&#10;    port: process.env.EMAIL_PORT,&#10;    secure: false,&#10;    auth: {&#10;      user: process.env.EMAIL_USER,&#10;      pass: process.env.EMAIL_PASS&#10;    }&#10;  });&#10;};&#10;&#10;// Send booking confirmation email&#10;const sendConfirmationEmail = async (booking, customer, tour) =&gt; {&#10;  try {&#10;    const transporter = createEmailTransporter();&#10;    &#10;    const emailTemplate = `&#10;      &lt;h2&gt;Booking Confirmation - ${tour.title}&lt;/h2&gt;&#10;      &lt;p&gt;Dear ${customer.name},&lt;/p&gt;&#10;      &lt;p&gt;Thank you for booking with us! Your booking has been confirmed.&lt;/p&gt;&#10;      &#10;      &lt;h3&gt;Booking Details:&lt;/h3&gt;&#10;      &lt;ul&gt;&#10;        &lt;li&gt;&lt;strong&gt;Booking Number:&lt;/strong&gt; ${booking.bookingNumber}&lt;/li&gt;&#10;        &lt;li&gt;&lt;strong&gt;Tour:&lt;/strong&gt; ${tour.title}&lt;/li&gt;&#10;        &lt;li&gt;&lt;strong&gt;Start Date:&lt;/strong&gt; ${booking.bookingDetails.startDate.toDateString()}&lt;/li&gt;&#10;        &lt;li&gt;&lt;strong&gt;Duration:&lt;/strong&gt; ${tour.duration.days} days / ${tour.duration.nights} nights&lt;/li&gt;&#10;        &lt;li&gt;&lt;strong&gt;Travelers:&lt;/strong&gt; ${booking.bookingDetails.totalTravelers}&lt;/li&gt;&#10;        &lt;li&gt;&lt;strong&gt;Total Amount:&lt;/strong&gt; ${booking.pricing.currency} ${booking.pricing.totalAmount}&lt;/li&gt;&#10;      &lt;/ul&gt;&#10;      &#10;      &lt;p&gt;We will contact you soon with more details about your trip.&lt;/p&gt;&#10;      &lt;p&gt;Best regards,&lt;br&gt;${process.env.COMPANY_NAME}&lt;/p&gt;&#10;    `;&#10;&#10;    await transporter.sendMail({&#10;      from: process.env.EMAIL_USER,&#10;      to: customer.email,&#10;      subject: `Booking Confirmation - ${booking.bookingNumber}`,&#10;      html: emailTemplate&#10;    });&#10;  } catch (error) {&#10;    console.error('Email sending error:', error);&#10;  }&#10;};&#10;&#10;// Create new booking&#10;const createBooking = async (req, res) =&gt; {&#10;  try {&#10;    const {&#10;      tourId,&#10;      startDate,&#10;      numberOfTravelers,&#10;      travelers,&#10;      specialRequests,&#10;      emergencyContact&#10;    } = req.body;&#10;&#10;    // Validate tour exists and is available&#10;    const tour = await Tour.findById(tourId);&#10;    if (!tour) {&#10;      return res.status(404).json({ message: 'Tour not found' });&#10;    }&#10;&#10;    const totalTravelers = numberOfTravelers.adults + numberOfTravelers.children + numberOfTravelers.infants;&#10;    &#10;    // Check availability&#10;    if (!tour.checkAvailability(new Date(startDate), totalTravelers)) {&#10;      return res.status(400).json({ message: 'Tour not available for selected date and group size' });&#10;    }&#10;&#10;    // Calculate pricing&#10;    const basePrice = tour.calculatePrice(new Date(startDate), totalTravelers);&#10;    const subtotal = basePrice * totalTravelers;&#10;    const taxes = subtotal * 0.1; // 10% tax&#10;    const totalAmount = subtotal + taxes;&#10;&#10;    // Calculate end date&#10;    const endDate = new Date(startDate);&#10;    endDate.setDate(endDate.getDate() + tour.duration.days - 1);&#10;&#10;    // Create booking&#10;    const booking = new Booking({&#10;      tour: tourId,&#10;      customer: req.user.id,&#10;      travelers,&#10;      bookingDetails: {&#10;        startDate: new Date(startDate),&#10;        endDate,&#10;        numberOfTravelers,&#10;        totalTravelers&#10;      },&#10;      pricing: {&#10;        basePrice,&#10;        subtotal,&#10;        taxes,&#10;        totalAmount,&#10;        currency: tour.pricing.currency&#10;      },&#10;      specialRequests,&#10;      emergencyContact&#10;    });&#10;&#10;    await booking.save();&#10;&#10;    // Update tour availability&#10;    const availability = tour.availability.find(slot =&gt; {&#10;      const bookingDate = new Date(startDate);&#10;      return bookingDate &gt;= slot.startDate &amp;&amp; bookingDate &lt;= slot.endDate;&#10;    });&#10;    &#10;    if (availability) {&#10;      availability.bookedSpots += totalTravelers;&#10;      await tour.save();&#10;    }&#10;&#10;    // Add booking to user's history&#10;    await User.findByIdAndUpdate(&#10;      req.user.id,&#10;      { $push: { bookingHistory: booking._id } }&#10;    );&#10;&#10;    // Populate booking for response&#10;    await booking.populate(['tour', 'customer']);&#10;&#10;    // Send confirmation email&#10;    sendConfirmationEmail(booking, req.user, tour);&#10;&#10;    res.status(201).json({&#10;      message: 'Booking created successfully',&#10;      booking&#10;    });&#10;  } catch (error) {&#10;    console.error('Create booking error:', error);&#10;    res.status(500).json({ message: 'Server error creating booking' });&#10;  }&#10;};&#10;&#10;// Get user's bookings&#10;const getUserBookings = async (req, res) =&gt; {&#10;  try {&#10;    const { page = 1, limit = 10, status } = req.query;&#10;    &#10;    const filter = { customer: req.user.id };&#10;    if (status) filter.status = status;&#10;&#10;    const bookings = await Booking.find(filter)&#10;      .populate('tour', 'title images duration destination')&#10;      .sort({ createdAt: -1 })&#10;      .limit(limit * 1)&#10;      .skip((page - 1) * limit);&#10;&#10;    const total = await Booking.countDocuments(filter);&#10;&#10;    res.json({&#10;      bookings,&#10;      pagination: {&#10;        currentPage: Number(page),&#10;        totalPages: Math.ceil(total / limit),&#10;        totalBookings: total&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Get user bookings error:', error);&#10;    res.status(500).json({ message: 'Server error fetching bookings' });&#10;  }&#10;};&#10;&#10;// Get single booking&#10;const getBooking = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    &#10;    const booking = await Booking.findOne({&#10;      _id: id,&#10;      customer: req.user.id&#10;    }).populate(['tour', 'customer']);&#10;&#10;    if (!booking) {&#10;      return res.status(404).json({ message: 'Booking not found' });&#10;    }&#10;&#10;    res.json({ booking });&#10;  } catch (error) {&#10;    console.error('Get booking error:', error);&#10;    res.status(500).json({ message: 'Server error fetching booking' });&#10;  }&#10;};&#10;&#10;// Cancel booking&#10;const cancelBooking = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    const { reason } = req.body;&#10;&#10;    const booking = await Booking.findOne({&#10;      _id: id,&#10;      customer: req.user.id&#10;    });&#10;&#10;    if (!booking) {&#10;      return res.status(404).json({ message: 'Booking not found' });&#10;    }&#10;&#10;    if (booking.status === 'cancelled') {&#10;      return res.status(400).json({ message: 'Booking already cancelled' });&#10;    }&#10;&#10;    // Check if cancellation is allowed (e.g., at least 24 hours before start date)&#10;    const now = new Date();&#10;    const startDate = new Date(booking.bookingDetails.startDate);&#10;    const hoursDifference = (startDate - now) / (1000 * 60 * 60);&#10;&#10;    if (hoursDifference &lt; 24) {&#10;      return res.status(400).json({ &#10;        message: 'Cancellation not allowed less than 24 hours before start date' &#10;      });&#10;    }&#10;&#10;    booking.status = 'cancelled';&#10;    booking.notes.push({&#10;      content: `Booking cancelled by customer. Reason: ${reason}`,&#10;      author: req.user.id&#10;    });&#10;&#10;    await booking.save();&#10;&#10;    // Update tour availability&#10;    const tour = await Tour.findById(booking.tour);&#10;    const availability = tour.availability.find(slot =&gt; {&#10;      const bookingDate = booking.bookingDetails.startDate;&#10;      return bookingDate &gt;= slot.startDate &amp;&amp; bookingDate &lt;= slot.endDate;&#10;    });&#10;    &#10;    if (availability) {&#10;      availability.bookedSpots -= booking.bookingDetails.totalTravelers;&#10;      await tour.save();&#10;    }&#10;&#10;    res.json({&#10;      message: 'Booking cancelled successfully',&#10;      booking&#10;    });&#10;  } catch (error) {&#10;    console.error('Cancel booking error:', error);&#10;    res.status(500).json({ message: 'Server error cancelling booking' });&#10;  }&#10;};&#10;&#10;module.exports = {&#10;  createBooking,&#10;  getUserBookings,&#10;  getBooking,&#10;  cancelBooking&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/controllers/paymentController.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/controllers/paymentController.js" />
              <option name="updatedContent" value="const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);&#10;const Booking = require('../models/Booking');&#10;&#10;// Create Stripe payment intent&#10;const createPaymentIntent = async (req, res) =&gt; {&#10;  try {&#10;    const { bookingId } = req.body;&#10;&#10;    const booking = await Booking.findOne({&#10;      _id: bookingId,&#10;      customer: req.user.id&#10;    }).populate('tour');&#10;&#10;    if (!booking) {&#10;      return res.status(404).json({ message: 'Booking not found' });&#10;    }&#10;&#10;    if (booking.payment.status === 'paid') {&#10;      return res.status(400).json({ message: 'Booking already paid' });&#10;    }&#10;&#10;    // Create payment intent with Stripe&#10;    const paymentIntent = await stripe.paymentIntents.create({&#10;      amount: Math.round(booking.pricing.totalAmount * 100), // Convert to cents&#10;      currency: booking.pricing.currency.toLowerCase(),&#10;      metadata: {&#10;        bookingId: booking._id.toString(),&#10;        tourTitle: booking.tour.title,&#10;        customerEmail: req.user.email&#10;      }&#10;    });&#10;&#10;    res.json({&#10;      clientSecret: paymentIntent.client_secret,&#10;      amount: booking.pricing.totalAmount,&#10;      currency: booking.pricing.currency&#10;    });&#10;  } catch (error) {&#10;    console.error('Payment intent error:', error);&#10;    res.status(500).json({ message: 'Error creating payment intent' });&#10;  }&#10;};&#10;&#10;// Confirm payment&#10;const confirmPayment = async (req, res) =&gt; {&#10;  try {&#10;    const { bookingId, paymentIntentId, paymentMethod } = req.body;&#10;&#10;    const booking = await Booking.findOne({&#10;      _id: bookingId,&#10;      customer: req.user.id&#10;    });&#10;&#10;    if (!booking) {&#10;      return res.status(404).json({ message: 'Booking not found' });&#10;    }&#10;&#10;    // Verify payment with Stripe&#10;    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);&#10;    &#10;    if (paymentIntent.status === 'succeeded') {&#10;      booking.payment.status = 'paid';&#10;      booking.payment.method = paymentMethod;&#10;      booking.payment.transactionId = paymentIntentId;&#10;      booking.payment.paidAmount = booking.pricing.totalAmount;&#10;      booking.payment.paymentDate = new Date();&#10;      booking.status = 'confirmed';&#10;&#10;      await booking.save();&#10;&#10;      res.json({&#10;        message: 'Payment confirmed successfully',&#10;        booking&#10;      });&#10;    } else {&#10;      res.status(400).json({ message: 'Payment not successful' });&#10;    }&#10;  } catch (error) {&#10;    console.error('Payment confirmation error:', error);&#10;    res.status(500).json({ message: 'Error confirming payment' });&#10;  }&#10;};&#10;&#10;// Handle VNPay payment (Vietnamese payment gateway)&#10;const createVNPayPayment = async (req, res) =&gt; {&#10;  try {&#10;    const { bookingId } = req.body;&#10;&#10;    const booking = await Booking.findOne({&#10;      _id: bookingId,&#10;      customer: req.user.id&#10;    });&#10;&#10;    if (!booking) {&#10;      return res.status(404).json({ message: 'Booking not found' });&#10;    }&#10;&#10;    // VNPay integration would go here&#10;    // This is a simplified version - you'll need to implement the actual VNPay API&#10;    const vnpayData = {&#10;      vnp_Amount: booking.pricing.totalAmount * 100,&#10;      vnp_Command: 'pay',&#10;      vnp_CreateDate: new Date().toISOString().replace(/[-T:\.Z]/g, ''),&#10;      vnp_CurrCode: 'VND',&#10;      vnp_IpAddr: req.ip,&#10;      vnp_Locale: 'vn',&#10;      vnp_OrderInfo: `Payment for booking ${booking.bookingNumber}`,&#10;      vnp_OrderType: 'other',&#10;      vnp_ReturnUrl: `${process.env.CLIENT_URL}/payment/vnpay/return`,&#10;      vnp_TmnCode: process.env.VNPAY_TMN_CODE,&#10;      vnp_TxnRef: booking.bookingNumber,&#10;      vnp_Version: '2.1.0'&#10;    };&#10;&#10;    // Generate VNPay URL (simplified)&#10;    const vnpayUrl = `https://sandbox.vnpayment.vn/paymentv2/vpcpay.html`;&#10;&#10;    res.json({&#10;      paymentUrl: vnpayUrl,&#10;      vnpayData&#10;    });&#10;  } catch (error) {&#10;    console.error('VNPay payment error:', error);&#10;    res.status(500).json({ message: 'Error creating VNPay payment' });&#10;  }&#10;};&#10;&#10;// Handle payment webhook (for automatic payment confirmation)&#10;const handleWebhook = async (req, res) =&gt; {&#10;  const sig = req.headers['stripe-signature'];&#10;&#10;  try {&#10;    const event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);&#10;&#10;    if (event.type === 'payment_intent.succeeded') {&#10;      const paymentIntent = event.data.object;&#10;      const bookingId = paymentIntent.metadata.bookingId;&#10;&#10;      const booking = await Booking.findById(bookingId);&#10;      if (booking) {&#10;        booking.payment.status = 'paid';&#10;        booking.payment.transactionId = paymentIntent.id;&#10;        booking.payment.paidAmount = paymentIntent.amount / 100;&#10;        booking.payment.paymentDate = new Date();&#10;        booking.status = 'confirmed';&#10;        await booking.save();&#10;      }&#10;    }&#10;&#10;    res.json({ received: true });&#10;  } catch (error) {&#10;    console.error('Webhook error:', error);&#10;    res.status(400).json({ message: 'Webhook error' });&#10;  }&#10;};&#10;&#10;module.exports = {&#10;  createPaymentIntent,&#10;  confirmPayment,&#10;  createVNPayPayment,&#10;  handleWebhook&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/controllers/tourController.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/controllers/tourController.js" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="const Tour = require('../models/Tour');&#13;&#10;const { r2Helpers } = require('../config/storage');&#13;&#10;&#13;&#10;// Get all tours with filtering and pagination&#13;&#10;const getTours = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const {&#13;&#10;      page = 1,&#13;&#10;      limit = 12,&#13;&#10;      location,&#13;&#10;      difficulty_level,&#13;&#10;      minPrice,&#13;&#10;      maxPrice,&#13;&#10;      search&#13;&#10;    } = req.query;&#13;&#10;&#13;&#10;    const offset = (page - 1) * limit;&#13;&#10;    const options = {&#13;&#10;      limit: parseInt(limit),&#13;&#10;      offset: parseInt(offset),&#13;&#10;      location,&#13;&#10;      difficulty_level&#13;&#10;    };&#13;&#10;&#13;&#10;    let tours;&#13;&#10;    if (search) {&#13;&#10;      tours = await Tour.search(req.db, search);&#13;&#10;    } else {&#13;&#10;      tours = await Tour.findAll(req.db, options);&#13;&#10;    }&#13;&#10;&#13;&#10;    // Filter by price if specified&#13;&#10;    if (minPrice || maxPrice) {&#13;&#10;      tours = tours.filter(tour =&gt; {&#13;&#10;        const price = tour.price;&#13;&#10;        if (minPrice &amp;&amp; price &lt; minPrice) return false;&#13;&#10;        if (maxPrice &amp;&amp; price &gt; maxPrice) return false;&#13;&#10;        return true;&#13;&#10;      });&#13;&#10;    }&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      data: tours.map(tour =&gt; tour.toJSON()),&#13;&#10;      pagination: {&#13;&#10;        currentPage: parseInt(page),&#13;&#10;        totalPages: Math.ceil(tours.length / limit),&#13;&#10;        hasNext: page * limit &lt; tours.length,&#13;&#10;        hasPrev: page &gt; 1&#13;&#10;      }&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Get tours error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error fetching tours'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Get single tour by ID&#13;&#10;const getTour = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const tour = await Tour.findById(req.db, req.params.id);&#13;&#10;    &#13;&#10;    if (!tour) {&#13;&#10;      return res.status(404).json({&#13;&#10;        success: false,&#13;&#10;        message: 'Tour not found'&#13;&#10;      });&#13;&#10;    }&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      data: tour.toJSON()&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Get tour error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error fetching tour'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Create new tour (admin only)&#13;&#10;const createTour = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const tourData = req.body;&#13;&#10;    const tour = new Tour(tourData);&#13;&#10;&#13;&#10;    // Handle image uploads if provided&#13;&#10;    if (req.files &amp;&amp; req.files.length &gt; 0) {&#13;&#10;      const imageUrls = await tour.updateImages(req.r2, req.files);&#13;&#10;      tour.images = imageUrls;&#13;&#10;      if (imageUrls.length &gt; 0) {&#13;&#10;        tour.image_url = imageUrls[0];&#13;&#10;      }&#13;&#10;    }&#13;&#10;&#13;&#10;    await tour.save(req.db);&#13;&#10;&#13;&#10;    res.status(201).json({&#13;&#10;      success: true,&#13;&#10;      data: tour.toJSON(),&#13;&#10;      message: 'Tour created successfully'&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Create tour error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error creating tour'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Update tour (admin only)&#13;&#10;const updateTour = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const tour = await Tour.findById(req.db, req.params.id);&#13;&#10;    &#13;&#10;    if (!tour) {&#13;&#10;      return res.status(404).json({&#13;&#10;        success: false,&#13;&#10;        message: 'Tour not found'&#13;&#10;      });&#13;&#10;    }&#13;&#10;&#13;&#10;    const updateData = req.body;&#13;&#10;&#13;&#10;    // Handle image uploads if provided&#13;&#10;    if (req.files &amp;&amp; req.files.length &gt; 0) {&#13;&#10;      const oldImages = tour.images || [];&#13;&#10;      const imageUrls = await tour.updateImages(req.r2, req.files, oldImages);&#13;&#10;      updateData.images = imageUrls;&#13;&#10;      if (imageUrls.length &gt; 0) {&#13;&#10;        updateData.image_url = imageUrls[0];&#13;&#10;      }&#13;&#10;    }&#13;&#10;&#13;&#10;    await tour.update(req.db, updateData);&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      message: 'Tour updated successfully'&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Update tour error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error updating tour'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Delete tour (admin only)&#13;&#10;const deleteTour = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const tour = await Tour.findById(req.db, req.params.id);&#13;&#10;    &#13;&#10;    if (!tour) {&#13;&#10;      return res.status(404).json({&#13;&#10;        success: false,&#13;&#10;        message: 'Tour not found'&#13;&#10;      });&#13;&#10;    }&#13;&#10;&#13;&#10;    await tour.delete(req.db, req.r2);&#13;&#10;&#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      message: 'Tour deleted successfully'&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Delete tour error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error deleting tour'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;// Get tour statistics (admin only)&#13;&#10;const getTourStats = async (req, res) =&gt; {&#13;&#10;  try {&#13;&#10;    const stats = await Tour.getStats(req.db);&#13;&#10;    &#13;&#10;    res.json({&#13;&#10;      success: true,&#13;&#10;      data: stats&#13;&#10;    });&#13;&#10;  } catch (error) {&#13;&#10;    console.error('Get tour stats error:', error);&#13;&#10;    res.status(500).json({&#13;&#10;      success: false,&#13;&#10;      message: 'Error fetching tour statistics'&#13;&#10;    });&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;module.exports = {&#13;&#10;  getTours,&#13;&#10;  getTour,&#13;&#10;  createTour,&#13;&#10;  updateTour,&#13;&#10;  deleteTour,&#13;&#10;  getTourStats&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/middleware/auth.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/middleware/auth.js" />
              <option name="updatedContent" value="const jwt = require('jsonwebtoken');&#10;const User = require('../models/User');&#10;&#10;const auth = async (req, res, next) =&gt; {&#10;  try {&#10;    const token = req.header('Authorization')?.replace('Bearer ', '');&#10;    &#10;    if (!token) {&#10;      return res.status(401).json({ message: 'Access denied. No token provided.' });&#10;    }&#10;&#10;    const decoded = jwt.verify(token, process.env.JWT_SECRET);&#10;    const user = await User.findById(decoded.id).select('-password');&#10;    &#10;    if (!user) {&#10;      return res.status(401).json({ message: 'Invalid token.' });&#10;    }&#10;&#10;    req.user = user;&#10;    next();&#10;  } catch (error) {&#10;    res.status(401).json({ message: 'Invalid token.' });&#10;  }&#10;};&#10;&#10;const adminAuth = async (req, res, next) =&gt; {&#10;  try {&#10;    await auth(req, res, () =&gt; {});&#10;    &#10;    if (req.user.role !== 'admin') {&#10;      return res.status(403).json({ message: 'Access denied. Admin privileges required.' });&#10;    }&#10;    &#10;    next();&#10;  } catch (error) {&#10;    res.status(401).json({ message: 'Authentication failed.' });&#10;  }&#10;};&#10;&#10;const editorAuth = async (req, res, next) =&gt; {&#10;  try {&#10;    await auth(req, res, () =&gt; {});&#10;    &#10;    if (!['admin', 'editor'].includes(req.user.role)) {&#10;      return res.status(403).json({ message: 'Access denied. Editor privileges required.' });&#10;    }&#10;    &#10;    next();&#10;  } catch (error) {&#10;    res.status(401).json({ message: 'Authentication failed.' });&#10;  }&#10;};&#10;&#10;module.exports = { auth, adminAuth, editorAuth };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/models/Booking.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/models/Booking.js" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="const { v4: uuidv4 } = require('uuid');&#13;&#10;const { dbHelpers } = require('../config/database');&#13;&#10;&#13;&#10;class Booking {&#13;&#10;  constructor(data) {&#13;&#10;    this.id = data.id || uuidv4();&#13;&#10;    this.user_id = data.user_id;&#13;&#10;    this.tour_id = data.tour_id;&#13;&#10;    this.booking_date = data.booking_date;&#13;&#10;    this.participants = data.participants;&#13;&#10;    this.total_amount = data.total_amount;&#13;&#10;    this.status = data.status || 'pending';&#13;&#10;    this.payment_status = data.payment_status || 'pending';&#13;&#10;    this.payment_intent_id = data.payment_intent_id;&#13;&#10;    this.special_requests = data.special_requests;&#13;&#10;    this.created_at = data.created_at;&#13;&#10;    this.updated_at = data.updated_at;&#13;&#10;  }&#13;&#10;&#13;&#10;  // Save booking to database&#13;&#10;  async save(db) {&#13;&#10;    const bookingData = {&#13;&#10;      id: this.id,&#13;&#10;      user_id: this.user_id,&#13;&#10;      tour_id: this.tour_id,&#13;&#10;      booking_date: this.booking_date,&#13;&#10;      participants: this.participants,&#13;&#10;      total_amount: this.total_amount,&#13;&#10;      status: this.status,&#13;&#10;      payment_status: this.payment_status,&#13;&#10;      payment_intent_id: this.payment_intent_id,&#13;&#10;      special_requests: this.special_requests&#13;&#10;    };&#13;&#10;    &#13;&#10;    return await dbHelpers.insert(db, 'bookings', bookingData);&#13;&#10;  }&#13;&#10;&#13;&#10;  // Find booking by ID&#13;&#10;  static async findById(db, id) {&#13;&#10;    const bookings = await dbHelpers.query(db, 'SELECT * FROM bookings WHERE id = ?', [id]);&#13;&#10;    return bookings.length &gt; 0 ? new Booking(bookings[0]) : null;&#13;&#10;  }&#13;&#10;&#13;&#10;  // Find bookings by user ID&#13;&#10;  static async findByUserId(db, userId) {&#13;&#10;    const bookings = await dbHelpers.query(&#13;&#10;      db, &#13;&#10;      'SELECT * FROM bookings WHERE user_id = ? ORDER BY created_at DESC', &#13;&#10;      [userId]&#13;&#10;    );&#13;&#10;    return bookings.map(booking =&gt; new Booking(booking));&#13;&#10;  }&#13;&#10;&#13;&#10;  // Get all bookings with pagination&#13;&#10;  static async findAll(db, options = {}) {&#13;&#10;    const { limit = 50, offset = 0, status, payment_status } = options;&#13;&#10;    &#13;&#10;    let sql = 'SELECT * FROM bookings';&#13;&#10;    const params = [];&#13;&#10;    const conditions = [];&#13;&#10;    &#13;&#10;    if (status) {&#13;&#10;      conditions.push('status = ?');&#13;&#10;      params.push(status);&#13;&#10;    }&#13;&#10;    &#13;&#10;    if (payment_status) {&#13;&#10;      conditions.push('payment_status = ?');&#13;&#10;      params.push(payment_status);&#13;&#10;    }&#13;&#10;    &#13;&#10;    if (conditions.length &gt; 0) {&#13;&#10;      sql += ' WHERE ' + conditions.join(' AND ');&#13;&#10;    }&#13;&#10;    &#13;&#10;    sql += ' ORDER BY created_at DESC LIMIT ? OFFSET ?';&#13;&#10;    params.push(limit, offset);&#13;&#10;    &#13;&#10;    const bookings = await dbHelpers.query(db, sql, params);&#13;&#10;    return bookings.map(booking =&gt; new Booking(booking));&#13;&#10;  }&#13;&#10;&#13;&#10;  // Update booking&#13;&#10;  async update(db, updateData) {&#13;&#10;    return await dbHelpers.update(db, 'bookings', updateData, 'id = ?', [this.id]);&#13;&#10;  }&#13;&#10;&#13;&#10;  // Delete booking&#13;&#10;  async delete(db) {&#13;&#10;    return await dbHelpers.delete(db, 'bookings', 'id = ?', [this.id]);&#13;&#10;  }&#13;&#10;&#13;&#10;  // Get booking statistics&#13;&#10;  static async getStats(db) {&#13;&#10;    const totalBookings = await dbHelpers.query(db, 'SELECT COUNT(*) as count FROM bookings');&#13;&#10;    const bookingsByStatus = await dbHelpers.query(db, 'SELECT status, COUNT(*) as count FROM bookings GROUP BY status');&#13;&#10;    const totalRevenue = await dbHelpers.query(db, 'SELECT SUM(total_amount) as total FROM bookings WHERE payment_status = ?', ['completed']);&#13;&#10;    &#13;&#10;    return {&#13;&#10;      total: totalBookings[0].count,&#13;&#10;      byStatus: bookingsByStatus,&#13;&#10;      totalRevenue: totalRevenue[0].total || 0&#13;&#10;    };&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;module.exports = Booking;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/models/Content.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/models/Content.js" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="const { v4: uuidv4 } = require('uuid');&#13;&#10;const { dbHelpers } = require('../config/database');&#13;&#10;const { r2Helpers } = require('../config/storage');&#13;&#10;&#13;&#10;class Content {&#13;&#10;  constructor(data) {&#13;&#10;    this.id = data.id || uuidv4();&#13;&#10;    this.type = data.type;&#13;&#10;    this.title = data.title;&#13;&#10;    this.content = data.content;&#13;&#10;    this.image_url = data.image_url;&#13;&#10;    this.status = data.status || 'published';&#13;&#10;    this.created_at = data.created_at;&#13;&#10;    this.updated_at = data.updated_at;&#13;&#10;  }&#13;&#10;&#13;&#10;  // Save content to database&#13;&#10;  async save(db) {&#13;&#10;    const contentData = {&#13;&#10;      id: this.id,&#13;&#10;      type: this.type,&#13;&#10;      title: this.title,&#13;&#10;      content: this.content,&#13;&#10;      image_url: this.image_url,&#13;&#10;      status: this.status&#13;&#10;    };&#13;&#10;    &#13;&#10;    return await dbHelpers.insert(db, 'content', contentData);&#13;&#10;  }&#13;&#10;&#13;&#10;  // Update content image using R2&#13;&#10;  async updateImage(r2Bucket, newImageFile, oldImageUrl = null) {&#13;&#10;    try {&#13;&#10;      // Delete old image from R2 if it exists&#13;&#10;      if (oldImageUrl) {&#13;&#10;        await r2Helpers.deleteImage(r2Bucket, oldImageUrl);&#13;&#10;      }&#13;&#10;&#13;&#10;      // Upload new image to R2&#13;&#10;      if (newImageFile) {&#13;&#10;        r2Helpers.validateImage(newImageFile);&#13;&#10;        const imageUrl = await r2Helpers.uploadImage(r2Bucket, newImageFile, 'content');&#13;&#10;        this.image_url = imageUrl;&#13;&#10;        return imageUrl;&#13;&#10;      }&#13;&#10;&#13;&#10;      return null;&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Error updating content image:', error);&#13;&#10;      throw error;&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  // Find content by ID&#13;&#10;  static async findById(db, id) {&#13;&#10;    const content = await dbHelpers.query(db, 'SELECT * FROM content WHERE id = ?', [id]);&#13;&#10;    return content.length &gt; 0 ? new Content(content[0]) : null;&#13;&#10;  }&#13;&#10;&#13;&#10;  // Find content by type&#13;&#10;  static async findByType(db, type, status = 'published') {&#13;&#10;    const content = await dbHelpers.query(&#13;&#10;      db, &#13;&#10;      'SELECT * FROM content WHERE type = ? AND status = ? ORDER BY created_at DESC', &#13;&#10;      [type, status]&#13;&#10;    );&#13;&#10;    return content.map(item =&gt; new Content(item));&#13;&#10;  }&#13;&#10;&#13;&#10;  // Get all content with pagination&#13;&#10;  static async findAll(db, options = {}) {&#13;&#10;    const { limit = 20, offset = 0, status, type } = options;&#13;&#10;    &#13;&#10;    let sql = 'SELECT * FROM content';&#13;&#10;    const params = [];&#13;&#10;    const conditions = [];&#13;&#10;    &#13;&#10;    if (status) {&#13;&#10;      conditions.push('status = ?');&#13;&#10;      params.push(status);&#13;&#10;    }&#13;&#10;    &#13;&#10;    if (type) {&#13;&#10;      conditions.push('type = ?');&#13;&#10;      params.push(type);&#13;&#10;    }&#13;&#10;    &#13;&#10;    if (conditions.length &gt; 0) {&#13;&#10;      sql += ' WHERE ' + conditions.join(' AND ');&#13;&#10;    }&#13;&#10;    &#13;&#10;    sql += ' ORDER BY created_at DESC LIMIT ? OFFSET ?';&#13;&#10;    params.push(limit, offset);&#13;&#10;    &#13;&#10;    const content = await dbHelpers.query(db, sql, params);&#13;&#10;    return content.map(item =&gt; new Content(item));&#13;&#10;  }&#13;&#10;&#13;&#10;  // Update content&#13;&#10;  async update(db, updateData) {&#13;&#10;    return await dbHelpers.update(db, 'content', updateData, 'id = ?', [this.id]);&#13;&#10;  }&#13;&#10;&#13;&#10;  // Delete content&#13;&#10;  async delete(db, r2Bucket) {&#13;&#10;    // Delete image from R2 storage if it exists&#13;&#10;    if (this.image_url) {&#13;&#10;      await r2Helpers.deleteImage(r2Bucket, this.image_url);&#13;&#10;    }&#13;&#10;    &#13;&#10;    return await dbHelpers.delete(db, 'content', 'id = ?', [this.id]);&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;module.exports = Content;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/models/Review.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/models/Review.js" />
              <option name="updatedContent" value="const { v4: uuidv4 } = require('uuid');&#10;const { dbHelpers } = require('../config/database');&#10;&#10;class Review {&#10;  constructor(data) {&#10;    this.id = data.id || uuidv4();&#10;    this.user_id = data.user_id;&#10;    this.tour_id = data.tour_id;&#10;    this.rating = data.rating;&#10;    this.comment = data.comment;&#10;    this.created_at = data.created_at;&#10;  }&#10;&#10;  // Save review to database&#10;  async save(db) {&#10;    const reviewData = {&#10;      id: this.id,&#10;      user_id: this.user_id,&#10;      tour_id: this.tour_id,&#10;      rating: this.rating,&#10;      comment: this.comment&#10;    };&#10;    &#10;    return await dbHelpers.insert(db, 'reviews', reviewData);&#10;  }&#10;&#10;  // Find review by ID&#10;  static async findById(db, id) {&#10;    const reviews = await dbHelpers.query(db, 'SELECT * FROM reviews WHERE id = ?', [id]);&#10;    return reviews.length &gt; 0 ? new Review(reviews[0]) : null;&#10;  }&#10;&#10;  // Find reviews by tour ID&#10;  static async findByTourId(db, tourId, limit = 10, offset = 0) {&#10;    const reviews = await dbHelpers.query(&#10;      db, &#10;      `SELECT r.*, u.name as user_name &#10;       FROM reviews r &#10;       JOIN users u ON r.user_id = u.id &#10;       WHERE r.tour_id = ? &#10;       ORDER BY r.created_at DESC &#10;       LIMIT ? OFFSET ?`, &#10;      [tourId, limit, offset]&#10;    );&#10;    return reviews.map(review =&gt; new Review(review));&#10;  }&#10;&#10;  // Find reviews by user ID&#10;  static async findByUserId(db, userId) {&#10;    const reviews = await dbHelpers.query(&#10;      db, &#10;      `SELECT r.*, t.title as tour_title &#10;       FROM reviews r &#10;       JOIN tours t ON r.tour_id = t.id &#10;       WHERE r.user_id = ? &#10;       ORDER BY r.created_at DESC`, &#10;      [userId]&#10;    );&#10;    return reviews.map(review =&gt; new Review(review));&#10;  }&#10;&#10;  // Get all reviews with pagination&#10;  static async findAll(db, limit = 50, offset = 0) {&#10;    const reviews = await dbHelpers.query(&#10;      db, &#10;      `SELECT r.*, u.name as user_name, t.title as tour_title &#10;       FROM reviews r &#10;       JOIN users u ON r.user_id = u.id &#10;       JOIN tours t ON r.tour_id = t.id &#10;       ORDER BY r.created_at DESC &#10;       LIMIT ? OFFSET ?`, &#10;      [limit, offset]&#10;    );&#10;    return reviews.map(review =&gt; new Review(review));&#10;  }&#10;&#10;  // Get average rating for a tour&#10;  static async getAverageRating(db, tourId) {&#10;    const result = await dbHelpers.query(&#10;      db, &#10;      'SELECT AVG(rating) as average, COUNT(*) as count FROM reviews WHERE tour_id = ?', &#10;      [tourId]&#10;    );&#10;    return {&#10;      average: result[0].average || 0,&#10;      count: result[0].count || 0&#10;    };&#10;  }&#10;&#10;  // Update review&#10;  async update(db, updateData) {&#10;    return await dbHelpers.update(db, 'reviews', updateData, 'id = ?', [this.id]);&#10;  }&#10;&#10;  // Delete review&#10;  async delete(db) {&#10;    return await dbHelpers.delete(db, 'reviews', 'id = ?', [this.id]);&#10;  }&#10;}&#10;&#10;module.exports = Review;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/models/Tour.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/models/Tour.js" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="const { v4: uuidv4 } = require('uuid');&#10;const { dbHelpers } = require('../config/database');&#10;const { r2Helpers } = require('../config/storage');&#10;&#10;class Tour {&#10;  constructor(data) {&#10;    this.id = data.id || uuidv4();&#10;    this.title = data.title;&#10;    this.description = data.description;&#10;    this.price = data.price;&#10;    this.duration = data.duration;&#10;    this.location = data.location;&#10;    this.max_participants = data.max_participants;&#10;    this.difficulty_level = data.difficulty_level;&#10;    this.image_url = data.image_url;&#10;    this.images = data.images ? (typeof data.images === 'string' ? JSON.parse(data.images) : data.images) : [];&#10;    this.itinerary = data.itinerary ? (typeof data.itinerary === 'string' ? JSON.parse(data.itinerary) : data.itinerary) : {};&#10;    this.included = data.included ? (typeof data.included === 'string' ? JSON.parse(data.included) : data.included) : [];&#10;    this.excluded = data.excluded ? (typeof data.excluded === 'string' ? JSON.parse(data.excluded) : data.excluded) : [];&#10;    this.status = data.status || 'active';&#10;    this.created_at = data.created_at;&#10;    this.updated_at = data.updated_at;&#10;  }&#10;&#10;  // Save tour to database&#10;  async save(db) {&#10;    const tourData = {&#10;      id: this.id,&#10;      title: this.title,&#10;      description: this.description,&#10;      price: this.price,&#10;      duration: this.duration,&#10;      location: this.location,&#10;      max_participants: this.max_participants,&#10;      difficulty_level: this.difficulty_level,&#10;      image_url: this.image_url,&#10;      images: JSON.stringify(this.images),&#10;      itinerary: JSON.stringify(this.itinerary),&#10;      included: JSON.stringify(this.included),&#10;      excluded: JSON.stringify(this.excluded),&#10;      status: this.status&#10;    };&#10;    &#10;    return await dbHelpers.insert(db, 'tours', tourData);&#10;  }&#10;&#10;  // Update tour images using R2&#10;  async updateImages(r2Bucket, newImageFiles, oldImages = []) {&#10;    try {&#10;      // Delete old images from R2 if they exist&#10;      if (oldImages.length &gt; 0) {&#10;        for (const imageUrl of oldImages) {&#10;          await r2Helpers.deleteImage(r2Bucket, imageUrl);&#10;        }&#10;      }&#10;&#10;      // Upload new images to R2&#10;      const uploadedImageUrls = [];&#10;      if (newImageFiles &amp;&amp; newImageFiles.length &gt; 0) {&#10;        for (const file of newImageFiles) {&#10;          r2Helpers.validateImage(file);&#10;          const imageUrl = await r2Helpers.uploadImage(r2Bucket, file, 'tours');&#10;          uploadedImageUrls.push(imageUrl);&#10;        }&#10;      }&#10;&#10;      this.images = uploadedImageUrls;&#10;      if (uploadedImageUrls.length &gt; 0) {&#10;        this.image_url = uploadedImageUrls[0]; // Set first image as primary&#10;      }&#10;&#10;      return uploadedImageUrls;&#10;    } catch (error) {&#10;      console.error('Error updating tour images:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Find tour by ID&#10;  static async findById(db, id) {&#10;    const tours = await dbHelpers.query(db, 'SELECT * FROM tours WHERE id = ?', [id]);&#10;    return tours.length &gt; 0 ? new Tour(tours[0]) : null;&#10;  }&#10;&#10;  // Get all tours with pagination&#10;  static async findAll(db, options = {}) {&#10;    const { limit = 20, offset = 0, status = 'active', location, difficulty_level } = options;&#10;    &#10;    let sql = 'SELECT * FROM tours WHERE status = ?';&#10;    const params = [status];&#10;    &#10;    if (location) {&#10;      sql += ' AND location LIKE ?';&#10;      params.push(`%${location}%`);&#10;    }&#10;    &#10;    if (difficulty_level) {&#10;      sql += ' AND difficulty_level = ?';&#10;      params.push(difficulty_level);&#10;    }&#10;    &#10;    sql += ' ORDER BY created_at DESC LIMIT ? OFFSET ?';&#10;    params.push(limit, offset);&#10;    &#10;    const tours = await dbHelpers.query(db, sql, params);&#10;    return tours.map(tour =&gt; new Tour(tour));&#10;  }&#10;&#10;  // Search tours&#10;  static async search(db, searchTerm) {&#10;    const sql = `&#10;      SELECT * FROM tours &#10;      WHERE status = 'active' &#10;      AND (title LIKE ? OR description LIKE ? OR location LIKE ?)&#10;      ORDER BY created_at DESC&#10;    `;&#10;    const searchPattern = `%${searchTerm}%`;&#10;    const tours = await dbHelpers.query(db, sql, [searchPattern, searchPattern, searchPattern]);&#10;    return tours.map(tour =&gt; new Tour(tour));&#10;  }&#10;&#10;  // Update tour&#10;  async update(db, updateData) {&#10;    // Handle JSON fields&#10;    if (updateData.images) {&#10;      updateData.images = JSON.stringify(updateData.images);&#10;    }&#10;    if (updateData.itinerary) {&#10;      updateData.itinerary = JSON.stringify(updateData.itinerary);&#10;    }&#10;    if (updateData.included) {&#10;      updateData.included = JSON.stringify(updateData.included);&#10;    }&#10;    if (updateData.excluded) {&#10;      updateData.excluded = JSON.stringify(updateData.excluded);&#10;    }&#10;    &#10;    return await dbHelpers.update(db, 'tours', updateData, 'id = ?', [this.id]);&#10;  }&#10;&#10;  // Delete tour&#10;  async delete(db, r2Bucket) {&#10;    // Delete images from R2 storage&#10;    if (this.images &amp;&amp; this.images.length &gt; 0) {&#10;      for (const imageUrl of this.images) {&#10;        await r2Helpers.deleteImage(r2Bucket, imageUrl);&#10;      }&#10;    }&#10;    &#10;    return await dbHelpers.delete(db, 'tours', 'id = ?', [this.id]);&#10;  }&#10;&#10;  // Get tour stats&#10;  static async getStats(db) {&#10;    const totalTours = await dbHelpers.query(db, 'SELECT COUNT(*) as count FROM tours WHERE status = ?', ['active']);&#10;    const toursByLocation = await dbHelpers.query(db, 'SELECT location, COUNT(*) as count FROM tours WHERE status = ? GROUP BY location', ['active']);&#10;    const toursByDifficulty = await dbHelpers.query(db, 'SELECT difficulty_level, COUNT(*) as count FROM tours WHERE status = ? GROUP BY difficulty_level', ['active']);&#10;    &#10;    return {&#10;      total: totalTours[0].count,&#10;      byLocation: toursByLocation,&#10;      byDifficulty: toursByDifficulty&#10;    };&#10;  }&#10;&#10;  // Convert to JSON&#10;  toJSON() {&#10;    return {&#10;      ...this,&#10;      images: typeof this.images === 'string' ? JSON.parse(this.images) : this.images,&#10;      itinerary: typeof this.itinerary === 'string' ? JSON.parse(this.itinerary) : this.itinerary,&#10;      included: typeof this.included === 'string' ? JSON.parse(this.included) : this.included,&#10;      excluded: typeof this.excluded === 'string' ? JSON.parse(this.excluded) : this.excluded&#10;    };&#10;  }&#10;}&#10;&#10;module.exports = Tour;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/models/User.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/models/User.js" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="const bcrypt = require('bcryptjs');&#10;const { v4: uuidv4 } = require('uuid');&#10;const { dbHelpers } = require('../config/database');&#10;&#10;class User {&#10;  constructor(data) {&#10;    this.id = data.id || uuidv4();&#10;    this.name = data.name;&#10;    this.email = data.email?.toLowerCase();&#10;    this.password = data.password;&#10;    this.phone = data.phone;&#10;    this.address = data.address;&#10;    this.role = data.role || 'user';&#10;    this.created_at = data.created_at;&#10;    this.updated_at = data.updated_at;&#10;  }&#10;&#10;  // Hash password before saving&#10;  async hashPassword() {&#10;    if (this.password) {&#10;      this.password = await bcrypt.hash(this.password, 12);&#10;    }&#10;  }&#10;&#10;  // Compare password&#10;  async comparePassword(candidatePassword) {&#10;    return await bcrypt.compare(candidatePassword, this.password);&#10;  }&#10;&#10;  // Save user to database&#10;  async save(db) {&#10;    await this.hashPassword();&#10;    const userData = {&#10;      id: this.id,&#10;      name: this.name,&#10;      email: this.email,&#10;      password: this.password,&#10;      phone: this.phone,&#10;      address: this.address,&#10;      role: this.role&#10;    };&#10;    &#10;    return await dbHelpers.insert(db, 'users', userData);&#10;  }&#10;&#10;  // Find user by email&#10;  static async findByEmail(db, email) {&#10;    const users = await dbHelpers.query(db, 'SELECT * FROM users WHERE email = ?', [email.toLowerCase()]);&#10;    return users.length &gt; 0 ? new User(users[0]) : null;&#10;  }&#10;&#10;  // Find user by ID&#10;  static async findById(db, id) {&#10;    const users = await dbHelpers.query(db, 'SELECT * FROM users WHERE id = ?', [id]);&#10;    return users.length &gt; 0 ? new User(users[0]) : null;&#10;  }&#10;&#10;  // Get all users (admin only)&#10;  static async findAll(db, limit = 50, offset = 0) {&#10;    const users = await dbHelpers.query(&#10;      db, &#10;      'SELECT id, name, email, phone, address, role, created_at FROM users ORDER BY created_at DESC LIMIT ? OFFSET ?', &#10;      [limit, offset]&#10;    );&#10;    return users.map(user =&gt; new User(user));&#10;  }&#10;&#10;  // Update user&#10;  async update(db, updateData) {&#10;    if (updateData.password) {&#10;      updateData.password = await bcrypt.hash(updateData.password, 12);&#10;    }&#10;    &#10;    return await dbHelpers.update(db, 'users', updateData, 'id = ?', [this.id]);&#10;  }&#10;&#10;  // Delete user&#10;  async delete(db) {&#10;    return await dbHelpers.delete(db, 'users', 'id = ?', [this.id]);&#10;  }&#10;&#10;  // Convert to JSON (exclude password)&#10;  toJSON() {&#10;    const { password, ...userWithoutPassword } = this;&#10;    return userWithoutPassword;&#10;  }&#10;}&#10;&#10;module.exports = User;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;travelling-website-backend&quot;,&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#10;  &quot;description&quot;: &quot;Backend API for travelling website&quot;,&#10;  &quot;main&quot;: &quot;server.js&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;start&quot;: &quot;node server.js&quot;,&#10;    &quot;dev&quot;: &quot;nodemon server.js&quot;,&#10;    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;bcryptjs&quot;: &quot;^2.4.3&quot;,&#10;    &quot;cors&quot;: &quot;^2.8.5&quot;,&#10;    &quot;dotenv&quot;: &quot;^16.3.1&quot;,&#10;    &quot;express&quot;: &quot;^4.18.2&quot;,&#10;    &quot;express-rate-limit&quot;: &quot;^6.10.0&quot;,&#10;    &quot;helmet&quot;: &quot;^7.0.0&quot;,&#10;    &quot;joi&quot;: &quot;^17.9.2&quot;,&#10;    &quot;jsonwebtoken&quot;: &quot;^9.0.2&quot;,&#10;    &quot;mongoose&quot;: &quot;^7.5.0&quot;,&#10;    &quot;multer&quot;: &quot;^1.4.5-lts.1&quot;,&#10;    &quot;nodemailer&quot;: &quot;^6.9.4&quot;,&#10;    &quot;stripe&quot;: &quot;^13.5.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;nodemon&quot;: &quot;^3.0.1&quot;&#10;  },&#10;  &quot;keywords&quot;: [&#10;    &quot;travel&quot;,&#10;    &quot;booking&quot;,&#10;    &quot;api&quot;,&#10;    &quot;express&quot;,&#10;    &quot;mongodb&quot;&#10;  ],&#10;  &quot;author&quot;: &quot;Travel Company&quot;,&#10;  &quot;license&quot;: &quot;MIT&quot;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;name&quot;: &quot;travelling-website-backend&quot;,&#13;&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#13;&#10;  &quot;description&quot;: &quot;Backend API for travelling website&quot;,&#13;&#10;  &quot;main&quot;: &quot;server.js&quot;,&#13;&#10;  &quot;scripts&quot;: {&#13;&#10;    &quot;start&quot;: &quot;node server.js&quot;,&#13;&#10;    &quot;dev&quot;: &quot;nodemon server.js&quot;,&#13;&#10;    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;&#13;&#10;  },&#13;&#10;  &quot;dependencies&quot;: {&#13;&#10;    &quot;bcryptjs&quot;: &quot;^2.4.3&quot;,&#13;&#10;    &quot;cors&quot;: &quot;^2.8.5&quot;,&#13;&#10;    &quot;dotenv&quot;: &quot;^16.3.1&quot;,&#13;&#10;    &quot;express&quot;: &quot;^4.18.2&quot;,&#13;&#10;    &quot;express-rate-limit&quot;: &quot;^6.10.0&quot;,&#13;&#10;    &quot;helmet&quot;: &quot;^7.0.0&quot;,&#13;&#10;    &quot;joi&quot;: &quot;^17.9.2&quot;,&#13;&#10;    &quot;jsonwebtoken&quot;: &quot;^9.0.2&quot;,&#13;&#10;    &quot;@cloudflare/workers-types&quot;: &quot;^4.20240806.0&quot;,&#13;&#10;    &quot;wrangler&quot;: &quot;^3.0.0&quot;,&#13;&#10;    &quot;uuid&quot;: &quot;^9.0.0&quot;,&#13;&#10;    &quot;nodemailer&quot;: &quot;^6.9.4&quot;,&#13;&#10;    &quot;stripe&quot;: &quot;^13.5.0&quot;&#13;&#10;  },&#13;&#10;  &quot;devDependencies&quot;: {&#13;&#10;    &quot;nodemon&quot;: &quot;^3.0.1&quot;&#13;&#10;  },&#13;&#10;  &quot;keywords&quot;: [&#13;&#10;    &quot;travel&quot;,&#13;&#10;    &quot;booking&quot;,&#13;&#10;    &quot;api&quot;,&#13;&#10;    &quot;express&quot;,&#13;&#10;    &quot;cloudflare-d1&quot;,&#13;&#10;    &quot;cloudflare-r2&quot;&#13;&#10;  ],&#13;&#10;  &quot;author&quot;: &quot;Travel Company&quot;,&#13;&#10;  &quot;license&quot;: &quot;MIT&quot;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/admin.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/admin.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { adminAuth, editorAuth } = require('../middleware/auth');&#10;const {&#10;  getDashboardStats,&#10;  getAllBookings,&#10;  updateBookingStatus,&#10;  getAllUsers,&#10;  getAllToursAdmin,&#10;  getAllReviews,&#10;  updateReviewStatus&#10;} = require('../controllers/adminController');&#10;&#10;// @route   GET /api/admin/dashboard&#10;// @desc    Get dashboard statistics&#10;// @access  Private (Admin only)&#10;router.get('/dashboard', adminAuth, getDashboardStats);&#10;&#10;// @route   GET /api/admin/bookings&#10;// @desc    Get all bookings&#10;// @access  Private (Admin only)&#10;router.get('/bookings', adminAuth, getAllBookings);&#10;&#10;// @route   PUT /api/admin/bookings/:id/status&#10;// @desc    Update booking status&#10;// @access  Private (Admin only)&#10;router.put('/bookings/:id/status', adminAuth, updateBookingStatus);&#10;&#10;// @route   GET /api/admin/users&#10;// @desc    Get all users&#10;// @access  Private (Admin only)&#10;router.get('/users', adminAuth, getAllUsers);&#10;&#10;// @route   GET /api/admin/tours&#10;// @desc    Get all tours for admin&#10;// @access  Private (Editor or Admin)&#10;router.get('/tours', editorAuth, getAllToursAdmin);&#10;&#10;// @route   GET /api/admin/reviews&#10;// @desc    Get all reviews&#10;// @access  Private (Editor or Admin)&#10;router.get('/reviews', editorAuth, getAllReviews);&#10;&#10;// @route   PUT /api/admin/reviews/:id&#10;// @desc    Update review status&#10;// @access  Private (Editor or Admin)&#10;router.put('/reviews/:id', editorAuth, updateReviewStatus);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/auth.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/auth.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth } = require('../middleware/auth');&#10;const {&#10;  register,&#10;  login,&#10;  getProfile,&#10;  updateProfile,&#10;  changePassword&#10;} = require('../controllers/authController');&#10;&#10;// @route   POST /api/auth/register&#10;// @desc    Register a new user&#10;// @access  Public&#10;router.post('/register', register);&#10;&#10;// @route   POST /api/auth/login&#10;// @desc    Login user&#10;// @access  Public&#10;router.post('/login', login);&#10;&#10;// @route   GET /api/auth/profile&#10;// @desc    Get current user profile&#10;// @access  Private&#10;router.get('/profile', auth, getProfile);&#10;&#10;// @route   PUT /api/auth/profile&#10;// @desc    Update user profile&#10;// @access  Private&#10;router.put('/profile', auth, updateProfile);&#10;&#10;// @route   PUT /api/auth/change-password&#10;// @desc    Change user password&#10;// @access  Private&#10;router.put('/change-password', auth, changePassword);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/bookings.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/bookings.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth } = require('../middleware/auth');&#10;const {&#10;  createBooking,&#10;  getUserBookings,&#10;  getBooking,&#10;  cancelBooking&#10;} = require('../controllers/bookingController');&#10;&#10;// @route   POST /api/bookings&#10;// @desc    Create new booking&#10;// @access  Private&#10;router.post('/', auth, createBooking);&#10;&#10;// @route   GET /api/bookings&#10;// @desc    Get user's bookings&#10;// @access  Private&#10;router.get('/', auth, getUserBookings);&#10;&#10;// @route   GET /api/bookings/:id&#10;// @desc    Get single booking&#10;// @access  Private&#10;router.get('/:id', auth, getBooking);&#10;&#10;// @route   PUT /api/bookings/:id/cancel&#10;// @desc    Cancel booking&#10;// @access  Private&#10;router.put('/:id/cancel', auth, cancelBooking);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/content.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/content.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth, editorAuth } = require('../middleware/auth');&#10;const Content = require('../models/Content');&#10;&#10;// Get content&#10;const getContent = async (req, res) =&gt; {&#10;  try {&#10;    const { type, page = 1, limit = 10 } = req.query;&#10;&#10;    const filter = { status: 'published' };&#10;    if (type) filter.type = type;&#10;&#10;    const content = await Content.find(filter)&#10;      .populate('author', 'name')&#10;      .sort({ createdAt: -1 })&#10;      .limit(limit * 1)&#10;      .skip((page - 1) * limit);&#10;&#10;    const total = await Content.countDocuments(filter);&#10;&#10;    res.json({&#10;      data: content,&#10;      pagination: {&#10;        currentPage: Number(page),&#10;        totalPages: Math.ceil(total / limit),&#10;        totalContent: total,&#10;        hasNext: page &lt; Math.ceil(total / limit),&#10;        hasPrev: page &gt; 1&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Get content error:', error);&#10;    res.status(500).json({ message: 'Server error fetching content' });&#10;  }&#10;};&#10;&#10;// Get content by slug&#10;const getContentBySlug = async (req, res) =&gt; {&#10;  try {&#10;    const { slug } = req.params;&#10;    &#10;    const content = await Content.findOne({ slug, status: 'published' })&#10;      .populate('author', 'name');&#10;    &#10;    if (!content) {&#10;      return res.status(404).json({ message: 'Content not found' });&#10;    }&#10;&#10;    // Increment view count&#10;    content.views += 1;&#10;    await content.save();&#10;&#10;    res.json({ content });&#10;  } catch (error) {&#10;    console.error('Get content by slug error:', error);&#10;    res.status(500).json({ message: 'Server error fetching content' });&#10;  }&#10;};&#10;&#10;// Create content&#10;const createContent = async (req, res) =&gt; {&#10;  try {&#10;    const contentData = {&#10;      ...req.body,&#10;      author: req.user.id&#10;    };&#10;&#10;    const content = new Content(contentData);&#10;    await content.save();&#10;&#10;    res.status(201).json({&#10;      message: 'Content created successfully',&#10;      content&#10;    });&#10;  } catch (error) {&#10;    console.error('Create content error:', error);&#10;    res.status(500).json({ message: 'Server error creating content' });&#10;  }&#10;};&#10;&#10;// Update content&#10;const updateContent = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    &#10;    const content = await Content.findByIdAndUpdate(&#10;      id,&#10;      { $set: req.body },&#10;      { new: true, runValidators: true }&#10;    );&#10;&#10;    if (!content) {&#10;      return res.status(404).json({ message: 'Content not found' });&#10;    }&#10;&#10;    res.json({&#10;      message: 'Content updated successfully',&#10;      content&#10;    });&#10;  } catch (error) {&#10;    console.error('Update content error:', error);&#10;    res.status(500).json({ message: 'Server error updating content' });&#10;  }&#10;};&#10;&#10;// Delete content&#10;const deleteContent = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    &#10;    const content = await Content.findByIdAndDelete(id);&#10;    &#10;    if (!content) {&#10;      return res.status(404).json({ message: 'Content not found' });&#10;    }&#10;&#10;    res.json({ message: 'Content deleted successfully' });&#10;  } catch (error) {&#10;    console.error('Delete content error:', error);&#10;    res.status(500).json({ message: 'Server error deleting content' });&#10;  }&#10;};&#10;&#10;// Routes&#10;router.get('/', getContent);&#10;router.get('/:slug', getContentBySlug);&#10;router.post('/', editorAuth, createContent);&#10;router.put('/:id', editorAuth, updateContent);&#10;router.delete('/:id', editorAuth, deleteContent);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/payments.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/payments.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth } = require('../middleware/auth');&#10;const {&#10;  createPaymentIntent,&#10;  confirmPayment,&#10;  createVNPayPayment,&#10;  handleWebhook&#10;} = require('../controllers/paymentController');&#10;&#10;// @route   POST /api/payments/create-intent&#10;// @desc    Create Stripe payment intent&#10;// @access  Private&#10;router.post('/create-intent', auth, createPaymentIntent);&#10;&#10;// @route   POST /api/payments/confirm&#10;// @desc    Confirm payment&#10;// @access  Private&#10;router.post('/confirm', auth, confirmPayment);&#10;&#10;// @route   POST /api/payments/vnpay&#10;// @desc    Create VNPay payment&#10;// @access  Private&#10;router.post('/vnpay', auth, createVNPayPayment);&#10;&#10;// @route   POST /api/payments/webhook&#10;// @desc    Handle payment webhooks&#10;// @access  Public&#10;router.post('/webhook', express.raw({type: 'application/json'}), handleWebhook);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/reviews.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth, editorAuth } = require('../middleware/auth');&#10;const Review = require('../models/Review');&#10;const Tour = require('../models/Tour');&#10;&#10;// Get reviews for a tour&#10;const getReviews = async (req, res) =&gt; {&#10;  try {&#10;    const { tourId } = req.query;&#10;    const { page = 1, limit = 10 } = req.query;&#10;&#10;    const filter = { status: 'approved' };&#10;    if (tourId) filter.tour = tourId;&#10;&#10;    const reviews = await Review.find(filter)&#10;      .populate('customer', 'name')&#10;      .populate('tour', 'title')&#10;      .sort({ createdAt: -1 })&#10;      .limit(limit * 1)&#10;      .skip((page - 1) * limit);&#10;&#10;    const total = await Review.countDocuments(filter);&#10;&#10;    res.json({&#10;      data: reviews,&#10;      pagination: {&#10;        currentPage: Number(page),&#10;        totalPages: Math.ceil(total / limit),&#10;        totalReviews: total,&#10;        hasNext: page &lt; Math.ceil(total / limit),&#10;        hasPrev: page &gt; 1&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Get reviews error:', error);&#10;    res.status(500).json({ message: 'Server error fetching reviews' });&#10;  }&#10;};&#10;&#10;// Create new review&#10;const createReview = async (req, res) =&gt; {&#10;  try {&#10;    const reviewData = {&#10;      ...req.body,&#10;      customer: req.user.id&#10;    };&#10;&#10;    const review = new Review(reviewData);&#10;    await review.save();&#10;&#10;    // Update tour rating&#10;    const tour = await Tour.findById(reviewData.tour);&#10;    if (tour) {&#10;      const reviews = await Review.find({ tour: reviewData.tour, status: 'approved' });&#10;      const avgRating = reviews.reduce((sum, r) =&gt; sum + r.rating, 0) / reviews.length;&#10;      &#10;      tour.ratings.average = avgRating;&#10;      tour.ratings.count = reviews.length;&#10;      await tour.save();&#10;    }&#10;&#10;    res.status(201).json({&#10;      message: 'Review submitted successfully',&#10;      review&#10;    });&#10;  } catch (error) {&#10;    console.error('Create review error:', error);&#10;    res.status(500).json({ message: 'Server error creating review' });&#10;  }&#10;};&#10;&#10;// @route   GET /api/reviews&#10;// @desc    Get reviews&#10;// @access  Public&#10;router.get('/', getReviews);&#10;&#10;// @route   POST /api/reviews&#10;// @desc    Create new review&#10;// @access  Private&#10;router.post('/', auth, createReview);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/tours.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/tours.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth, adminAuth } = require('../middleware/auth');&#10;const {&#10;  getTours,&#10;  getFeaturedTours,&#10;  getTourBySlug,&#10;  createTour,&#10;  updateTour,&#10;  deleteTour,&#10;  checkAvailability,&#10;  upload&#10;} = require('../controllers/tourController');&#10;&#10;// @route   GET /api/tours&#10;// @desc    Get all tours with filtering and pagination&#10;// @access  Public&#10;router.get('/', getTours);&#10;&#10;// @route   GET /api/tours/featured&#10;// @desc    Get featured tours&#10;// @access  Public&#10;router.get('/featured', getFeaturedTours);&#10;&#10;// @route   GET /api/tours/:slug&#10;// @desc    Get single tour by slug&#10;// @access  Public&#10;router.get('/:slug', getTourBySlug);&#10;&#10;// @route   GET /api/tours/:tourId/availability&#10;// @desc    Check tour availability and pricing&#10;// @access  Public&#10;router.get('/:tourId/availability', checkAvailability);&#10;&#10;// @route   POST /api/tours&#10;// @desc    Create new tour&#10;// @access  Private (Admin only)&#10;router.post('/', adminAuth, upload.array('images', 10), createTour);&#10;&#10;// @route   PUT /api/tours/:id&#10;// @desc    Update tour&#10;// @access  Private (Admin only)&#10;router.put('/:id', adminAuth, updateTour);&#10;&#10;// @route   DELETE /api/tours/:id&#10;// @desc    Delete tour&#10;// @access  Private (Admin only)&#10;router.delete('/:id', adminAuth, deleteTour);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/server.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/server.js" />
              <option name="originalContent" value="const express = require('express');&#10;const cors = require('cors');&#10;const helmet = require('helmet');&#10;const rateLimit = require('express-rate-limit');&#10;const connectDB = require('./config/database');&#10;require('dotenv').config();&#10;&#10;const app = express();&#10;&#10;// Connect to MongoDB&#10;connectDB();&#10;&#10;// Security middleware&#10;app.use(helmet());&#10;&#10;// Rate limiting&#10;const limiter = rateLimit({&#10;  windowMs: 15 * 60 * 1000, // 15 minutes&#10;  max: 100 // limit each IP to 100 requests per windowMs&#10;});&#10;app.use(limiter);&#10;&#10;// CORS&#10;const corsOptions = {&#10;  origin: function (origin, callback) {&#10;    const allowedOrigins = process.env.ALLOWED_ORIGINS&#10;      ? process.env.ALLOWED_ORIGINS.split(',')&#10;      : ['http://localhost:3000'];&#10;&#10;    // Allow requests with no origin (mobile apps, etc.)&#10;    if (!origin) return callback(null, true);&#10;&#10;    if (allowedOrigins.indexOf(origin) !== -1) {&#10;      callback(null, true);&#10;    } else {&#10;      callback(new Error('Not allowed by CORS'));&#10;    }&#10;  },&#10;  credentials: true,&#10;  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],&#10;  allowedHeaders: ['Content-Type', 'Authorization']&#10;};&#10;&#10;app.use(cors(corsOptions));&#10;&#10;// Body parsing middleware&#10;app.use(express.json({ limit: '10mb' }));&#10;app.use(express.urlencoded({ extended: true, limit: '10mb' }));&#10;&#10;// Serve static files&#10;app.use('/uploads', express.static('uploads'));&#10;&#10;// Routes&#10;app.use('/api/auth', require('./routes/auth'));&#10;app.use('/api/tours', require('./routes/tours'));&#10;app.use('/api/bookings', require('./routes/bookings'));&#10;app.use('/api/admin', require('./routes/admin'));&#10;app.use('/api/payments', require('./routes/payments'));&#10;app.use('/api/content', require('./routes/content'));&#10;app.use('/api/reviews', require('./routes/reviews'));&#10;&#10;// Error handling middleware&#10;app.use((err, req, res, next) =&gt; {&#10;  console.error(err.stack);&#10;  res.status(500).json({ message: 'Something went wrong!' });&#10;});&#10;&#10;// 404 handler&#10;app.use('*', (req, res) =&gt; {&#10;  res.status(404).json({ message: 'Route not found' });&#10;});&#10;&#10;const PORT = process.env.PORT || 5000;&#10;&#10;app.listen(PORT, () =&gt; {&#10;  console.log(`Server running on port ${PORT}`);&#10;});&#10;" />
              <option name="updatedContent" value="const express = require('express');&#13;&#10;const cors = require('cors');&#13;&#10;const helmet = require('helmet');&#13;&#10;const rateLimit = require('express-rate-limit');&#13;&#10;const { initializeDatabase } = require('./config/database');&#13;&#10;require('dotenv').config();&#13;&#10;&#13;&#10;const app = express();&#13;&#10;&#13;&#10;// Middleware to inject DB and R2 into request&#13;&#10;app.use(async (req, res, next) =&gt; {&#13;&#10;  // In production with Cloudflare Workers, these would come from the environment&#13;&#10;  // For development, you'll need to set up your D1 and R2 bindings&#13;&#10;  if (process.env.NODE_ENV === 'production') {&#13;&#10;    req.db = req.env?.DB;&#13;&#10;    req.r2 = req.env?.IMAGES;&#13;&#10;  } else {&#13;&#10;    // For local development, you might want to use a local SQLite database&#13;&#10;    // or connect to your D1 database via wrangler&#13;&#10;    console.log('Development mode: DB and R2 bindings should be set up via wrangler');&#13;&#10;  }&#13;&#10;  next();&#13;&#10;});&#13;&#10;&#13;&#10;// Initialize database tables on startup&#13;&#10;if (process.env.NODE_ENV === 'production') {&#13;&#10;  initializeDatabase(process.env).catch(console.error);&#13;&#10;}&#13;&#10;&#13;&#10;// Security middleware&#13;&#10;app.use(helmet());&#13;&#10;&#13;&#10;// Rate limiting&#13;&#10;const limiter = rateLimit({&#13;&#10;  windowMs: 15 * 60 * 1000, // 15 minutes&#13;&#10;  max: 100 // limit each IP to 100 requests per windowMs&#13;&#10;});&#13;&#10;app.use(limiter);&#13;&#10;&#13;&#10;// CORS&#13;&#10;const corsOptions = {&#13;&#10;  origin: function (origin, callback) {&#13;&#10;    const allowedOrigins = process.env.ALLOWED_ORIGINS&#13;&#10;      ? process.env.ALLOWED_ORIGINS.split(',')&#13;&#10;      : ['http://localhost:3000'];&#13;&#10;&#13;&#10;    // Allow requests with no origin (mobile apps, etc.)&#13;&#10;    if (!origin) return callback(null, true);&#13;&#10;&#13;&#10;    if (allowedOrigins.indexOf(origin) !== -1) {&#13;&#10;      callback(null, true);&#13;&#10;    } else {&#13;&#10;      callback(new Error('Not allowed by CORS'));&#13;&#10;    }&#13;&#10;  },&#13;&#10;  credentials: true,&#13;&#10;  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],&#13;&#10;  allowedHeaders: ['Content-Type', 'Authorization']&#13;&#10;};&#13;&#10;&#13;&#10;app.use(cors(corsOptions));&#13;&#10;&#13;&#10;// Body parsing middleware&#13;&#10;app.use(express.json({ limit: '10mb' }));&#13;&#10;app.use(express.urlencoded({ extended: true, limit: '10mb' }));&#13;&#10;&#13;&#10;// Routes&#13;&#10;app.use('/api/auth', require('./routes/auth'));&#13;&#10;app.use('/api/tours', require('./routes/tours'));&#13;&#10;app.use('/api/bookings', require('./routes/bookings'));&#13;&#10;app.use('/api/admin', require('./routes/admin'));&#13;&#10;app.use('/api/payments', require('./routes/payments'));&#13;&#10;app.use('/api/content', require('./routes/content'));&#13;&#10;app.use('/api/reviews', require('./routes/reviews'));&#13;&#10;&#13;&#10;// Error handling middleware&#13;&#10;app.use((err, req, res, next) =&gt; {&#13;&#10;  console.error(err.stack);&#13;&#10;  res.status(500).json({ message: 'Something went wrong!' });&#13;&#10;});&#13;&#10;&#13;&#10;// 404 handler&#13;&#10;app.use('*', (req, res) =&gt; {&#13;&#10;  res.status(404).json({ message: 'Route not found' });&#13;&#10;});&#13;&#10;&#13;&#10;const PORT = process.env.PORT || 5000;&#13;&#10;&#13;&#10;app.listen(PORT, () =&gt; {&#13;&#10;  console.log(`Server running on port ${PORT}`);&#13;&#10;});&#13;&#10;&#13;&#10;module.exports = app;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/vercel.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/vercel.json" />
              <option name="originalContent" value="{&#10;  &quot;version&quot;: 2,&#10;  &quot;name&quot;: &quot;travelling-website-backend&quot;,&#10;  &quot;builds&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;server.js&quot;,&#10;      &quot;use&quot;: &quot;@vercel/node&quot;&#10;    }&#10;  ],&#10;  &quot;routes&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;/api/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;/server.js&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;/server.js&quot;&#10;    }&#10;  ],&#10;  &quot;env&quot;: {&#10;    &quot;NODE_ENV&quot;: &quot;production&quot;,&#10;    &quot;MONGODB_URI&quot;: &quot;@mongodb_uri&quot;,&#10;    &quot;JWT_SECRET&quot;: &quot;@jwt_secret&quot;,&#10;    &quot;STRIPE_SECRET_KEY&quot;: &quot;@stripe_secret_key&quot;,&#10;    &quot;EMAIL_USER&quot;: &quot;@email_user&quot;,&#10;    &quot;EMAIL_PASS&quot;: &quot;@email_pass&quot;&#10;    &quot;MONGODB_URI&quot;: &quot;@mongodb_uri&quot;,&#10;    &quot;JWT_SECRET&quot;: &quot;@jwt_secret&quot;,&#10;&#10;    &quot;STRIPE_SECRET_KEY&quot;: &quot;@stripe_secret_key&quot;,&#10;    &quot;EMAIL_USER&quot;: &quot;@email_user&quot;,&#10;    &quot;EMAIL_PASS&quot;: &quot;@email_pass&quot;&#10;    &quot;MONGODB_URI&quot;: &quot;@mongodb_uri&quot;,&#10;    &quot;JWT_SECRET&quot;: &quot;@jwt_secret&quot;,&#10;&#10;    &quot;STRIPE_SECRET_KEY&quot;: &quot;@stripe_secret_key&quot;,&#10;    &quot;EMAIL_USER&quot;: &quot;@email_user&quot;,&#10;    &quot;EMAIL_PASS&quot;: &quot;@email_pass&quot;&#10;    &quot;MONGODB_URI&quot;: &quot;@mongodb_uri&quot;,&#10;    &quot;JWT_SECRET&quot;: &quot;@jwt_secret&quot;,&#10;    &quot;STRIPE_SECRET_KEY&quot;: &quot;@stripe_secret_key&quot;,&#10;    &quot;EMAIL_USER&quot;: &quot;@email_user&quot;,&#10;    &quot;EMAIL_PASS&quot;: &quot;@email_pass&quot;&#10;  },&#10;  &quot;functions&quot;: {&#10;&#10;    &quot;server.js&quot;: {&#10;      &quot;maxDuration&quot;: 30&#10;    }&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;version&quot;: 2,&#10;  &quot;name&quot;: &quot;travelling-website-backend&quot;,&#10;  &quot;builds&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;server.js&quot;,&#10;      &quot;use&quot;: &quot;@vercel/node&quot;&#10;    }&#10;  ],&#10;  &quot;routes&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;/api/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;/server.js&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;/server.js&quot;&#10;    }&#10;  ],&#10;  &quot;env&quot;: {&#10;    &quot;NODE_ENV&quot;: &quot;production&quot;&#10;  },&#10;  &quot;functions&quot;: {&#10;    &quot;server.js&quot;: {&#10;      &quot;maxDuration&quot;: 30&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/deployment-scripts.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/deployment-scripts.json" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;scripts&quot;: {&#10;    &quot;deploy:backend&quot;: &quot;cd backend &amp;&amp; vercel --prod&quot;,&#10;    &quot;deploy:frontend&quot;: &quot;cd frontend &amp;&amp; npm run build &amp;&amp; cd .. &amp;&amp; wrangler pages deploy frontend/build --project-name=travelling-website-frontend&quot;,&#10;    &quot;deploy:all&quot;: &quot;npm run deploy:backend &amp;&amp; npm run deploy:frontend&quot;,&#10;    &quot;build:frontend&quot;: &quot;cd frontend &amp;&amp; npm run build&quot;,&#10;    &quot;preview:backend&quot;: &quot;cd backend &amp;&amp; vercel&quot;,&#10;    &quot;preview:frontend&quot;: &quot;wrangler pages dev frontend/build&quot;,&#10;    &quot;dev:backend&quot;: &quot;cd backend &amp;&amp; nodemon server.js&quot;,&#10;    &quot;dev:frontend&quot;: &quot;cd frontend &amp;&amp; npm start&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/.env" />
              <option name="updatedContent" value="# React App Environment Variables&#10;REACT_APP_API_URL=http://localhost:5000/api&#10;REACT_APP_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here&#10;REACT_APP_GOOGLE_MAPS_API_KEY=your_google_maps_api_key_here" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/package.json" />
              <option name="originalContent" value="m{&#10;  &quot;name&quot;: &quot;frontend&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@hookform/resolvers&quot;: &quot;^5.2.1&quot;,&#10;    &quot;@stripe/react-stripe-js&quot;: &quot;^3.9.0&quot;,&#10;    &quot;@stripe/stripe-js&quot;: &quot;^7.8.0&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4.1.12&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4.1.12&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4.1.12&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4.1.12&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4.1.12&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4.1.12&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4.1.12&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4.1.12&quot;,&#10;    &quot;@tanstack/react-query&quot;: &quot;^5.85.3&quot;,&#10;    &quot;@testing-library/dom&quot;: &quot;^10.4.1&quot;,&#10;    &quot;@testing-library/jest-dom&quot;: &quot;^6.7.0&quot;,&#10;    &quot;@testing-library/react&quot;: &quot;^16.3.0&quot;,&#10;    &quot;@testing-library/user-event&quot;: &quot;^13.5.0&quot;,&#10;    &quot;@types/jest&quot;: &quot;^27.5.2&quot;,&#10;    &quot;@types/node&quot;: &quot;^16.18.126&quot;,&#10;    &quot;@types/react&quot;: &quot;^19.1.10&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^19.1.7&quot;,&#10;    &quot;@types/react-router-dom&quot;: &quot;^5.3.3&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.21&quot;,&#10;    &quot;axios&quot;: &quot;^1.11.0&quot;,&#10;    &quot;react-router-dom&quot;: &quot;^7.8.0&quot;, ]&quot;react-scripts&quot;: &quot;^5.0.1&quot;,&#10;    &quot;react-scripts&quot;: &quot;5.0.1&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^4.1.12&quot;,&#10;    &quot;typescript&quot;: &quot;^4.9.5&quot;,&#10;    &quot;web-vitals&quot;: &quot;^2.1.4&quot;,&#10;    &quot;yup&quot;: &quot;^1.7.0&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;start&quot;: &quot;react-scripts start&quot;,&#10;    &quot;build&quot;: &quot;react-scripts build&quot;,&#10;    &quot;test&quot;: &quot;react-scripts test&quot;,&#10;    &quot;eject&quot;: &quot;react-scripts eject&quot;&#10;  },&#10;  &quot;eslintConfig&quot;: {&#10;    &quot;extends&quot;: [&#10;      &quot;react-app&quot;,&#10;      &quot;react-app/jest&quot;&#10;    ]&#10;  },&#10;  &quot;browserslist&quot;: {&#10;    &quot;production&quot;: [&#10;      &quot;&gt;0.2%&quot;,&#10;      &quot;not dead&quot;,&#10;&#10;&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;frontend&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@hookform/resolvers&quot;: &quot;^5.2.1&quot;,&#10;    &quot;@stripe/react-stripe-js&quot;: &quot;^3.9.0&quot;,&#10;    &quot;@stripe/stripe-js&quot;: &quot;^7.8.0&quot;,&#10;    &quot;@tanstack/react-query&quot;: &quot;^5.85.3&quot;,&#10;    &quot;@testing-library/dom&quot;: &quot;^10.4.1&quot;,&#10;    &quot;@testing-library/jest-dom&quot;: &quot;^6.7.0&quot;,&#10;    &quot;@testing-library/react&quot;: &quot;^16.3.0&quot;,&#10;    &quot;@testing-library/user-event&quot;: &quot;^13.5.0&quot;,&#10;    &quot;@types/jest&quot;: &quot;^27.5.2&quot;,&#10;    &quot;@types/node&quot;: &quot;^16.18.126&quot;,&#10;    &quot;@types/react&quot;: &quot;^19.1.10&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^19.1.7&quot;,&#10;    &quot;@types/react-router-dom&quot;: &quot;^5.3.3&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.21&quot;,&#10;    &quot;axios&quot;: &quot;^1.11.0&quot;,&#10;    &quot;date-fns&quot;: &quot;^4.1.0&quot;,&#10;    &quot;postcss&quot;: &quot;^8.5.6&quot;,&#10;    &quot;react&quot;: &quot;^19.1.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^19.1.1&quot;,&#10;    &quot;react-hook-form&quot;: &quot;^7.62.0&quot;,&#10;    &quot;react-hot-toast&quot;: &quot;^2.5.2&quot;,&#10;    &quot;react-icons&quot;: &quot;^5.5.0&quot;,&#10;    &quot;react-router-dom&quot;: &quot;^7.8.0&quot;,&#10;    &quot;react-scripts&quot;: &quot;^5.0.1&quot;,&#10;    &quot;swiper&quot;: &quot;^11.2.10&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.4.13&quot;,&#10;    &quot;typescript&quot;: &quot;^4.9.5&quot;,&#10;    &quot;web-vitals&quot;: &quot;^2.1.4&quot;,&#10;    &quot;yup&quot;: &quot;^1.7.0&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;start&quot;: &quot;react-scripts start&quot;,&#10;    &quot;build&quot;: &quot;react-scripts build&quot;,&#10;    &quot;test&quot;: &quot;react-scripts test&quot;,&#10;    &quot;eject&quot;: &quot;react-scripts eject&quot;&#10;  },&#10;  &quot;eslintConfig&quot;: {&#10;    &quot;extends&quot;: [&#10;      &quot;react-app&quot;,&#10;      &quot;react-app/jest&quot;&#10;    ]&#10;  },&#10;  &quot;browserslist&quot;: {&#10;    &quot;production&quot;: [&#10;      &quot;&gt;0.2%&quot;,&#10;      &quot;not dead&quot;,&#10;      &quot;not op_mini all&quot;&#10;    ],&#10;    &quot;development&quot;: [&#10;      &quot;last 1 chrome version&quot;,&#10;      &quot;last 1 firefox version&quot;,&#10;      &quot;last 1 safari version&quot;&#10;    ]&#10;  },&#10;  &quot;overrides&quot;: {&#10;    &quot;nth-check&quot;: &quot;^2.1.1&quot;,&#10;    &quot;css-select&quot;: &quot;^5.1.0&quot;,&#10;    &quot;svgo&quot;: &quot;^3.0.0&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/postcss.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/postcss.config.js" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="const tailwindcss = require('@tailwindcss/postcss');&#10;const autoprefixer = require('autoprefixer');&#10;&#10;module.exports = {&#10;  plugins: {&#10;    tailwindcss: {},&#10;    autoprefixer: {},&#10;  },&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/common/ProtectedRoute.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/common/ProtectedRoute.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Navigate } from 'react-router-dom';&#10;import { useAuth } from '../../contexts/AuthContext';&#10;&#10;interface ProtectedRouteProps {&#10;  children: React.ReactNode;&#10;  requiredRole?: 'customer' | 'admin' | 'editor';&#10;}&#10;&#10;const ProtectedRoute: React.FC&lt;ProtectedRouteProps&gt; = ({ children, requiredRole }) =&gt; {&#10;  const { state } = useAuth();&#10;&#10;  if (state.isLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!state.isAuthenticated) {&#10;    return &lt;Navigate to=&quot;/login&quot; replace /&gt;;&#10;  }&#10;&#10;  if (requiredRole &amp;&amp; state.user?.role !== requiredRole) {&#10;    return &lt;Navigate to=&quot;/&quot; replace /&gt;;&#10;  }&#10;&#10;  return &lt;&gt;{children}&lt;/&gt;;&#10;};&#10;&#10;export default ProtectedRoute;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/layout/Footer.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/layout/Footer.tsx" />
              <option name="updatedContent" value="import React from 'react';&#13;&#10;import { Link } from 'react-router-dom';&#13;&#10;import { Icon, Icons } from '../common/Icons';&#13;&#10;&#13;&#10;const Footer: React.FC = () =&gt; {&#13;&#10;  return (&#13;&#10;    &lt;footer className=&quot;bg-gray-900 text-white&quot;&gt;&#13;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12&quot;&gt;&#13;&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8&quot;&gt;&#13;&#10;          {/* Company Info */}&#13;&#10;          &lt;div className=&quot;col-span-1 lg:col-span-2&quot;&gt;&#13;&#10;            &lt;div className=&quot;flex items-center mb-4&quot;&gt;&#13;&#10;              &lt;div className=&quot;w-10 h-10 bg-primary-600 rounded-lg flex items-center justify-center&quot;&gt;&#13;&#10;                &lt;span className=&quot;text-white font-bold text-xl&quot;&gt;T&lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;span className=&quot;ml-2 text-2xl font-bold&quot;&gt;TravelCo&lt;/span&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;p className=&quot;text-gray-300 mb-6 max-w-md&quot;&gt;&#13;&#10;              Your trusted travel partner for unforgettable adventures. We create personalized&#13;&#10;              experiences that connect you with the world's most beautiful destinations.&#13;&#10;            &lt;/p&gt;&#13;&#10;            &lt;div className=&quot;space-y-2 text-gray-300&quot;&gt;&#13;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                &lt;Icon icon={Icons.FiMapPin} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#13;&#10;                &lt;span&gt;123 Travel Street, Ho Chi Minh City, Vietnam&lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                &lt;Icon icon={Icons.FiPhone} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#13;&#10;                &lt;span&gt;+84-123-456-789&lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                &lt;Icon icon={Icons.FiMail} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#13;&#10;                &lt;span&gt;info@travelco.com&lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          {/* Quick Links */}&#13;&#10;          &lt;div&gt;&#13;&#10;            &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Quick Links&lt;/h3&gt;&#13;&#10;            &lt;ul className=&quot;space-y-2&quot;&gt;&#13;&#10;              &lt;li&gt;&#13;&#10;                &lt;Link to=&quot;/tours&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;                  All Tours&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/li&gt;&#13;&#10;              &lt;li&gt;&#13;&#10;                &lt;Link to=&quot;/destinations&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;                  Destinations&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/li&gt;&#13;&#10;              &lt;li&gt;&#13;&#10;                &lt;Link to=&quot;/about&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;                  About Us&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/li&gt;&#13;&#10;              &lt;li&gt;&#13;&#10;                &lt;Link to=&quot;/contact&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;                  Contact&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/li&gt;&#13;&#10;              &lt;li&gt;&#13;&#10;                &lt;Link to=&quot;/blog&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;                  Travel Blog&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/li&gt;&#13;&#10;            &lt;/ul&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          {/* Support */}&#13;&#10;          &lt;div&gt;&#13;&#10;            &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Support&lt;/h3&gt;&#13;&#10;            &lt;ul className=&quot;space-y-2&quot;&gt;&#13;&#10;              &lt;li&gt;&#13;&#10;                &lt;Link to=&quot;/help&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;                  Help Center&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/li&gt;&#13;&#10;              &lt;li&gt;&#13;&#10;                &lt;Link to=&quot;/faq&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;                  FAQ&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/li&gt;&#13;&#10;              &lt;li&gt;&#13;&#10;                &lt;Link to=&quot;/booking-policy&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;                  Booking Policy&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/li&gt;&#13;&#10;              &lt;li&gt;&#13;&#10;                &lt;Link to=&quot;/privacy&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;                  Privacy Policy&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/li&gt;&#13;&#10;              &lt;li&gt;&#13;&#10;                &lt;Link to=&quot;/terms&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;                  Terms &amp; Conditions&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/li&gt;&#13;&#10;            &lt;/ul&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Newsletter Subscription */}&#13;&#10;        &lt;div className=&quot;border-t border-gray-800 mt-8 pt-8&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-center&quot;&gt;&#13;&#10;            &lt;div className=&quot;mb-4 lg:mb-0&quot;&gt;&#13;&#10;              &lt;h3 className=&quot;text-lg font-semibold mb-2&quot;&gt;Stay Updated&lt;/h3&gt;&#13;&#10;              &lt;p className=&quot;text-gray-300&quot;&gt;Subscribe to our newsletter for travel tips and exclusive offers.&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className=&quot;flex w-full lg:w-auto&quot;&gt;&#13;&#10;              &lt;input&#13;&#10;                type=&quot;email&quot;&#13;&#10;                placeholder=&quot;Enter your email&quot;&#13;&#10;                className=&quot;flex-1 lg:w-64 px-4 py-2 rounded-l-lg bg-gray-800 border border-gray-700 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500&quot;&#13;&#10;              /&gt;&#13;&#10;              &lt;button className=&quot;px-6 py-2 bg-primary-600 hover:bg-primary-700 rounded-r-lg font-medium transition-colors&quot;&gt;&#13;&#10;                Subscribe&#13;&#10;              &lt;/button&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Social Links &amp; Copyright */}&#13;&#10;        &lt;div className=&quot;border-t border-gray-800 mt-8 pt-8 flex flex-col lg:flex-row justify-between items-center&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex space-x-4 mb-4 lg:mb-0&quot;&gt;&#13;&#10;            &lt;button type=&quot;button&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;              &lt;Icon icon={Icons.FiFacebook} className=&quot;w-5 h-5&quot; /&gt;&#13;&#10;            &lt;/button&gt;&#13;&#10;            &lt;button type=&quot;button&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;              &lt;Icon icon={Icons.FiInstagram} className=&quot;w-5 h-5&quot; /&gt;&#13;&#10;            &lt;/button&gt;&#13;&#10;            &lt;button type=&quot;button&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#13;&#10;              &lt;Icon icon={Icons.FiTwitter} className=&quot;w-5 h-5&quot; /&gt;&#13;&#10;            &lt;/button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className=&quot;text-gray-300 text-sm&quot;&gt;&#13;&#10;            &lt;p&gt;&amp;copy; 2025 TravelCo. All rights reserved.&lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/footer&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default Footer;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/contexts/AuthContext.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/contexts/AuthContext.tsx" />
              <option name="updatedContent" value="import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';&#10;import { User } from '../types';&#10;import { authAPI } from '../utils/api';&#10;&#10;interface AuthState {&#10;  user: User | null;&#10;  token: string | null;&#10;  isLoading: boolean;&#10;  isAuthenticated: boolean;&#10;}&#10;&#10;interface AuthAction {&#10;  type: 'LOGIN_START' | 'LOGIN_SUCCESS' | 'LOGIN_FAILURE' | 'LOGOUT' | 'UPDATE_PROFILE' | 'SET_LOADING';&#10;  payload?: any;&#10;}&#10;&#10;const initialState: AuthState = {&#10;  user: null,&#10;  token: localStorage.getItem('token'),&#10;  isLoading: true,&#10;  isAuthenticated: false,&#10;};&#10;&#10;const AuthContext = createContext&lt;{&#10;  state: AuthState;&#10;  login: (email: string, password: string) =&gt; Promise&lt;void&gt;;&#10;  register: (data: any) =&gt; Promise&lt;void&gt;;&#10;  logout: () =&gt; void;&#10;  updateProfile: (data: Partial&lt;User&gt;) =&gt; Promise&lt;void&gt;;&#10;}&gt;({&#10;  state: initialState,&#10;  login: async () =&gt; {},&#10;  register: async () =&gt; {},&#10;  logout: () =&gt; {},&#10;  updateProfile: async () =&gt; {},&#10;});&#10;&#10;const authReducer = (state: AuthState, action: AuthAction): AuthState =&gt; {&#10;  switch (action.type) {&#10;    case 'LOGIN_START':&#10;      return {&#10;        ...state,&#10;        isLoading: true,&#10;      };&#10;    case 'LOGIN_SUCCESS':&#10;      return {&#10;        ...state,&#10;        user: action.payload.user,&#10;        token: action.payload.token,&#10;        isLoading: false,&#10;        isAuthenticated: true,&#10;      };&#10;    case 'LOGIN_FAILURE':&#10;      return {&#10;        ...state,&#10;        user: null,&#10;        token: null,&#10;        isLoading: false,&#10;        isAuthenticated: false,&#10;      };&#10;    case 'LOGOUT':&#10;      return {&#10;        ...state,&#10;        user: null,&#10;        token: null,&#10;        isAuthenticated: false,&#10;      };&#10;    case 'UPDATE_PROFILE':&#10;      return {&#10;        ...state,&#10;        user: action.payload,&#10;      };&#10;    case 'SET_LOADING':&#10;      return {&#10;        ...state,&#10;        isLoading: action.payload,&#10;      };&#10;    default:&#10;      return state;&#10;  }&#10;};&#10;&#10;export const AuthProvider: React.FC&lt;{ children: ReactNode }&gt; = ({ children }) =&gt; {&#10;  const [state, dispatch] = useReducer(authReducer, initialState);&#10;&#10;  useEffect(() =&gt; {&#10;    const token = localStorage.getItem('token');&#10;    if (token) {&#10;      fetchUserProfile();&#10;    } else {&#10;      dispatch({ type: 'SET_LOADING', payload: false });&#10;    }&#10;  }, []);&#10;&#10;  const fetchUserProfile = async () =&gt; {&#10;    try {&#10;      const response = await authAPI.getProfile();&#10;      dispatch({&#10;        type: 'LOGIN_SUCCESS',&#10;        payload: {&#10;          user: response.data.user,&#10;          token: localStorage.getItem('token'),&#10;        },&#10;      });&#10;    } catch (error) {&#10;      localStorage.removeItem('token');&#10;      localStorage.removeItem('user');&#10;      dispatch({ type: 'LOGIN_FAILURE' });&#10;    }&#10;  };&#10;&#10;  const login = async (email: string, password: string) =&gt; {&#10;    try {&#10;      dispatch({ type: 'LOGIN_START' });&#10;      const response = await authAPI.login({ email, password });&#10;      &#10;      localStorage.setItem('token', response.data.token);&#10;      localStorage.setItem('user', JSON.stringify(response.data.user));&#10;      &#10;      dispatch({&#10;        type: 'LOGIN_SUCCESS',&#10;        payload: response.data,&#10;      });&#10;    } catch (error: any) {&#10;      dispatch({ type: 'LOGIN_FAILURE' });&#10;      throw new Error(error.response?.data?.message || 'Login failed');&#10;    }&#10;  };&#10;&#10;  const register = async (data: any) =&gt; {&#10;    try {&#10;      dispatch({ type: 'LOGIN_START' });&#10;      const response = await authAPI.register(data);&#10;      &#10;      localStorage.setItem('token', response.data.token);&#10;      localStorage.setItem('user', JSON.stringify(response.data.user));&#10;      &#10;      dispatch({&#10;        type: 'LOGIN_SUCCESS',&#10;        payload: response.data,&#10;      });&#10;    } catch (error: any) {&#10;      dispatch({ type: 'LOGIN_FAILURE' });&#10;      throw new Error(error.response?.data?.message || 'Registration failed');&#10;    }&#10;  };&#10;&#10;  const logout = () =&gt; {&#10;    localStorage.removeItem('token');&#10;    localStorage.removeItem('user');&#10;    dispatch({ type: 'LOGOUT' });&#10;  };&#10;&#10;  const updateProfile = async (data: Partial&lt;User&gt;) =&gt; {&#10;    try {&#10;      const response = await authAPI.updateProfile(data);&#10;      dispatch({&#10;        type: 'UPDATE_PROFILE',&#10;        payload: response.data.user,&#10;      });&#10;      localStorage.setItem('user', JSON.stringify(response.data.user));&#10;    } catch (error: any) {&#10;      throw new Error(error.response?.data?.message || 'Profile update failed');&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;AuthContext.Provider&#10;      value={{&#10;        state,&#10;        login,&#10;        register,&#10;        logout,&#10;        updateProfile,&#10;      }}&#10;    &gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;};&#10;&#10;export const useAuth = () =&gt; {&#10;  const context = useContext(AuthContext);&#10;  if (!context) {&#10;    throw new Error('useAuth must be used within an AuthProvider');&#10;  }&#10;  return context;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/contexts/ThemeContext.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/contexts/ThemeContext.tsx" />
              <option name="updatedContent" value="import React, { createContext, useContext, useEffect, useState } from 'react';&#10;&#10;interface ThemeContextType {&#10;  isDarkMode: boolean;&#10;  toggleTheme: () =&gt; void;&#10;}&#10;&#10;const ThemeContext = createContext&lt;ThemeContextType | undefined&gt;(undefined);&#10;&#10;export const useTheme = () =&gt; {&#10;  const context = useContext(ThemeContext);&#10;  if (context === undefined) {&#10;    throw new Error('useTheme must be used within a ThemeProvider');&#10;  }&#10;  return context;&#10;};&#10;&#10;export const ThemeProvider: React.FC&lt;{ children: React.ReactNode }&gt; = ({ children }) =&gt; {&#10;  const [isDarkMode, setIsDarkMode] = useState(() =&gt; {&#10;    // Check localStorage or system preference&#10;    const saved = localStorage.getItem('darkMode');&#10;    if (saved !== null) {&#10;      return JSON.parse(saved);&#10;    }&#10;    return window.matchMedia('(prefers-color-scheme: dark)').matches;&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));&#10;    if (isDarkMode) {&#10;      document.documentElement.classList.add('dark');&#10;    } else {&#10;      document.documentElement.classList.remove('dark');&#10;    }&#10;  }, [isDarkMode]);&#10;&#10;  const toggleTheme = () =&gt; {&#10;    setIsDarkMode(!isDarkMode);&#10;  };&#10;&#10;  return (&#10;    &lt;ThemeContext.Provider value={{ isDarkMode, toggleTheme }}&gt;&#10;      {children}&#10;    &lt;/ThemeContext.Provider&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Booking.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Booking.tsx" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { useParams, useNavigate } from 'react-router-dom';&#10;import { useQuery, useMutation } from '@tanstack/react-query';&#10;import { useForm, useFieldArray } from 'react-hook-form';&#10;import { yupResolver } from '@hookform/resolvers/yup';&#10;import * as yup from 'yup';&#10;import { toursAPI, bookingsAPI } from '../utils/api';&#10;import { BookingForm } from '../types';&#10;import { Icon, Icons } from '../components/common/Icons';&#10;import toast from 'react-hot-toast';&#10;&#10;const schema = yup.object({&#10;  startDate: yup.string().required('Start date is required'),&#10;  numberOfTravelers: yup.object({&#10;    adults: yup.number().min(1, 'At least 1 adult required').required(),&#10;    children: yup.number().min(0).required(),&#10;    infants: yup.number().min(0).required(),&#10;  }),&#10;  travelers: yup.array().of(&#10;    yup.object({&#10;      name: yup.string().required('Name is required'),&#10;      age: yup.number().positive('Age must be positive').optional(),&#10;      type: yup.string().oneOf(['adult', 'child', 'infant']).required(),&#10;    })&#10;  ).required('Travelers information is required'),&#10;  specialRequests: yup.string().notRequired(),&#10;  emergencyContact: yup.object({&#10;    name: yup.string().required('Emergency contact name is required'),&#10;    phone: yup.string().required('Emergency contact phone is required'),&#10;    relationship: yup.string().required('Relationship is required'),&#10;  }).notRequired(),&#10;});&#10;&#10;const Booking: React.FC = () =&gt; {&#10;  const { tourId } = useParams&lt;{ tourId: string }&gt;();&#10;  const navigate = useNavigate();&#10;  const [currentStep, setCurrentStep] = useState(1);&#10;  const [pricing, setPricing] = useState&lt;any&gt;(null);&#10;&#10;  const { data: tourData, isLoading: tourLoading } = useQuery({&#10;    queryKey: ['tour-booking', tourId],&#10;    queryFn: () =&gt; toursAPI.getTourBySlug(tourId!),&#10;    enabled: !!tourId,&#10;  });&#10;&#10;  const createBookingMutation = useMutation({&#10;    mutationFn: bookingsAPI.createBooking,&#10;    onSuccess: (data) =&gt; {&#10;      toast.success('Booking created successfully!');&#10;      navigate('/my-bookings');&#10;    },&#10;    onError: (error: any) =&gt; {&#10;      toast.error(error.response?.data?.message || 'Booking failed');&#10;    },&#10;  });&#10;&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    watch,&#10;    control,&#10;    formState: { errors, isSubmitting },&#10;  } = useForm&lt;BookingForm&gt;({&#10;    resolver: yupResolver(schema) as any,&#10;    defaultValues: {&#10;      numberOfTravelers: { adults: 1, children: 0, infants: 0 },&#10;      travelers: [{ name: '', type: 'adult', age: undefined }],&#10;    },&#10;  });&#10;&#10;  const { fields, append, remove } = useFieldArray({&#10;    control,&#10;    name: 'travelers',&#10;  });&#10;&#10;  const watchedValues = watch();&#10;  const tour = tourData?.data.tour;&#10;&#10;  // Update travelers array when number of travelers changes&#10;  useEffect(() =&gt; {&#10;    const { adults, children, infants } = watchedValues.numberOfTravelers;&#10;    const totalTravelers = adults + children + infants;&#10;    const currentTravelers = fields.length;&#10;&#10;    if (totalTravelers &gt; currentTravelers) {&#10;      // Add travelers&#10;      for (let i = currentTravelers; i &lt; totalTravelers; i++) {&#10;        if (i &lt; adults) {&#10;          append({ name: '', type: 'adult', age: undefined });&#10;        } else if (i &lt; adults + children) {&#10;          append({ name: '', type: 'child', age: undefined });&#10;        } else {&#10;          append({ name: '', type: 'infant', age: undefined });&#10;        }&#10;      }&#10;    } else if (totalTravelers &lt; currentTravelers) {&#10;      // Remove travelers&#10;      for (let i = currentTravelers - 1; i &gt;= totalTravelers; i--) {&#10;        remove(i);&#10;      }&#10;    }&#10;  }, [watchedValues.numberOfTravelers, fields.length, append, remove]);&#10;&#10;  // Calculate pricing when form changes&#10;  useEffect(() =&gt; {&#10;    if (tour &amp;&amp; watchedValues.startDate &amp;&amp; watchedValues.numberOfTravelers) {&#10;      const totalTravelers = watchedValues.numberOfTravelers.adults +&#10;                           watchedValues.numberOfTravelers.children +&#10;                           watchedValues.numberOfTravelers.infants;&#10;&#10;      // Simulate pricing calculation&#10;      const basePrice = tour.pricing.basePrice;&#10;      const subtotal = basePrice * totalTravelers;&#10;      const taxes = subtotal * 0.1;&#10;      const total = subtotal + taxes;&#10;&#10;      setPricing({&#10;        basePrice,&#10;        subtotal,&#10;        taxes,&#10;        total,&#10;        totalTravelers,&#10;      });&#10;    }&#10;  }, [tour, watchedValues.startDate, watchedValues.numberOfTravelers]);&#10;&#10;  const onSubmit = (data: BookingForm) =&gt; {&#10;    if (!tour) return;&#10;&#10;    const bookingData = {&#10;      ...data,&#10;      tourId: tour._id,&#10;    };&#10;&#10;    createBookingMutation.mutate(bookingData);&#10;  };&#10;&#10;  const nextStep = () =&gt; {&#10;    if (currentStep &lt; 3) setCurrentStep(currentStep + 1);&#10;  };&#10;&#10;  const prevStep = () =&gt; {&#10;    if (currentStep &gt; 1) setCurrentStep(currentStep - 1);&#10;  };&#10;&#10;  if (tourLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!tour) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900 mb-4&quot;&gt;Tour Not Found&lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;The tour you're trying to book doesn't exist.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        {/* Progress Steps */}&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-center&quot;&gt;&#10;            {[1, 2, 3].map((step) =&gt; (&#10;              &lt;div key={step} className=&quot;flex items-center&quot;&gt;&#10;                &lt;div&#10;                  className={`w-10 h-10 rounded-full flex items-center justify-center font-medium ${&#10;                    step &lt;= currentStep&#10;                      ? 'bg-primary-600 text-white'&#10;                      : 'bg-gray-300 text-gray-500'&#10;                  }`}&#10;                &gt;&#10;                  {step}&#10;                &lt;/div&gt;&#10;                {step &lt; 3 &amp;&amp; (&#10;                  &lt;div&#10;                    className={`w-16 h-1 mx-2 ${&#10;                      step &lt; currentStep ? 'bg-primary-600' : 'bg-gray-300'&#10;                    }`}&#10;                  /&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex justify-center mt-4&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                Step {currentStep} of 3: {&#10;                  currentStep === 1 ? 'Tour Configuration' :&#10;                  currentStep === 2 ? 'Traveler Information' :&#10;                  'Payment &amp; Confirmation'&#10;                }&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;          {/* Main Form */}&#10;          &lt;div className=&quot;lg:col-span-2&quot;&gt;&#10;            &lt;form onSubmit={handleSubmit(onSubmit as any)}&gt;&#10;              {/* Step 1: Tour Configuration */}&#10;              {currentStep === 1 &amp;&amp; (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                  &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-6&quot;&gt;Tour Configuration&lt;/h2&gt;&#10;&#10;                  {/* Start Date */}&#10;                  &lt;div className=&quot;mb-6&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Start Date&#10;                    &lt;/label&gt;&#10;                    &lt;div className=&quot;relative&quot;&gt;&#10;                      &lt;Icon icon={Icons.FiCalendar} className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5&quot; /&gt;&#10;                      &lt;input&#10;                        {...register('startDate')}&#10;                        type=&quot;date&quot;&#10;                        className={`input-field pl-10 ${errors.startDate ? 'border-red-500' : ''}`}&#10;                        min={new Date().toISOString().split('T')[0]}&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;                    {errors.startDate &amp;&amp; (&#10;                      &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.startDate.message}&lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Number of Travelers */}&#10;                  &lt;div className=&quot;mb-6&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-4&quot;&gt;&#10;                      Number of Travelers&#10;                    &lt;/label&gt;&#10;                    &lt;div className=&quot;grid grid-cols-3 gap-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm text-gray-600 mb-1&quot;&gt;Adults (18+)&lt;/label&gt;&#10;                        &lt;input&#10;                          {...register('numberOfTravelers.adults')}&#10;                          type=&quot;number&quot;&#10;                          min=&quot;1&quot;&#10;                          className=&quot;input-field&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm text-gray-600 mb-1&quot;&gt;Children (2-17)&lt;/label&gt;&#10;                        &lt;input&#10;                          {...register('numberOfTravelers.children')}&#10;                          type=&quot;number&quot;&#10;                          min=&quot;0&quot;&#10;                          className=&quot;input-field&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm text-gray-600 mb-1&quot;&gt;Infants (0-2)&lt;/label&gt;&#10;                        &lt;input&#10;                          {...register('numberOfTravelers.infants')}&#10;                          type=&quot;number&quot;&#10;                          min=&quot;0&quot;&#10;                          className=&quot;input-field&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    {errors.numberOfTravelers?.adults &amp;&amp; (&#10;                      &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.numberOfTravelers.adults.message}&lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-end&quot;&gt;&#10;                    &lt;button&#10;                      type=&quot;button&quot;&#10;                      onClick={nextStep}&#10;                      className=&quot;btn-primary&quot;&#10;                      disabled={!watchedValues.startDate || !pricing}&#10;                    &gt;&#10;                      Next: Traveler Information&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {/* Step 2: Traveler Information */}&#10;              {currentStep === 2 &amp;&amp; (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                  &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-6&quot;&gt;Traveler Information&lt;/h2&gt;&#10;&#10;                  {/* Travelers */}&#10;                  &lt;div className=&quot;space-y-6 mb-8&quot;&gt;&#10;                    {fields.map((field, index) =&gt; (&#10;                      &lt;div key={field.id} className=&quot;border border-gray-200 rounded-lg p-4&quot;&gt;&#10;                        &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;&#10;                          Traveler {index + 1} ({field.type})&#10;                        &lt;/h3&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                          &lt;div&gt;&#10;                            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                              Full Name&#10;                            &lt;/label&gt;&#10;                            &lt;input&#10;                              {...register(`travelers.${index}.name`)}&#10;                              type=&quot;text&quot;&#10;                              className=&quot;input-field&quot;&#10;                              placeholder=&quot;Enter full name&quot;&#10;                            /&gt;&#10;                            {errors.travelers?.[index]?.name &amp;&amp; (&#10;                              &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;&#10;                                {errors.travelers[index]?.name?.message}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                          &lt;div&gt;&#10;                            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                              Age&#10;                            &lt;/label&gt;&#10;                            &lt;input&#10;                              {...register(`travelers.${index}.age`)}&#10;                              type=&quot;number&quot;&#10;                              className=&quot;input-field&quot;&#10;                              placeholder=&quot;Age&quot;&#10;                            /&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Emergency Contact */}&#10;                  &lt;div className=&quot;border-t pt-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;Emergency Contact&lt;/h3&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                          Name&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          {...register('emergencyContact.name')}&#10;                          type=&quot;text&quot;&#10;                          className=&quot;input-field&quot;&#10;                          placeholder=&quot;Contact name&quot;&#10;                        /&gt;&#10;                        {errors.emergencyContact?.name &amp;&amp; (&#10;                          &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;&#10;                            {errors.emergencyContact.name.message}&#10;                          &lt;/p&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                          Phone&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          {...register('emergencyContact.phone')}&#10;                          type=&quot;tel&quot;&#10;                          className=&quot;input-field&quot;&#10;                          placeholder=&quot;Phone number&quot;&#10;                        /&gt;&#10;                        {errors.emergencyContact?.phone &amp;&amp; (&#10;                          &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;&#10;                            {errors.emergencyContact.phone.message}&#10;                          &lt;/p&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                          Relationship&#10;                        &lt;/label&gt;&#10;                        &lt;select&#10;                          {...register('emergencyContact.relationship')}&#10;                          className=&quot;input-field&quot;&#10;                        &gt;&#10;                          &lt;option value=&quot;&quot;&gt;Select relationship&lt;/option&gt;&#10;                          &lt;option value=&quot;spouse&quot;&gt;Spouse&lt;/option&gt;&#10;                          &lt;option value=&quot;parent&quot;&gt;Parent&lt;/option&gt;&#10;                          &lt;option value=&quot;child&quot;&gt;Child&lt;/option&gt;&#10;                          &lt;option value=&quot;sibling&quot;&gt;Sibling&lt;/option&gt;&#10;                          &lt;option value=&quot;friend&quot;&gt;Friend&lt;/option&gt;&#10;                          &lt;option value=&quot;other&quot;&gt;Other&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                        {errors.emergencyContact?.relationship &amp;&amp; (&#10;                          &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;&#10;                            {errors.emergencyContact.relationship.message}&#10;                          &lt;/p&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Special Requests */}&#10;                  &lt;div className=&quot;mt-6&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Special Requests (Optional)&#10;                    &lt;/label&gt;&#10;                    &lt;textarea&#10;                      {...register('specialRequests')}&#10;                      rows={3}&#10;                      className=&quot;input-field&quot;&#10;                      placeholder=&quot;Any dietary requirements, accessibility needs, or special requests...&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-between mt-6&quot;&gt;&#10;                    &lt;button&#10;                      type=&quot;button&quot;&#10;                      onClick={prevStep}&#10;                      className=&quot;btn-secondary&quot;&#10;                    &gt;&#10;                      Back&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      type=&quot;button&quot;&#10;                      onClick={nextStep}&#10;                      className=&quot;btn-primary&quot;&#10;                    &gt;&#10;                      Next: Payment&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {/* Step 3: Payment */}&#10;              {currentStep === 3 &amp;&amp; (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                  &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-6&quot;&gt;Payment &amp; Confirmation&lt;/h2&gt;&#10;&#10;                  &lt;div className=&quot;mb-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;Payment Options&lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;label className=&quot;flex items-center p-4 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50&quot;&gt;&#10;                        &lt;input type=&quot;radio&quot; name=&quot;paymentMethod&quot; value=&quot;credit_card&quot; className=&quot;mr-3&quot; defaultChecked /&gt;&#10;                        &lt;Icon icon={Icons.FiCreditCard} className=&quot;w-5 h-5 mr-2&quot; /&gt;&#10;                        &lt;span&gt;Credit Card (Stripe)&lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                      &lt;label className=&quot;flex items-center p-4 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50&quot;&gt;&#10;                        &lt;input type=&quot;radio&quot; name=&quot;paymentMethod&quot; value=&quot;vnpay&quot; className=&quot;mr-3&quot; /&gt;&#10;                        &lt;span&gt;VNPay (Vietnamese QR Code)&lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                      &lt;label className=&quot;flex items-center p-4 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50&quot;&gt;&#10;                        &lt;input type=&quot;radio&quot; name=&quot;paymentMethod&quot; value=&quot;bank_transfer&quot; className=&quot;mr-3&quot; /&gt;&#10;                        &lt;span&gt;Bank Transfer&lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                    &lt;button&#10;                      type=&quot;button&quot;&#10;                      onClick={prevStep}&#10;                      className=&quot;btn-secondary&quot;&#10;                    &gt;&#10;                      Back&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      type=&quot;submit&quot;&#10;                      disabled={isSubmitting}&#10;                      className=&quot;btn-primary disabled:opacity-50&quot;&#10;                    &gt;&#10;                      {isSubmitting ? 'Creating Booking...' : 'Confirm Booking'}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Booking Summary */}&#10;          &lt;div className=&quot;lg:col-span-1&quot;&gt;&#10;            &lt;div className=&quot;sticky top-4&quot;&gt;&#10;              &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-bold text-gray-900 mb-4&quot;&gt;Booking Summary&lt;/h3&gt;&#10;&#10;                {tour &amp;&amp; (&#10;                  &lt;&gt;&#10;                    &lt;div className=&quot;mb-4&quot;&gt;&#10;                      &lt;img&#10;                        src={tour.images[0]?.url || `https://images.unsplash.com/photo-1469474968028-56623f02e42e?ixlib=rb-4.0.3&amp;auto=format&amp;fit=crop&amp;w=400&amp;q=80`}&#10;                        alt={tour.title}&#10;                        className=&quot;w-full h-32 object-cover rounded-lg&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;h4 className=&quot;font-semibold text-gray-900 mb-2&quot;&gt;{tour.title}&lt;/h4&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600 mb-4&quot;&gt;{tour.destination}&lt;/p&gt;&#10;&#10;                    {watchedValues.startDate &amp;&amp; (&#10;                      &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                          &lt;span&gt;Start Date:&lt;/span&gt;&#10;                          &lt;span&gt;{new Date(watchedValues.startDate).toLocaleDateString()}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                          &lt;span&gt;Duration:&lt;/span&gt;&#10;                          &lt;span&gt;{tour.duration.days}D/{tour.duration.nights}N&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/&gt;&#10;                )}&#10;&#10;                {pricing &amp;&amp; (&#10;                  &lt;div className=&quot;border-t pt-4 mt-4&quot;&gt;&#10;                    &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                        &lt;span&gt;Base Price x {pricing.totalTravelers}:&lt;/span&gt;&#10;                        &lt;span&gt;${pricing.subtotal}&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                        &lt;span&gt;Taxes &amp; Fees:&lt;/span&gt;&#10;                        &lt;span&gt;${pricing.taxes.toFixed(2)}&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t pt-2 font-bold&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                          &lt;span&gt;Total:&lt;/span&gt;&#10;                          &lt;span&gt;${pricing.total.toFixed(2)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Booking;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Profile.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Profile.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { useQuery, useMutation } from '@tanstack/react-query';&#10;import { useForm } from 'react-hook-form';&#10;import { yupResolver } from '@hookform/resolvers/yup';&#10;import * as yup from 'yup';&#10;import { useAuth } from '../contexts/AuthContext';&#10;import { authAPI } from '../utils/api';&#10;import { Icon, Icons } from '../components/common/Icons';&#10;import toast from 'react-hot-toast';&#10;&#10;const profileSchema = yup.object({&#10;  name: yup.string().min(2, 'Name must be at least 2 characters').required('Name is required'),&#10;  email: yup.string().email('Invalid email').required('Email is required'),&#10;  phone: yup.string().optional(),&#10;  country: yup.string().optional(),&#10;});&#10;&#10;const passwordSchema = yup.object({&#10;  currentPassword: yup.string().required('Current password is required'),&#10;  newPassword: yup.string().min(6, 'Password must be at least 6 characters').required('New password is required'),&#10;  confirmPassword: yup.string()&#10;    .oneOf([yup.ref('newPassword')], 'Passwords must match')&#10;    .required('Please confirm your password'),&#10;});&#10;&#10;interface ProfileFormData {&#10;  name: string;&#10;  email: string;&#10;  phone?: string;&#10;  country?: string;&#10;}&#10;&#10;interface PasswordFormData {&#10;  currentPassword: string;&#10;  newPassword: string;&#10;  confirmPassword: string;&#10;}&#10;&#10;const Profile: React.FC = () =&gt; {&#10;  const { state, updateProfile } = useAuth();&#10;  const [activeTab, setActiveTab] = useState('profile');&#10;  const [isEditing, setIsEditing] = useState(false);&#10;&#10;  const { data: profileData, refetch } = useQuery({&#10;    queryKey: ['profile'],&#10;    queryFn: authAPI.getProfile,&#10;    enabled: !!state.user,&#10;  });&#10;&#10;  const updateProfileMutation = useMutation({&#10;    mutationFn: authAPI.updateProfile,&#10;    onSuccess: (data) =&gt; {&#10;      updateProfile(data.data.user);&#10;      setIsEditing(false);&#10;      toast.success('Profile updated successfully!');&#10;      refetch();&#10;    },&#10;    onError: (error: any) =&gt; {&#10;      toast.error(error.response?.data?.message || 'Failed to update profile');&#10;    },&#10;  });&#10;&#10;  const changePasswordMutation = useMutation({&#10;    mutationFn: authAPI.changePassword,&#10;    onSuccess: () =&gt; {&#10;      toast.success('Password changed successfully!');&#10;      resetPassword();&#10;    },&#10;    onError: (error: any) =&gt; {&#10;      toast.error(error.response?.data?.message || 'Failed to change password');&#10;    },&#10;  });&#10;&#10;  const {&#10;    register: registerProfile,&#10;    handleSubmit: handleProfileSubmit,&#10;    formState: { errors: profileErrors, isSubmitting: isUpdatingProfile },&#10;    reset: resetProfile,&#10;  } = useForm&lt;ProfileFormData&gt;({&#10;    resolver: yupResolver(profileSchema) as any,&#10;    defaultValues: {&#10;      name: profileData?.data.user.name || '',&#10;      email: profileData?.data.user.email || '',&#10;      phone: profileData?.data.user.phone || '',&#10;      country: profileData?.data.user.country || '',&#10;    },&#10;  });&#10;&#10;  const {&#10;    register: registerPassword,&#10;    handleSubmit: handlePasswordSubmit,&#10;    formState: { errors: passwordErrors, isSubmitting: isChangingPassword },&#10;    reset: resetPassword,&#10;  } = useForm&lt;PasswordFormData&gt;({&#10;    resolver: yupResolver(passwordSchema),&#10;  });&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (profileData?.data.user) {&#10;      resetProfile({&#10;        name: profileData.data.user.name,&#10;        email: profileData.data.user.email,&#10;        phone: profileData.data.user.phone || '',&#10;        country: profileData.data.user.country || '',&#10;      });&#10;    }&#10;  }, [profileData, resetProfile]);&#10;&#10;  const onProfileSubmit = (data: ProfileFormData) =&gt; {&#10;    updateProfileMutation.mutate(data);&#10;  };&#10;&#10;  const onPasswordSubmit = (data: PasswordFormData) =&gt; {&#10;    changePasswordMutation.mutate({&#10;      currentPassword: data.currentPassword,&#10;      newPassword: data.newPassword,&#10;    });&#10;  };&#10;&#10;  const user = profileData?.data.user;&#10;&#10;  if (!user) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const tabs = [&#10;    { id: 'profile', name: 'Profile Information', icon: Icons.FiUser },&#10;    { id: 'security', name: 'Security', icon: Icons.FiLock },&#10;    { id: 'preferences', name: 'Preferences', icon: Icons.FiSettings },&#10;  ];&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 mb-8&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;w-20 h-20 bg-primary-100 rounded-full flex items-center justify-center mr-6&quot;&gt;&#10;              {user.avatar ? (&#10;                &lt;img&#10;                  src={user.avatar}&#10;                  alt={user.name}&#10;                  className=&quot;w-20 h-20 rounded-full object-cover&quot;&#10;                /&gt;&#10;              ) : (&#10;                &lt;Icon icon={Icons.FiUser} className=&quot;w-10 h-10 text-primary-600&quot; /&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;{user.name}&lt;/h1&gt;&#10;              &lt;p className=&quot;text-gray-600&quot;&gt;{user.email}&lt;/p&gt;&#10;              &lt;div className=&quot;flex items-center mt-2&quot;&gt;&#10;                &lt;span className={`px-3 py-1 rounded-full text-xs font-medium ${&#10;                  user.role === 'admin' ? 'bg-red-100 text-red-800' :&#10;                  user.role === 'editor' ? 'bg-blue-100 text-blue-800' :&#10;                  'bg-green-100 text-green-800'&#10;                }`}&gt;&#10;                  {user.role.charAt(0).toUpperCase() + user.role.slice(1)}&#10;                &lt;/span&gt;&#10;                {user.isVerified &amp;&amp; (&#10;                  &lt;span className=&quot;ml-2 px-3 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium&quot;&gt;&#10;                    Verified&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-4 gap-8&quot;&gt;&#10;          {/* Sidebar */}&#10;          &lt;div className=&quot;lg:col-span-1&quot;&gt;&#10;            &lt;div className=&quot;bg-white rounded-lg shadow-lg&quot;&gt;&#10;              &lt;nav className=&quot;space-y-1 p-2&quot;&gt;&#10;                {tabs.map((tab) =&gt; (&#10;                  &lt;button&#10;                    key={tab.id}&#10;                    onClick={() =&gt; setActiveTab(tab.id)}&#10;                    className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-colors ${&#10;                      activeTab === tab.id&#10;                        ? 'bg-primary-100 text-primary-700'&#10;                        : 'text-gray-600 hover:bg-gray-50'&#10;                    }`}&#10;                  &gt;&#10;                    &lt;Icon icon={tab.icon} className=&quot;w-5 h-5 mr-3&quot; /&gt;&#10;                    {tab.name}&#10;                  &lt;/button&gt;&#10;                ))}&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Main Content */}&#10;          &lt;div className=&quot;lg:col-span-3&quot;&gt;&#10;            {/* Profile Information Tab */}&#10;            {activeTab === 'profile' &amp;&amp; (&#10;              &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                  &lt;h2 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;Profile Information&lt;/h2&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setIsEditing(!isEditing)}&#10;                    className=&quot;btn-secondary flex items-center&quot;&#10;                  &gt;&#10;                    &lt;Icon icon={Icons.FiEdit3} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                    {isEditing ? 'Cancel' : 'Edit'}&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;form onSubmit={handleProfileSubmit(onProfileSubmit)}&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Full Name&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;Icon icon={Icons.FiUser} className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5&quot; /&gt;&#10;                        &lt;input&#10;                          {...registerProfile('name')}&#10;                          type=&quot;text&quot;&#10;                          disabled={!isEditing}&#10;                          className={`input-field pl-10 ${!isEditing ? 'bg-gray-50 cursor-not-allowed' : ''} ${&#10;                            profileErrors.name ? 'border-red-500' : ''&#10;                          }`}&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      {profileErrors.name &amp;&amp; (&#10;                        &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{profileErrors.name.message}&lt;/p&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Email Address&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;Icon icon={Icons.FiMail} className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5&quot; /&gt;&#10;                        &lt;input&#10;                          {...registerProfile('email')}&#10;                          type=&quot;email&quot;&#10;                          disabled={!isEditing}&#10;                          className={`input-field pl-10 ${!isEditing ? 'bg-gray-50 cursor-not-allowed' : ''} ${&#10;                            profileErrors.email ? 'border-red-500' : ''&#10;                          }`}&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      {profileErrors.email &amp;&amp; (&#10;                        &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{profileErrors.email.message}&lt;/p&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Phone Number&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;Icon icon={Icons.FiPhone} className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5&quot; /&gt;&#10;                        &lt;input&#10;                          {...registerProfile('phone')}&#10;                          type=&quot;tel&quot;&#10;                          disabled={!isEditing}&#10;                          className={`input-field pl-10 ${!isEditing ? 'bg-gray-50 cursor-not-allowed' : ''}`}&#10;                          placeholder=&quot;Enter phone number&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Country&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;Icon icon={Icons.FiMapPin} className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5&quot; /&gt;&#10;                        &lt;select&#10;                          {...registerProfile('country')}&#10;                          disabled={!isEditing}&#10;                          className={`input-field pl-10 ${!isEditing ? 'bg-gray-50 cursor-not-allowed' : ''}`}&#10;                        &gt;&#10;                          &lt;option value=&quot;&quot;&gt;Select country&lt;/option&gt;&#10;                          &lt;option value=&quot;Vietnam&quot;&gt;Vietnam&lt;/option&gt;&#10;                          &lt;option value=&quot;United States&quot;&gt;United States&lt;/option&gt;&#10;                          &lt;option value=&quot;Canada&quot;&gt;Canada&lt;/option&gt;&#10;                          &lt;option value=&quot;Australia&quot;&gt;Australia&lt;/option&gt;&#10;                          &lt;option value=&quot;United Kingdom&quot;&gt;United Kingdom&lt;/option&gt;&#10;                          &lt;option value=&quot;Germany&quot;&gt;Germany&lt;/option&gt;&#10;                          &lt;option value=&quot;France&quot;&gt;France&lt;/option&gt;&#10;                          &lt;option value=&quot;Japan&quot;&gt;Japan&lt;/option&gt;&#10;                          &lt;option value=&quot;South Korea&quot;&gt;South Korea&lt;/option&gt;&#10;                          &lt;option value=&quot;Singapore&quot;&gt;Singapore&lt;/option&gt;&#10;                          &lt;option value=&quot;Other&quot;&gt;Other&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {isEditing &amp;&amp; (&#10;                    &lt;div className=&quot;mt-6 flex justify-end&quot;&gt;&#10;                      &lt;button&#10;                        type=&quot;submit&quot;&#10;                        disabled={isUpdatingProfile}&#10;                        className=&quot;btn-primary disabled:opacity-50 flex items-center&quot;&#10;                      &gt;&#10;                        &lt;Icon icon={Icons.FiSave} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                        {isUpdatingProfile ? 'Saving...' : 'Save Changes'}&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/form&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Security Tab */}&#10;            {activeTab === 'security' &amp;&amp; (&#10;              &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-6&quot;&gt;Security Settings&lt;/h2&gt;&#10;&#10;                &lt;form onSubmit={handlePasswordSubmit(onPasswordSubmit)}&gt;&#10;                  &lt;div className=&quot;space-y-6&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Current Password&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        {...registerPassword('currentPassword')}&#10;                        type=&quot;password&quot;&#10;                        className={`input-field ${passwordErrors.currentPassword ? 'border-red-500' : ''}`}&#10;                        placeholder=&quot;Enter current password&quot;&#10;                      /&gt;&#10;                      {passwordErrors.currentPassword &amp;&amp; (&#10;                        &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{passwordErrors.currentPassword.message}&lt;/p&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        New Password&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        {...registerPassword('newPassword')}&#10;                        type=&quot;password&quot;&#10;                        className={`input-field ${passwordErrors.newPassword ? 'border-red-500' : ''}`}&#10;                        placeholder=&quot;Enter new password&quot;&#10;                      /&gt;&#10;                      {passwordErrors.newPassword &amp;&amp; (&#10;                        &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{passwordErrors.newPassword.message}&lt;/p&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Confirm New Password&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        {...registerPassword('confirmPassword')}&#10;                        type=&quot;password&quot;&#10;                        className={`input-field ${passwordErrors.confirmPassword ? 'border-red-500' : ''}`}&#10;                        placeholder=&quot;Confirm new password&quot;&#10;                      /&gt;&#10;                      {passwordErrors.confirmPassword &amp;&amp; (&#10;                        &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{passwordErrors.confirmPassword.message}&lt;/p&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex justify-end&quot;&gt;&#10;                      &lt;button&#10;                        type=&quot;submit&quot;&#10;                        disabled={isChangingPassword}&#10;                        className=&quot;btn-primary disabled:opacity-50 flex items-center&quot;&#10;                      &gt;&#10;                        &lt;Icon icon={Icons.FiLock} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                        {isChangingPassword ? 'Changing...' : 'Change Password'}&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/form&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Preferences Tab */}&#10;            {activeTab === 'preferences' &amp;&amp; (&#10;              &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-6&quot;&gt;Preferences&lt;/h2&gt;&#10;&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Language&#10;                    &lt;/label&gt;&#10;                    &lt;select className=&quot;input-field&quot; defaultValue={user.preferences.language}&gt;&#10;                      &lt;option value=&quot;en&quot;&gt;English&lt;/option&gt;&#10;                      &lt;option value=&quot;vi&quot;&gt;Tiếng Việt&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Currency&#10;                    &lt;/label&gt;&#10;                    &lt;select className=&quot;input-field&quot; defaultValue={user.preferences.currency}&gt;&#10;                      &lt;option value=&quot;USD&quot;&gt;US Dollar (USD)&lt;/option&gt;&#10;                      &lt;option value=&quot;VND&quot;&gt;Vietnamese Dong (VND)&lt;/option&gt;&#10;                      &lt;option value=&quot;EUR&quot;&gt;Euro (EUR)&lt;/option&gt;&#10;                      &lt;option value=&quot;GBP&quot;&gt;British Pound (GBP)&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;checkbox&quot;&#10;                      id=&quot;newsletter&quot;&#10;                      className=&quot;h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded&quot;&#10;                      defaultChecked={user.preferences.newsletter}&#10;                    /&gt;&#10;                    &lt;label htmlFor=&quot;newsletter&quot; className=&quot;ml-2 block text-sm text-gray-900&quot;&gt;&#10;                      Subscribe to newsletter and promotional emails&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-end&quot;&gt;&#10;                    &lt;button className=&quot;btn-primary&quot;&gt;&#10;                      Save Preferences&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Profile;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Tours.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Tours.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#13;&#10;import { useQuery } from '@tanstack/react-query';&#13;&#10;import { Link } from 'react-router-dom';&#13;&#10;import { toursAPI } from '../utils/api';&#13;&#10;import { Tour, TourFilters } from '../types';&#13;&#10;import { Icon, Icons } from '../components/common/Icons';&#13;&#10;&#13;&#10;const Tours: React.FC = () =&gt; {&#13;&#10;  const [filters, setFilters] = useState&lt;TourFilters&gt;({&#13;&#10;    page: 1,&#13;&#10;    limit: 12,&#13;&#10;    sortBy: 'createdAt',&#13;&#10;    sortOrder: 'desc',&#13;&#10;  });&#13;&#10;  const [viewMode, setViewMode] = useState&lt;'grid' | 'list'&gt;('grid');&#13;&#10;  const [showFilters, setShowFilters] = useState(false);&#13;&#10;&#13;&#10;  const { data: toursData, isLoading, error } = useQuery({&#13;&#10;    queryKey: ['tours', filters],&#13;&#10;    queryFn: () =&gt; toursAPI.getTours(filters),&#13;&#10;  });&#13;&#10;&#13;&#10;  const categories = [&#13;&#10;    { value: '', label: 'All Categories' },&#13;&#10;    { value: 'adventure', label: 'Adventure' },&#13;&#10;    { value: 'luxury', label: 'Luxury' },&#13;&#10;    { value: 'family', label: 'Family' },&#13;&#10;    { value: 'cultural', label: 'Cultural' },&#13;&#10;    { value: 'beach', label: 'Beach' },&#13;&#10;    { value: 'city', label: 'City' },&#13;&#10;    { value: 'nature', label: 'Nature' },&#13;&#10;  ];&#13;&#10;&#13;&#10;  const durations = [&#13;&#10;    { value: '', label: 'Any Duration' },&#13;&#10;    { value: '1', label: '1 Day' },&#13;&#10;    { value: '2', label: '2-3 Days' },&#13;&#10;    { value: '4', label: '4-7 Days' },&#13;&#10;    { value: '8', label: '8+ Days' },&#13;&#10;  ];&#13;&#10;&#13;&#10;  const sortOptions = [&#13;&#10;    { value: 'createdAt-desc', label: 'Newest First' },&#13;&#10;    { value: 'pricing.basePrice-asc', label: 'Price: Low to High' },&#13;&#10;    { value: 'pricing.basePrice-desc', label: 'Price: High to Low' },&#13;&#10;    { value: 'ratings.average-desc', label: 'Highest Rated' },&#13;&#10;    { value: 'duration.days-asc', label: 'Duration: Short to Long' },&#13;&#10;  ];&#13;&#10;&#13;&#10;  const handleFilterChange = (key: keyof TourFilters, value: string | number | undefined) =&gt; {&#13;&#10;    setFilters(prev =&gt; ({&#13;&#10;      ...prev,&#13;&#10;      [key]: value,&#13;&#10;      page: 1, // Reset to first page when filters change&#13;&#10;    }));&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleSortChange = (sortValue: string) =&gt; {&#13;&#10;    const [sortBy, sortOrder] = sortValue.split('-');&#13;&#10;    setFilters(prev =&gt; ({&#13;&#10;      ...prev,&#13;&#10;      sortBy,&#13;&#10;      sortOrder: sortOrder as 'asc' | 'desc',&#13;&#10;      page: 1,&#13;&#10;    }));&#13;&#10;  };&#13;&#10;&#13;&#10;  const handlePageChange = (page: number) =&gt; {&#13;&#10;    setFilters(prev =&gt; ({ ...prev, page }));&#13;&#10;    window.scrollTo({ top: 0, behavior: 'smooth' });&#13;&#10;  };&#13;&#10;&#13;&#10;  const clearFilters = () =&gt; {&#13;&#10;    setFilters({&#13;&#10;      page: 1,&#13;&#10;      limit: 12,&#13;&#10;      sortBy: 'createdAt',&#13;&#10;      sortOrder: 'desc',&#13;&#10;    });&#13;&#10;  };&#13;&#10;&#13;&#10;  const pagination = toursData?.data.pagination;&#13;&#10;  const tours = toursData?.data.data || [];&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#13;&#10;      {/* Hero Section */}&#13;&#10;      &lt;div className=&quot;bg-primary-600 text-white py-16&quot;&gt;&#13;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#13;&#10;          &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;            &lt;h1 className=&quot;text-4xl md:text-5xl font-bold mb-4&quot;&gt;Discover Amazing Tours&lt;/h1&gt;&#13;&#10;            &lt;p className=&quot;text-xl text-blue-100 max-w-2xl mx-auto&quot;&gt;&#13;&#10;              Explore our curated collection of unforgettable travel experiences around the world&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex flex-col lg:flex-row gap-8&quot;&gt;&#13;&#10;          {/* Filters Sidebar */}&#13;&#10;          &lt;div className={`lg:w-64 ${showFilters ? 'block' : 'hidden lg:block'}`}&gt;&#13;&#10;            &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 sticky top-4&quot;&gt;&#13;&#10;              &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#13;&#10;                &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;Filters&lt;/h3&gt;&#13;&#10;                &lt;button&#13;&#10;                  onClick={clearFilters}&#13;&#10;                  className=&quot;text-sm text-primary-600 hover:text-primary-700&quot;&#13;&#10;                &gt;&#13;&#10;                  Clear All&#13;&#10;                &lt;/button&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Search */}&#13;&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#13;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#13;&#10;                  Search Tours&#13;&#10;                &lt;/label&gt;&#13;&#10;                &lt;div className=&quot;relative&quot;&gt;&#13;&#10;                  &lt;Icon icon={Icons.FiSearch} className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4&quot; /&gt;&#13;&#10;                  &lt;input&#13;&#10;                    type=&quot;text&quot;&#13;&#10;                    placeholder=&quot;Search destinations, tours...&quot;&#13;&#10;                    className=&quot;input-field pl-10&quot;&#13;&#10;                    value={filters.search || ''}&#13;&#10;                    onChange={(e) =&gt; handleFilterChange('search', e.target.value)}&#13;&#10;                  /&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Category Filter */}&#13;&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#13;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#13;&#10;                  Category&#13;&#10;                &lt;/label&gt;&#13;&#10;                &lt;select&#13;&#10;                  className=&quot;input-field&quot;&#13;&#10;                  value={filters.category || ''}&#13;&#10;                  onChange={(e) =&gt; handleFilterChange('category', e.target.value)}&#13;&#10;                &gt;&#13;&#10;                  {categories.map(category =&gt; (&#13;&#10;                    &lt;option key={category.value} value={category.value}&gt;&#13;&#10;                      {category.label}&#13;&#10;                    &lt;/option&gt;&#13;&#10;                  ))}&#13;&#10;                &lt;/select&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Price Range */}&#13;&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#13;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#13;&#10;                  Price Range (USD)&#13;&#10;                &lt;/label&gt;&#13;&#10;                &lt;div className=&quot;grid grid-cols-2 gap-2&quot;&gt;&#13;&#10;                  &lt;input&#13;&#10;                    type=&quot;number&quot;&#13;&#10;                    placeholder=&quot;Min&quot;&#13;&#10;                    className=&quot;input-field&quot;&#13;&#10;                    value={filters.minPrice || ''}&#13;&#10;                    onChange={(e) =&gt; handleFilterChange('minPrice', e.target.value ? Number(e.target.value) : undefined)}&#13;&#10;                  /&gt;&#13;&#10;                  &lt;input&#13;&#10;                    type=&quot;number&quot;&#13;&#10;                    placeholder=&quot;Max&quot;&#13;&#10;                    className=&quot;input-field&quot;&#13;&#10;                    value={filters.maxPrice || ''}&#13;&#10;                    onChange={(e) =&gt; handleFilterChange('maxPrice', e.target.value ? Number(e.target.value) : undefined)}&#13;&#10;                  /&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Duration Filter */}&#13;&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#13;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#13;&#10;                  Duration&#13;&#10;                &lt;/label&gt;&#13;&#10;                &lt;select&#13;&#10;                  className=&quot;input-field&quot;&#13;&#10;                  value={filters.duration || ''}&#13;&#10;                  onChange={(e) =&gt; handleFilterChange('duration', e.target.value)}&#13;&#10;                &gt;&#13;&#10;                  {durations.map(duration =&gt; (&#13;&#10;                    &lt;option key={duration.value} value={duration.value}&gt;&#13;&#10;                      {duration.label}&#13;&#10;                    &lt;/option&gt;&#13;&#10;                  ))}&#13;&#10;                &lt;/select&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          {/* Main Content */}&#13;&#10;          &lt;div className=&quot;flex-1&quot;&gt;&#13;&#10;            {/* Top Bar */}&#13;&#10;            &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4&quot;&gt;&#13;&#10;              &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#13;&#10;                &lt;button&#13;&#10;                  onClick={() =&gt; setShowFilters(!showFilters)}&#13;&#10;                  className=&quot;lg:hidden btn-secondary flex items-center&quot;&#13;&#10;                &gt;&#13;&#10;                  &lt;Icon icon={Icons.FiFilter} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#13;&#10;                  Filters&#13;&#10;                &lt;/button&gt;&#13;&#10;                {pagination &amp;&amp; (&#13;&#10;                  &lt;p className=&quot;text-gray-600&quot;&gt;&#13;&#10;                    Showing {((pagination.currentPage - 1) * 12) + 1}-{Math.min(pagination.currentPage * 12, pagination.totalTours || pagination.totalItems)} of {pagination.totalTours || pagination.totalItems} tours&#13;&#10;                  &lt;/p&gt;&#13;&#10;                )}&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#13;&#10;                {/* Sort */}&#13;&#10;                &lt;select&#13;&#10;                  className=&quot;input-field min-w-48&quot;&#13;&#10;                  value={`${filters.sortBy}-${filters.sortOrder}`}&#13;&#10;                  onChange={(e) =&gt; handleSortChange(e.target.value)}&#13;&#10;                &gt;&#13;&#10;                  {sortOptions.map(option =&gt; (&#13;&#10;                    &lt;option key={option.value} value={option.value}&gt;&#13;&#10;                      {option.label}&#13;&#10;                    &lt;/option&gt;&#13;&#10;                  ))}&#13;&#10;                &lt;/select&gt;&#13;&#10;&#13;&#10;                {/* View Mode */}&#13;&#10;                &lt;div className=&quot;flex border border-gray-300 rounded-lg&quot;&gt;&#13;&#10;                  &lt;button&#13;&#10;                    onClick={() =&gt; setViewMode('grid')}&#13;&#10;                    className={`p-2 ${viewMode === 'grid' ? 'bg-primary-600 text-white' : 'text-gray-400'}`}&#13;&#10;                  &gt;&#13;&#10;                    &lt;Icon icon={Icons.FiGrid} className=&quot;w-5 h-5&quot; /&gt;&#13;&#10;                  &lt;/button&gt;&#13;&#10;                  &lt;button&#13;&#10;                    onClick={() =&gt; setViewMode('list')}&#13;&#10;                    className={`p-2 ${viewMode === 'list' ? 'bg-primary-600 text-white' : 'text-gray-400'}`}&#13;&#10;                  &gt;&#13;&#10;                    &lt;Icon icon={Icons.FiList} className=&quot;w-5 h-5&quot; /&gt;&#13;&#10;                  &lt;/button&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {/* Tours Grid/List */}&#13;&#10;            {isLoading ? (&#13;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#13;&#10;                {[...Array(6)].map((_, index) =&gt; (&#13;&#10;                  &lt;div key={index} className=&quot;card animate-pulse&quot;&gt;&#13;&#10;                    &lt;div className=&quot;h-48 bg-gray-300 rounded-t-xl&quot;&gt;&lt;/div&gt;&#13;&#10;                    &lt;div className=&quot;p-6&quot;&gt;&#13;&#10;                      &lt;div className=&quot;h-4 bg-gray-300 rounded mb-2&quot;&gt;&lt;/div&gt;&#13;&#10;                      &lt;div className=&quot;h-6 bg-gray-300 rounded mb-4&quot;&gt;&lt;/div&gt;&#13;&#10;                      &lt;div className=&quot;h-4 bg-gray-300 rounded&quot;&gt;&lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                ))}&#13;&#10;              &lt;/div&gt;&#13;&#10;            ) : error ? (&#13;&#10;              &lt;div className=&quot;text-center py-12&quot;&gt;&#13;&#10;                &lt;p className=&quot;text-gray-500&quot;&gt;Error loading tours. Please try again.&lt;/p&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ) : !tours.length ? (&#13;&#10;              &lt;div className=&quot;text-center py-12&quot;&gt;&#13;&#10;                &lt;p className=&quot;text-gray-500&quot;&gt;No tours found matching your criteria.&lt;/p&gt;&#13;&#10;                &lt;button&#13;&#10;                  onClick={clearFilters}&#13;&#10;                  className=&quot;mt-4 btn-primary&quot;&#13;&#10;                &gt;&#13;&#10;                  Clear Filters&#13;&#10;                &lt;/button&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ) : (&#13;&#10;              &lt;&gt;&#13;&#10;                &lt;div className={viewMode === 'grid'&#13;&#10;                  ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'&#13;&#10;                  : 'space-y-6'&#13;&#10;                }&gt;&#13;&#10;                  {tours.map((tour: Tour) =&gt; (&#13;&#10;                    &lt;TourCard key={tour._id} tour={tour} viewMode={viewMode} /&gt;&#13;&#10;                  ))}&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                {/* Pagination */}&#13;&#10;                {pagination &amp;&amp; pagination.totalPages &gt; 1 &amp;&amp; (&#13;&#10;                  &lt;div className=&quot;flex justify-center mt-12&quot;&gt;&#13;&#10;                    &lt;nav className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;                      &lt;button&#13;&#10;                        onClick={() =&gt; handlePageChange(pagination.currentPage - 1)}&#13;&#10;                        disabled={!pagination.hasPrev}&#13;&#10;                        className=&quot;px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#13;&#10;                      &gt;&#13;&#10;                        Previous&#13;&#10;                      &lt;/button&gt;&#13;&#10;&#13;&#10;                      {[...Array(Math.min(5, pagination.totalPages))].map((_, index) =&gt; {&#13;&#10;                        const page = index + 1;&#13;&#10;                        return (&#13;&#10;                          &lt;button&#13;&#10;                            key={page}&#13;&#10;                            onClick={() =&gt; handlePageChange(page)}&#13;&#10;                            className={`px-3 py-2 text-sm font-medium rounded-md ${&#13;&#10;                              page === pagination.currentPage&#13;&#10;                                ? 'bg-primary-600 text-white'&#13;&#10;                                : 'text-gray-500 bg-white border border-gray-300 hover:bg-gray-50'&#13;&#10;                            }`}&#13;&#10;                          &gt;&#13;&#10;                            {page}&#13;&#10;                          &lt;/button&gt;&#13;&#10;                        );&#13;&#10;                      })}&#13;&#10;&#13;&#10;                      &lt;button&#13;&#10;                        onClick={() =&gt; handlePageChange(pagination.currentPage + 1)}&#13;&#10;                        disabled={!pagination.hasNext}&#13;&#10;                        className=&quot;px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#13;&#10;                      &gt;&#13;&#10;                        Next&#13;&#10;                      &lt;/button&gt;&#13;&#10;                    &lt;/nav&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                )}&#13;&#10;              &lt;/&gt;&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;// Tour Card Component&#13;&#10;interface TourCardProps {&#13;&#10;  tour: Tour;&#13;&#10;  viewMode: 'grid' | 'list';&#13;&#10;}&#13;&#10;&#13;&#10;const TourCard: React.FC&lt;TourCardProps&gt; = ({ tour, viewMode }) =&gt; {&#13;&#10;  if (viewMode === 'list') {&#13;&#10;    return (&#13;&#10;      &lt;div className=&quot;card overflow-hidden&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex flex-col md:flex-row&quot;&gt;&#13;&#10;          &lt;div className=&quot;md:w-1/3&quot;&gt;&#13;&#10;            &lt;img&#13;&#10;              src={tour.images[0]?.url || `https://images.unsplash.com/photo-1469474968028-56623f02e42e?ixlib=rb-4.0.3&amp;auto=format&amp;fit=crop&amp;w=400&amp;q=80`}&#13;&#10;              alt={tour.title}&#13;&#10;              className=&quot;w-full h-48 md:h-full object-cover&quot;&#13;&#10;            /&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className=&quot;flex-1 p-6&quot;&gt;&#13;&#10;            &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#13;&#10;              &lt;div className=&quot;flex-1&quot;&gt;&#13;&#10;                &lt;div className=&quot;flex items-center text-sm text-gray-500 mb-2&quot;&gt;&#13;&#10;                  &lt;Icon icon={Icons.FiMapPin} className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;                  {tour.destination}&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;h3 className=&quot;text-xl font-semibold text-gray-900 mb-2&quot;&gt;&#13;&#10;                  {tour.title}&#13;&#10;                &lt;/h3&gt;&#13;&#10;                &lt;p className=&quot;text-gray-600 mb-4 line-clamp-2&quot;&gt;&#13;&#10;                  {tour.shortDescription}&#13;&#10;                &lt;/p&gt;&#13;&#10;                &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500&quot;&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                    &lt;Icon icon={Icons.FiClock} className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;                    {tour.duration.days}D/{tour.duration.nights}N&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                    &lt;Icon icon={Icons.FiUsers} className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;                    Max {tour.maxGroupSize}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                    &lt;Icon icon={Icons.FiStar} className=&quot;w-4 h-4 text-yellow-400 mr-1&quot; /&gt;&#13;&#10;                    {tour.ratings.average.toFixed(1)} ({tour.ratings.count})&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className=&quot;text-right ml-6&quot;&gt;&#13;&#10;                &lt;div className=&quot;text-2xl font-bold text-primary-600&quot;&gt;&#13;&#10;                  ${tour.pricing.basePrice}&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className=&quot;text-sm text-gray-500 mb-4&quot;&gt;per person&lt;/div&gt;&#13;&#10;                &lt;Link&#13;&#10;                  to={`/tours/${tour.slug}`}&#13;&#10;                  className=&quot;btn-primary&quot;&#13;&#10;                &gt;&#13;&#10;                  View Details&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;card overflow-hidden group&quot;&gt;&#13;&#10;      &lt;div className=&quot;relative h-48 overflow-hidden&quot;&gt;&#13;&#10;        &lt;img&#13;&#10;          src={tour.images[0]?.url || `https://images.unsplash.com/photo-1469474968028-56623f02e42e?ixlib=rb-4.0.3&amp;auto=format&amp;fit=crop&amp;w=400&amp;q=80`}&#13;&#10;          alt={tour.title}&#13;&#10;          className=&quot;w-full h-full object-cover group-hover:scale-110 transition-transform duration-300&quot;&#13;&#10;        /&gt;&#13;&#10;        &lt;div className=&quot;absolute top-4 right-4 bg-white rounded-full px-3 py-1 text-sm font-medium text-primary-600&quot;&gt;&#13;&#10;          ${tour.pricing.basePrice}&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex items-center text-sm text-gray-500 mb-2&quot;&gt;&#13;&#10;          &lt;Icon icon={Icons.FiMapPin} className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;          {tour.destination}&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;h3 className=&quot;text-lg font-semibold text-gray-900 mb-2 line-clamp-2&quot;&gt;&#13;&#10;          {tour.title}&#13;&#10;        &lt;/h3&gt;&#13;&#10;        &lt;p className=&quot;text-gray-600 text-sm mb-4 line-clamp-2&quot;&gt;&#13;&#10;          {tour.shortDescription}&#13;&#10;        &lt;/p&gt;&#13;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;            &lt;Icon icon={Icons.FiClock} className=&quot;w-4 h-4 mr-1 text-gray-400&quot; /&gt;&#13;&#10;            &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#13;&#10;              {tour.duration.days}D/{tour.duration.nights}N&#13;&#10;            &lt;/span&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;            &lt;Icon icon={Icons.FiStar} className=&quot;w-4 h-4 text-yellow-400 mr-1&quot; /&gt;&#13;&#10;            &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#13;&#10;              {tour.ratings.average.toFixed(1)} ({tour.ratings.count})&#13;&#10;            &lt;/span&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;Link&#13;&#10;          to={`/tours/${tour.slug}`}&#13;&#10;          className=&quot;block w-full text-center btn-primary&quot;&#13;&#10;        &gt;&#13;&#10;          View Details&#13;&#10;        &lt;/Link&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default Tours;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/admin/Dashboard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/admin/Dashboard.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { Routes, Route, Navigate } from 'react-router-dom';&#10;import { useAuth } from '../../contexts/AuthContext';&#10;import { Icon, Icons } from '../../components/common/Icons';&#10;&#10;const AdminDashboard: React.FC = () =&gt; {&#10;  const { state } = useAuth();&#10;&#10;  if (state.user?.role !== 'admin') {&#10;    return &lt;Navigate to=&quot;/&quot; replace /&gt;;&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Admin Dashboard&lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;Manage your travel business&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Quick Stats */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8&quot;&gt;&#10;          &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;div className=&quot;w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;Icon icon={Icons.FiCalendar} className=&quot;w-6 h-6 text-blue-600&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;ml-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;Total Bookings&lt;/h3&gt;&#10;                &lt;p className=&quot;text-2xl font-bold text-blue-600&quot;&gt;0&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;div className=&quot;w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;Icon icon={Icons.FiBarChart} className=&quot;w-6 h-6 text-green-600&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;ml-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;Revenue&lt;/h3&gt;&#10;                &lt;p className=&quot;text-2xl font-bold text-green-600&quot;&gt;$0&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;div className=&quot;w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;Icon icon={Icons.FiUsers} className=&quot;w-6 h-6 text-purple-600&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;ml-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;Customers&lt;/h3&gt;&#10;                &lt;p className=&quot;text-2xl font-bold text-purple-600&quot;&gt;0&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;div className=&quot;w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;Icon icon={Icons.FiStar} className=&quot;w-6 h-6 text-yellow-600&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;ml-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;Reviews&lt;/h3&gt;&#10;                &lt;p className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;0&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Quick Actions */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;          &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;            &lt;h3 className=&quot;text-lg font-semibold text-gray-900 mb-4&quot;&gt;Quick Actions&lt;/h3&gt;&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              &lt;button className=&quot;w-full btn-primary text-left&quot;&gt;&#10;                &lt;Icon icon={Icons.FiCalendar} className=&quot;w-4 h-4 mr-2 inline&quot; /&gt;&#10;                Create New Tour&#10;              &lt;/button&gt;&#10;              &lt;button className=&quot;w-full btn-secondary text-left&quot;&gt;&#10;                &lt;Icon icon={Icons.FiUsers} className=&quot;w-4 h-4 mr-2 inline&quot; /&gt;&#10;                View All Bookings&#10;              &lt;/button&gt;&#10;              &lt;button className=&quot;w-full btn-secondary text-left&quot;&gt;&#10;                &lt;Icon icon={Icons.FiSettings} className=&quot;w-4 h-4 mr-2 inline&quot; /&gt;&#10;                Manage Users&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;            &lt;h3 className=&quot;text-lg font-semibold text-gray-900 mb-4&quot;&gt;Recent Activity&lt;/h3&gt;&#10;            &lt;div className=&quot;text-gray-600&quot;&gt;&#10;              &lt;p className=&quot;text-sm&quot;&gt;No recent activity to display.&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;            &lt;h3 className=&quot;text-lg font-semibold text-gray-900 mb-4&quot;&gt;System Status&lt;/h3&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;span className=&quot;text-sm text-gray-600&quot;&gt;API Status&lt;/span&gt;&#10;                &lt;span className=&quot;text-sm text-green-600 font-medium&quot;&gt;Online&lt;/span&gt;&#10;                &lt;span className=&quot;text-sm text-gray-600&quot;&gt;API Status&lt;/span&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;span className=&quot;text-sm text-gray-600&quot;&gt;Database&lt;/span&gt;&#10;                &lt;span className=&quot;text-sm text-green-600 font-medium&quot;&gt;Connected&lt;/span&gt;&#10;                &lt;span className=&quot;text-sm text-gray-600&quot;&gt;API Status&lt;/span&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;span className=&quot;text-sm text-gray-600&quot;&gt;Payment Gateway&lt;/span&gt;&#10;                &lt;span className=&quot;text-sm text-yellow-600 font-medium&quot;&gt;Test Mode&lt;/span&gt;&#10;                &lt;span className=&quot;text-sm text-yellow-600 font-medium&quot;&gt;Test Mode&lt;/span&gt;&#10;                &lt;span className=&quot;text-sm text-yellow-600 font-medium&quot;&gt;Test Mode&lt;/span&gt;&#10;                &lt;span className=&quot;text-sm text-yellow-600 font-medium&quot;&gt;Test Mode&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default AdminDashboard;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Navigate } from 'react-router-dom';&#10;import { useAuth } from '../../contexts/AuthContext';&#10;import { Icon, Icons } from '../../components/common/Icons';&#10;&#10;const AdminDashboard: React.FC = () =&gt; {&#10;  const { state } = useAuth();&#10;&#10;  if (state.user?.role !== 'admin') {&#10;    return &lt;Navigate to=&quot;/&quot; replace /&gt;;&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 dark:bg-dark-900 transition-colors duration-200&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900 dark:text-white&quot;&gt;Admin Dashboard&lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-600 dark:text-gray-400&quot;&gt;Manage your travel business&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Quick Stats */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-dark-800 rounded-lg shadow-lg p-6 border dark:border-dark-700&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;div className=&quot;w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;Icon icon={Icons.FiCalendar} className=&quot;w-6 h-6 text-blue-600 dark:text-blue-400&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;ml-4&quot;&gt;&#10;                &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;Total Bookings&lt;/p&gt;&#10;                &lt;p className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;142&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white dark:bg-dark-800 rounded-lg shadow-lg p-6 border dark:border-dark-700&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;div className=&quot;w-12 h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;Icon icon={Icons.FiDollarSign} className=&quot;w-6 h-6 text-green-600 dark:text-green-400&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;ml-4&quot;&gt;&#10;                &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;Revenue&lt;/p&gt;&#10;                &lt;p className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;$24,500&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white dark:bg-dark-800 rounded-lg shadow-lg p-6 border dark:border-dark-700&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;div className=&quot;w-12 h-12 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;Icon icon={Icons.FiUsers} className=&quot;w-6 h-6 text-purple-600 dark:text-purple-400&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;ml-4&quot;&gt;&#10;                &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;Active Tours&lt;/p&gt;&#10;                &lt;p className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;12&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white dark:bg-dark-800 rounded-lg shadow-lg p-6 border dark:border-dark-700&quot;&gt;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;div className=&quot;w-12 h-12 bg-orange-100 dark:bg-orange-900 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;Icon icon={Icons.FiStar} className=&quot;w-6 h-6 text-orange-600 dark:text-orange-400&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;ml-4&quot;&gt;&#10;                &lt;p className=&quot;text-sm font-medium text-gray-600 dark:text-gray-400&quot;&gt;Reviews&lt;/p&gt;&#10;                &lt;p className=&quot;text-2xl font-bold text-gray-900 dark:text-white&quot;&gt;4.8&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Management Sections */}&#10;        &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8&quot;&gt;&#10;          &lt;div className=&quot;bg-white dark:bg-dark-800 rounded-lg shadow-lg p-6 border dark:border-dark-700&quot;&gt;&#10;            &lt;h2 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;Quick Actions&lt;/h2&gt;&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              &lt;button className=&quot;w-full flex items-center justify-between p-3 bg-primary-50 dark:bg-primary-900/20 rounded-lg hover:bg-primary-100 dark:hover:bg-primary-900/30 transition-colors duration-200&quot;&gt;&#10;                &lt;span className=&quot;text-primary-700 dark:text-primary-300 font-medium&quot;&gt;Add New Tour&lt;/span&gt;&#10;                &lt;Icon icon={Icons.FiPlus} className=&quot;w-5 h-5 text-primary-600 dark:text-primary-400&quot; /&gt;&#10;              &lt;/button&gt;&#10;              &lt;button className=&quot;w-full flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg hover:bg-green-100 dark:hover:bg-green-900/30 transition-colors duration-200&quot;&gt;&#10;                &lt;span className=&quot;text-green-700 dark:text-green-300 font-medium&quot;&gt;Manage Bookings&lt;/span&gt;&#10;                &lt;Icon icon={Icons.FiCalendar} className=&quot;w-5 h-5 text-green-600 dark:text-green-400&quot; /&gt;&#10;              &lt;/button&gt;&#10;              &lt;button className=&quot;w-full flex items-center justify-between p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-900/30 transition-colors duration-200&quot;&gt;&#10;                &lt;span className=&quot;text-purple-700 dark:text-purple-300 font-medium&quot;&gt;View Analytics&lt;/span&gt;&#10;                &lt;Icon icon={Icons.FiBarChart} className=&quot;w-5 h-5 text-purple-600 dark:text-purple-400&quot; /&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-white dark:bg-dark-800 rounded-lg shadow-lg p-6 border dark:border-dark-700&quot;&gt;&#10;            &lt;h2 className=&quot;text-xl font-bold text-gray-900 dark:text-white mb-4&quot;&gt;Recent Activity&lt;/h2&gt;&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-3 p-3 rounded-lg bg-gray-50 dark:bg-dark-700&quot;&gt;&#10;                &lt;div className=&quot;w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiUser} className=&quot;w-4 h-4 text-blue-600 dark:text-blue-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;New booking received&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;2 minutes ago&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex items-center space-x-3 p-3 rounded-lg bg-gray-50 dark:bg-dark-700&quot;&gt;&#10;                &lt;div className=&quot;w-8 h-8 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiDollarSign} className=&quot;w-4 h-4 text-green-600 dark:text-green-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-gray-900 dark:text-white&quot;&gt;Payment processed&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xs text-gray-500 dark:text-gray-400&quot;&gt;15 minutes ago&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default AdminDashboard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/auth/Login.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/auth/Login.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Link, useNavigate, useLocation } from 'react-router-dom';&#10;import { useForm } from 'react-hook-form';&#10;import { yupResolver } from '@hookform/resolvers/yup';&#10;import * as yup from 'yup';&#10;import { useAuth } from '../../contexts/AuthContext';&#10;import { Icon, Icons } from '../../components/common/Icons';&#10;import toast from 'react-hot-toast';&#10;&#10;const schema = yup.object({&#10;  email: yup.string().email('Invalid email').required('Email is required'),&#10;  password: yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),&#10;});&#10;&#10;interface LoginFormData {&#10;  email: string;&#10;  password: string;&#10;}&#10;&#10;const Login: React.FC = () =&gt; {&#10;  const [showPassword, setShowPassword] = useState(false);&#10;  const { login, state } = useAuth();&#10;  const navigate = useNavigate();&#10;  const location = useLocation();&#10;&#10;  const from = location.state?.from?.pathname || '/';&#10;&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    formState: { errors, isSubmitting },&#10;  } = useForm&lt;LoginFormData&gt;({&#10;    resolver: yupResolver(schema),&#10;  });&#10;&#10;  const onSubmit = async (data: LoginFormData) =&gt; {&#10;    try {&#10;      await login(data.email, data.password);&#10;      toast.success('Login successful!');&#10;      navigate(from, { replace: true });&#10;    } catch (error: any) {&#10;      toast.error(error.message || 'Login failed');&#10;    }&#10;  };&#10;&#10;  // Redirect if already authenticated&#10;  React.useEffect(() =&gt; {&#10;    if (state.isAuthenticated) {&#10;      navigate(from, { replace: true });&#10;    }&#10;  }, [state.isAuthenticated, navigate, from]);&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8&quot;&gt;&#10;      &lt;div className=&quot;sm:mx-auto sm:w-full sm:max-w-md&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;mx-auto w-16 h-16 bg-primary-600 rounded-full flex items-center justify-center mb-4&quot;&gt;&#10;            &lt;span className=&quot;text-white font-bold text-2xl&quot;&gt;T&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Welcome back&lt;/h2&gt;&#10;          &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;Sign in to your account to continue your journey&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;mt-8 sm:mx-auto sm:w-full sm:max-w-md&quot;&gt;&#10;        &lt;div className=&quot;bg-white py-8 px-4 shadow-xl rounded-lg sm:px-10&quot;&gt;&#10;          &lt;form className=&quot;space-y-6&quot; onSubmit={handleSubmit(onSubmit)}&gt;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Email address&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiMail} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('email')}&#10;                  type=&quot;email&quot;&#10;                  autoComplete=&quot;email&quot;&#10;                  className={`input-field pl-10 ${errors.email ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Enter your email&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              {errors.email &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.email.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;password&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Password&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiLock} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('password')}&#10;                  type={showPassword ? 'text' : 'password'}&#10;                  autoComplete=&quot;current-password&quot;&#10;                  className={`input-field pl-10 pr-10 ${errors.password ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Enter your password&quot;&#10;                /&gt;&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  className=&quot;absolute inset-y-0 right-0 pr-3 flex items-center&quot;&#10;                  onClick={() =&gt; setShowPassword(!showPassword)}&#10;                &gt;&#10;                  {showPassword ? (&#10;                    &lt;Icon icon={Icons.FiEyeOff} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  ) : (&#10;                    &lt;Icon icon={Icons.FiEye} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  )}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              {errors.password &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.password.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;input&#10;                  id=&quot;remember-me&quot;&#10;                  name=&quot;remember-me&quot;&#10;                  type=&quot;checkbox&quot;&#10;                  className=&quot;h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded&quot;&#10;                /&gt;&#10;                &lt;label htmlFor=&quot;remember-me&quot; className=&quot;ml-2 block text-sm text-gray-900&quot;&gt;&#10;                  Remember me&#10;                &lt;/label&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;text-sm&quot;&gt;&#10;                &lt;Link&#10;                  to=&quot;/forgot-password&quot;&#10;                  className=&quot;font-medium text-primary-600 hover:text-primary-500&quot;&#10;                &gt;&#10;                  Forgot your password?&#10;                &lt;/Link&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;button&#10;                type=&quot;submit&quot;&#10;                disabled={isSubmitting}&#10;                className=&quot;w-full btn-primary disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;              &gt;&#10;                {isSubmitting ? (&#10;                  &lt;div className=&quot;flex items-center justify-center&quot;&gt;&#10;                    &lt;div className=&quot;animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2&quot;&gt;&lt;/div&gt;&#10;                    Signing in...&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  'Sign in'&#10;                )}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6&quot;&gt;&#10;              &lt;div className=&quot;relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-0 flex items-center&quot;&gt;&#10;                  &lt;div className=&quot;w-full border-t border-gray-300&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;relative flex justify-center text-sm&quot;&gt;&#10;                  &lt;span className=&quot;px-2 bg-white text-gray-500&quot;&gt;New to TravelCo?&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;mt-6&quot;&gt;&#10;                &lt;Link&#10;                  to=&quot;/register&quot;&#10;                  className=&quot;w-full btn-secondary text-center block&quot;&#10;                &gt;&#10;                  Create an account&#10;                &lt;/Link&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Login;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/auth/Register_fixed.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/auth/Register_fixed.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Link, useNavigate } from 'react-router-dom';&#10;import { useForm } from 'react-hook-form';&#10;import { yupResolver } from '@hookform/resolvers/yup';&#10;import * as yup from 'yup';&#10;import { useAuth } from '../../contexts/AuthContext';&#10;import { Icon, Icons } from '../../components/common/Icons';&#10;import toast from 'react-hot-toast';&#10;&#10;const schema = yup.object().shape({&#10;  name: yup.string().min(2, 'Name must be at least 2 characters').required('Name is required'),&#10;  email: yup.string().email('Invalid email').required('Email is required'),&#10;  password: yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),&#10;  confirmPassword: yup.string()&#10;    .oneOf([yup.ref('password')], 'Passwords must match')&#10;    .required('Please confirm your password'),&#10;  phone: yup.string().optional(),&#10;  country: yup.string().optional(),&#10;  terms: yup.boolean().oneOf([true], 'You must accept the terms and conditions'),&#10;});&#10;&#10;interface RegisterFormData {&#10;  name: string;&#10;  email: string;&#10;  password: string;&#10;  confirmPassword: string;&#10;  phone?: string;&#10;  country?: string;&#10;  terms: boolean;&#10;}&#10;&#10;const Register: React.FC = () =&gt; {&#10;  const [showPassword, setShowPassword] = useState(false);&#10;  const [showConfirmPassword, setShowConfirmPassword] = useState(false);&#10;  const { register: registerUser, state } = useAuth();&#10;  const navigate = useNavigate();&#10;&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    formState: { errors, isSubmitting },&#10;  } = useForm&lt;RegisterFormData&gt;({&#10;    resolver: yupResolver(schema),&#10;  });&#10;&#10;  const onSubmit = async (data: RegisterFormData) =&gt; {&#10;    try {&#10;      const { confirmPassword, terms, ...registerData } = data;&#10;      await registerUser(registerData);&#10;      toast.success('Registration successful! Welcome to TravelCo!');&#10;      navigate('/');&#10;    } catch (error: any) {&#10;      toast.error(error.message || 'Registration failed');&#10;    }&#10;  };&#10;&#10;  // Redirect if already authenticated&#10;  React.useEffect(() =&gt; {&#10;    if (state.isAuthenticated) {&#10;      navigate('/');&#10;    }&#10;  }, [state.isAuthenticated, navigate]);&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8&quot;&gt;&#10;      &lt;div className=&quot;sm:mx-auto sm:w-full sm:max-w-md&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;mx-auto w-16 h-16 bg-primary-600 rounded-full flex items-center justify-center mb-4&quot;&gt;&#10;            &lt;span className=&quot;text-white font-bold text-2xl&quot;&gt;T&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Create your account&lt;/h2&gt;&#10;          &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;Join thousands of travelers exploring the world&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;mt-8 sm:mx-auto sm:w-full sm:max-w-md&quot;&gt;&#10;        &lt;div className=&quot;bg-white py-8 px-4 shadow-xl rounded-lg sm:px-10&quot;&gt;&#10;          &lt;form className=&quot;space-y-6&quot; onSubmit={handleSubmit(onSubmit)}&gt;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;name&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Full name&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiUser} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('name')}&#10;                  type=&quot;text&quot;&#10;                  autoComplete=&quot;name&quot;&#10;                  className={`input-field pl-10 ${errors.name ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Enter your full name&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              {errors.name &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.name.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Email address&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiMail} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('email')}&#10;                  type=&quot;email&quot;&#10;                  autoComplete=&quot;email&quot;&#10;                  className={`input-field pl-10 ${errors.email ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Enter your email&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              {errors.email &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.email.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 gap-6 sm:grid-cols-2&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;label htmlFor=&quot;phone&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                  Phone (optional)&#10;                &lt;/label&gt;&#10;                &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                  &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                    &lt;Icon icon={Icons.FiPhone} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;input&#10;                    {...register('phone')}&#10;                    type=&quot;tel&quot;&#10;                    autoComplete=&quot;tel&quot;&#10;                    className=&quot;input-field pl-10&quot;&#10;                    placeholder=&quot;Phone number&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div&gt;&#10;                &lt;label htmlFor=&quot;country&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                  Country (optional)&#10;                &lt;/label&gt;&#10;                &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                  &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                    &lt;Icon icon={Icons.FiMapPin} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;select&#10;                    {...register('country')}&#10;                    className=&quot;input-field pl-10&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;&quot;&gt;Select country&lt;/option&gt;&#10;                    &lt;option value=&quot;Vietnam&quot;&gt;Vietnam&lt;/option&gt;&#10;                    &lt;option value=&quot;United States&quot;&gt;United States&lt;/option&gt;&#10;                    &lt;option value=&quot;Canada&quot;&gt;Canada&lt;/option&gt;&#10;                    &lt;option value=&quot;Australia&quot;&gt;Australia&lt;/option&gt;&#10;                    &lt;option value=&quot;United Kingdom&quot;&gt;United Kingdom&lt;/option&gt;&#10;                    &lt;option value=&quot;Germany&quot;&gt;Germany&lt;/option&gt;&#10;                    &lt;option value=&quot;France&quot;&gt;France&lt;/option&gt;&#10;                    &lt;option value=&quot;Japan&quot;&gt;Japan&lt;/option&gt;&#10;                    &lt;option value=&quot;South Korea&quot;&gt;South Korea&lt;/option&gt;&#10;                    &lt;option value=&quot;Singapore&quot;&gt;Singapore&lt;/option&gt;&#10;                    &lt;option value=&quot;Other&quot;&gt;Other&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;password&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Password&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiLock} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('password')}&#10;                  type={showPassword ? 'text' : 'password'}&#10;                  autoComplete=&quot;new-password&quot;&#10;                  className={`input-field pl-10 pr-10 ${errors.password ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Create a password&quot;&#10;                /&gt;&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  className=&quot;absolute inset-y-0 right-0 pr-3 flex items-center&quot;&#10;                  onClick={() =&gt; setShowPassword(!showPassword)}&#10;                &gt;&#10;                  {showPassword ? (&#10;                    &lt;Icon icon={Icons.FiEyeOff} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  ) : (&#10;                    &lt;Icon icon={Icons.FiEye} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  )}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              {errors.password &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.password.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;confirmPassword&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Confirm password&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiLock} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('confirmPassword')}&#10;                  type={showConfirmPassword ? 'text' : 'password'}&#10;                  autoComplete=&quot;new-password&quot;&#10;                  className={`input-field pl-10 pr-10 ${errors.confirmPassword ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Confirm your password&quot;&#10;                /&gt;&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  className=&quot;absolute inset-y-0 right-0 pr-3 flex items-center&quot;&#10;                  onClick={() =&gt; setShowConfirmPassword(!showConfirmPassword)}&#10;                &gt;&#10;                  {showConfirmPassword ? (&#10;                    &lt;Icon icon={Icons.FiEyeOff} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  ) : (&#10;                    &lt;Icon icon={Icons.FiEye} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  )}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              {errors.confirmPassword &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.confirmPassword.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;input&#10;                {...register('terms')}&#10;                id=&quot;terms&quot;&#10;                type=&quot;checkbox&quot;&#10;                className={`h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded ${errors.terms ? 'border-red-500' : ''}`}&#10;              /&gt;&#10;              &lt;label htmlFor=&quot;terms&quot; className=&quot;ml-2 block text-sm text-gray-900&quot;&gt;&#10;                I agree to the{' '}&#10;                &lt;Link to=&quot;/terms&quot; className=&quot;text-primary-600 hover:text-primary-500&quot;&gt;&#10;                  Terms and Conditions&#10;                &lt;/Link&gt;{' '}&#10;                and{' '}&#10;                &lt;Link to=&quot;/privacy&quot; className=&quot;text-primary-600 hover:text-primary-500&quot;&gt;&#10;                  Privacy Policy&#10;                &lt;/Link&gt;&#10;              &lt;/label&gt;&#10;            &lt;/div&gt;&#10;            {errors.terms &amp;&amp; (&#10;              &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.terms.message}&lt;/p&gt;&#10;            )}&#10;&#10;            &lt;div&gt;&#10;              &lt;button&#10;                type=&quot;submit&quot;&#10;                disabled={isSubmitting}&#10;                className=&quot;w-full btn-primary disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;              &gt;&#10;                {isSubmitting ? (&#10;                  &lt;div className=&quot;flex items-center justify-center&quot;&gt;&#10;                    &lt;div className=&quot;animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2&quot;&gt;&lt;/div&gt;&#10;                    Creating account...&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  'Create account'&#10;                )}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6&quot;&gt;&#10;              &lt;div className=&quot;relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-0 flex items-center&quot;&gt;&#10;                  &lt;div className=&quot;w-full border-t border-gray-300&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;relative flex justify-center text-sm&quot;&gt;&#10;                  &lt;span className=&quot;px-2 bg-white text-gray-500&quot;&gt;Already have an account?&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;mt-6&quot;&gt;&#10;                &lt;Link&#10;                  to=&quot;/login&quot;&#10;                  className=&quot;w-full btn-secondary text-center block&quot;&#10;                &gt;&#10;                  Sign in instead&#10;                &lt;/Link&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Register;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/types/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/types/index.ts" />
              <option name="updatedContent" value="// User types&#10;export interface User {&#10;  _id: string;&#10;  name: string;&#10;  email: string;&#10;  phone?: string;&#10;  country?: string;&#10;  role: 'customer' | 'admin' | 'editor';&#10;  avatar?: string;&#10;  isVerified: boolean;&#10;  preferences: {&#10;    language: 'en' | 'vi';&#10;    currency: string;&#10;    newsletter: boolean;&#10;  };&#10;  bookingHistory: string[];&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;// Tour types&#10;export interface Tour {&#10;  _id: string;&#10;  title: string;&#10;  slug: string;&#10;  description: string;&#10;  shortDescription: string;&#10;  destination: string;&#10;  duration: {&#10;    days: number;&#10;    nights: number;&#10;  };&#10;  pricing: {&#10;    basePrice: number;&#10;    currency: string;&#10;    priceType: 'per_person' | 'per_group';&#10;    seasonalPricing: SeasonalPricing[];&#10;    groupDiscounts: GroupDiscount[];&#10;  };&#10;  itinerary: ItineraryDay[];&#10;  inclusions: string[];&#10;  exclusions: string[];&#10;  highlights: string[];&#10;  images: TourImage[];&#10;  videos: TourVideo[];&#10;  category: 'adventure' | 'luxury' | 'family' | 'cultural' | 'beach' | 'city' | 'nature';&#10;  difficulty: 'easy' | 'moderate' | 'challenging' | 'extreme';&#10;  maxGroupSize: number;&#10;  minAge: number;&#10;  availability: TourAvailability[];&#10;  location: {&#10;    coordinates: [number, number];&#10;    address: string;&#10;    city: string;&#10;    country: string;&#10;  };&#10;  status: 'draft' | 'published' | 'archived';&#10;  featured: boolean;&#10;  ratings: {&#10;    average: number;&#10;    count: number;&#10;  };&#10;  tags: string[];&#10;  seoData: {&#10;    metaTitle: string;&#10;    metaDescription: string;&#10;    keywords: string[];&#10;  };&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;export interface SeasonalPricing {&#10;  season: string;&#10;  startDate: string;&#10;  endDate: string;&#10;  multiplier: number;&#10;}&#10;&#10;export interface GroupDiscount {&#10;  minPeople: number;&#10;  discount: number;&#10;}&#10;&#10;export interface ItineraryDay {&#10;  day: number;&#10;  title: string;&#10;  description: string;&#10;  activities: string[];&#10;  meals: string[];&#10;  accommodation: string;&#10;}&#10;&#10;export interface TourImage {&#10;  url: string;&#10;  alt: string;&#10;  isPrimary: boolean;&#10;}&#10;&#10;export interface TourVideo {&#10;  url: string;&#10;  title: string;&#10;}&#10;&#10;export interface TourAvailability {&#10;  startDate: string;&#10;  endDate: string;&#10;  availableSpots: number;&#10;  bookedSpots: number;&#10;}&#10;&#10;// Booking types&#10;export interface Booking {&#10;  _id: string;&#10;  bookingNumber: string;&#10;  tour: Tour;&#10;  customer: User;&#10;  travelers: Traveler[];&#10;  bookingDetails: {&#10;    startDate: string;&#10;    endDate: string;&#10;    numberOfTravelers: {&#10;      adults: number;&#10;      children: number;&#10;      infants: number;&#10;    };&#10;    totalTravelers: number;&#10;  };&#10;  pricing: {&#10;    basePrice: number;&#10;    seasonalMultiplier?: number;&#10;    groupDiscount?: number;&#10;    addOns: AddOn[];&#10;    subtotal: number;&#10;    taxes: number;&#10;    totalAmount: number;&#10;    currency: string;&#10;  };&#10;  payment: {&#10;    status: 'pending' | 'paid' | 'partially_paid' | 'refunded' | 'failed';&#10;    method?: 'credit_card' | 'bank_transfer' | 'vnpay' | 'momo';&#10;    transactionId?: string;&#10;    paidAmount: number;&#10;    paymentDate?: string;&#10;    refundAmount: number;&#10;    refundDate?: string;&#10;  };&#10;  status: 'pending' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled';&#10;  specialRequests?: string;&#10;  emergencyContact?: {&#10;    name: string;&#10;    phone: string;&#10;    relationship: string;&#10;  };&#10;  documents: BookingDocument[];&#10;  notifications: {&#10;    confirmationSent: boolean;&#10;    reminderSent: boolean;&#10;    followUpSent: boolean;&#10;  };&#10;  createdBy?: string;&#10;  notes: BookingNote[];&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;export interface Traveler {&#10;  name: string;&#10;  age?: number;&#10;  type: 'adult' | 'child' | 'infant';&#10;  passportNumber?: string;&#10;  nationality?: string;&#10;  dietaryRequirements?: string;&#10;}&#10;&#10;export interface AddOn {&#10;  name: string;&#10;  price: number;&#10;  quantity: number;&#10;}&#10;&#10;export interface BookingDocument {&#10;  type: string;&#10;  url: string;&#10;  uploadDate: string;&#10;}&#10;&#10;export interface BookingNote {&#10;  content: string;&#10;  author: string;&#10;  createdAt: string;&#10;}&#10;&#10;// Review types&#10;export interface Review {&#10;  _id: string;&#10;  tour: string | Tour;&#10;  customer: string | User;&#10;  booking: string | Booking;&#10;  rating: number;&#10;  title: string;&#10;  content: string;&#10;  aspects: {&#10;    guide?: number;&#10;    accommodation?: number;&#10;    transport?: number;&#10;    value?: number;&#10;  };&#10;  photos: string[];&#10;  status: 'pending' | 'approved' | 'rejected';&#10;  featured: boolean;&#10;  helpful: number;&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;// Content types&#10;export interface Content {&#10;  _id: string;&#10;  type: 'page' | 'blog' | 'destination' | 'faq';&#10;  title: string;&#10;  slug: string;&#10;  content: string;&#10;  excerpt?: string;&#10;  featuredImage?: string;&#10;  gallery: string[];&#10;  author: string | User;&#10;  status: 'draft' | 'published' | 'archived';&#10;  featured: boolean;&#10;  categories: string[];&#10;  tags: string[];&#10;  language: 'en' | 'vi';&#10;  seoData: {&#10;    metaTitle: string;&#10;    metaDescription: string;&#10;    keywords: string[];&#10;  };&#10;  views: number;&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;// API Response types&#10;export interface ApiResponse&lt;T&gt; {&#10;  data?: T;&#10;  message: string;&#10;  success: boolean;&#10;}&#10;&#10;export interface PaginationResponse&lt;T&gt; {&#10;  data: T[];&#10;  pagination: {&#10;    currentPage: number;&#10;    totalPages: number;&#10;    totalItems: number;&#10;    totalTours?: number;&#10;    totalBookings?: number;&#10;    hasNext: boolean;&#10;    hasPrev: boolean;&#10;  };&#10;}&#10;&#10;// Fixed API response for tours specifically&#10;export interface ToursResponse {&#10;  tours: Tour[];&#10;  pagination: {&#10;    currentPage: number;&#10;    totalPages: number;&#10;    totalTours: number;&#10;    hasNext: boolean;&#10;    hasPrev: boolean;&#10;  };&#10;}&#10;&#10;// Form types&#10;export interface LoginForm {&#10;  email: string;&#10;  password: string;&#10;}&#10;&#10;export interface RegisterForm {&#10;  name: string;&#10;  email: string;&#10;  password: string;&#10;  confirmPassword: string;&#10;  phone?: string;&#10;  country?: string;&#10;}&#10;&#10;export interface BookingForm {&#10;  tourId: string;&#10;  startDate: string;&#10;  numberOfTravelers: {&#10;    adults: number;&#10;    children: number;&#10;    infants: number;&#10;  };&#10;  travelers: Traveler[];&#10;  specialRequests?: string;&#10;  emergencyContact?: {&#10;    name: string;&#10;    phone: string;&#10;    relationship: string;&#10;  };&#10;}&#10;&#10;export interface ContactForm {&#10;  name: string;&#10;  email: string;&#10;  phone?: string;&#10;  subject: string;&#10;  message: string;&#10;}&#10;&#10;// Filter types&#10;export interface TourFilters {&#10;  destination?: string;&#10;  category?: string;&#10;  minPrice?: number;&#10;  maxPrice?: number;&#10;  duration?: number;&#10;  sortBy?: string;&#10;  sortOrder?: 'asc' | 'desc';&#10;  search?: string;&#10;  page?: number;&#10;  limit?: number;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/utils/api.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/utils/api.ts" />
              <option name="updatedContent" value="import axios, { AxiosResponse } from 'axios';&#10;import {&#10;  User,&#10;  Tour,&#10;  Booking,&#10;  Review,&#10;  Content,&#10;  LoginForm,&#10;  RegisterForm,&#10;  BookingForm,&#10;  TourFilters,&#10;  ApiResponse,&#10;  PaginationResponse&#10;} from '../types';&#10;&#10;// Create axios instance&#10;const api = axios.create({&#10;  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',&#10;  headers: {&#10;    'Content-Type': 'application/json',&#10;  },&#10;});&#10;&#10;// Request interceptor to add auth token&#10;api.interceptors.request.use(&#10;  (config) =&gt; {&#10;    const token = localStorage.getItem('token');&#10;    if (token) {&#10;      config.headers.Authorization = `Bearer ${token}`;&#10;    }&#10;    return config;&#10;  },&#10;  (error) =&gt; {&#10;    return Promise.reject(error);&#10;  }&#10;);&#10;&#10;// Response interceptor to handle errors&#10;api.interceptors.response.use(&#10;  (response) =&gt; response,&#10;  (error) =&gt; {&#10;    if (error.response?.status === 401) {&#10;      localStorage.removeItem('token');&#10;      localStorage.removeItem('user');&#10;      window.location.href = '/login';&#10;    }&#10;    return Promise.reject(error);&#10;  }&#10;);&#10;&#10;// Auth API&#10;export const authAPI = {&#10;  login: async (data: LoginForm): Promise&lt;AxiosResponse&lt;{ token: string; user: User }&gt;&gt; =&gt; {&#10;    return api.post('/auth/login', data);&#10;  },&#10;&#10;  register: async (data: RegisterForm): Promise&lt;AxiosResponse&lt;{ token: string; user: User }&gt;&gt; =&gt; {&#10;    return api.post('/auth/register', data);&#10;  },&#10;&#10;  getProfile: async (): Promise&lt;AxiosResponse&lt;{ user: User }&gt;&gt; =&gt; {&#10;    return api.get('/auth/profile');&#10;  },&#10;&#10;  updateProfile: async (data: Partial&lt;User&gt;): Promise&lt;AxiosResponse&lt;{ user: User }&gt;&gt; =&gt; {&#10;    return api.put('/auth/profile', data);&#10;  },&#10;&#10;  changePassword: async (data: { currentPassword: string; newPassword: string }): Promise&lt;AxiosResponse&lt;ApiResponse&lt;any&gt;&gt;&gt; =&gt; {&#10;    return api.put('/auth/change-password', data);&#10;  },&#10;};&#10;&#10;// Tours API&#10;export const toursAPI = {&#10;  getTours: async (filters?: TourFilters): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Tour&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams();&#10;    if (filters) {&#10;      Object.entries(filters).forEach(([key, value]) =&gt; {&#10;        if (value !== undefined &amp;&amp; value !== null) {&#10;          params.append(key, value.toString());&#10;        }&#10;      });&#10;    }&#10;    return api.get(`/tours?${params.toString()}`);&#10;  },&#10;&#10;  getFeaturedTours: async (): Promise&lt;AxiosResponse&lt;{ tours: Tour[] }&gt;&gt; =&gt; {&#10;    return api.get('/tours/featured');&#10;  },&#10;&#10;  getTourBySlug: async (slug: string): Promise&lt;AxiosResponse&lt;{ tour: Tour }&gt;&gt; =&gt; {&#10;    return api.get(`/tours/${slug}`);&#10;  },&#10;&#10;  checkAvailability: async (tourId: string, startDate: string, groupSize: number): Promise&lt;AxiosResponse&lt;{ available: boolean; price: number; currency: string }&gt;&gt; =&gt; {&#10;    return api.get(`/tours/${tourId}/availability?startDate=${startDate}&amp;groupSize=${groupSize}`);&#10;  },&#10;&#10;  createTour: async (data: FormData): Promise&lt;AxiosResponse&lt;{ tour: Tour }&gt;&gt; =&gt; {&#10;    return api.post('/tours', data, {&#10;      headers: { 'Content-Type': 'multipart/form-data' },&#10;    });&#10;  },&#10;&#10;  updateTour: async (id: string, data: Partial&lt;Tour&gt;): Promise&lt;AxiosResponse&lt;{ tour: Tour }&gt;&gt; =&gt; {&#10;    return api.put(`/tours/${id}`, data);&#10;  },&#10;&#10;  deleteTour: async (id: string): Promise&lt;AxiosResponse&lt;ApiResponse&lt;any&gt;&gt;&gt; =&gt; {&#10;    return api.delete(`/tours/${id}`);&#10;  },&#10;};&#10;&#10;// Bookings API&#10;export const bookingsAPI = {&#10;  createBooking: async (data: BookingForm): Promise&lt;AxiosResponse&lt;{ booking: Booking }&gt;&gt; =&gt; {&#10;    return api.post('/bookings', data);&#10;  },&#10;&#10;  getUserBookings: async (page = 1, status?: string): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Booking&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (status) params.append('status', status);&#10;    return api.get(`/bookings?${params.toString()}`);&#10;  },&#10;&#10;  getBooking: async (id: string): Promise&lt;AxiosResponse&lt;{ booking: Booking }&gt;&gt; =&gt; {&#10;    return api.get(`/bookings/${id}`);&#10;  },&#10;&#10;  cancelBooking: async (id: string, reason: string): Promise&lt;AxiosResponse&lt;{ booking: Booking }&gt;&gt; =&gt; {&#10;    return api.put(`/bookings/${id}/cancel`, { reason });&#10;  },&#10;};&#10;&#10;// Payments API&#10;export const paymentsAPI = {&#10;  createPaymentIntent: async (bookingId: string): Promise&lt;AxiosResponse&lt;{ clientSecret: string; amount: number; currency: string }&gt;&gt; =&gt; {&#10;    return api.post('/payments/create-intent', { bookingId });&#10;  },&#10;&#10;  confirmPayment: async (data: { bookingId: string; paymentIntentId: string; paymentMethod: string }): Promise&lt;AxiosResponse&lt;{ booking: Booking }&gt;&gt; =&gt; {&#10;    return api.post('/payments/confirm', data);&#10;  },&#10;&#10;  createVNPayPayment: async (bookingId: string): Promise&lt;AxiosResponse&lt;{ paymentUrl: string; vnpayData: any }&gt;&gt; =&gt; {&#10;    return api.post('/payments/vnpay', { bookingId });&#10;  },&#10;};&#10;&#10;// Reviews API&#10;export const reviewsAPI = {&#10;  getReviews: async (tourId?: string, page = 1): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Review&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (tourId) params.append('tourId', tourId);&#10;    return api.get(`/reviews?${params.toString()}`);&#10;  },&#10;&#10;  createReview: async (data: Partial&lt;Review&gt;): Promise&lt;AxiosResponse&lt;{ review: Review }&gt;&gt; =&gt; {&#10;    return api.post('/reviews', data);&#10;  },&#10;&#10;  updateReview: async (id: string, data: Partial&lt;Review&gt;): Promise&lt;AxiosResponse&lt;{ review: Review }&gt;&gt; =&gt; {&#10;    return api.put(`/reviews/${id}`, data);&#10;  },&#10;&#10;  deleteReview: async (id: string): Promise&lt;AxiosResponse&lt;ApiResponse&lt;any&gt;&gt;&gt; =&gt; {&#10;    return api.delete(`/reviews/${id}`);&#10;  },&#10;};&#10;&#10;// Content API&#10;export const contentAPI = {&#10;  getContent: async (type?: string, page = 1): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Content&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (type) params.append('type', type);&#10;    return api.get(`/content?${params.toString()}`);&#10;  },&#10;&#10;  getContentBySlug: async (slug: string): Promise&lt;AxiosResponse&lt;{ content: Content }&gt;&gt; =&gt; {&#10;    return api.get(`/content/${slug}`);&#10;  },&#10;&#10;  createContent: async (data: Partial&lt;Content&gt;): Promise&lt;AxiosResponse&lt;{ content: Content }&gt;&gt; =&gt; {&#10;    return api.post('/content', data);&#10;  },&#10;&#10;  updateContent: async (id: string, data: Partial&lt;Content&gt;): Promise&lt;AxiosResponse&lt;{ content: Content }&gt;&gt; =&gt; {&#10;    return api.put(`/content/${id}`, data);&#10;  },&#10;&#10;  deleteContent: async (id: string): Promise&lt;AxiosResponse&lt;ApiResponse&lt;any&gt;&gt;&gt; =&gt; {&#10;    return api.delete(`/content/${id}`);&#10;  },&#10;};&#10;&#10;// Admin API&#10;export const adminAPI = {&#10;  getDashboardStats: async (): Promise&lt;AxiosResponse&lt;any&gt;&gt; =&gt; {&#10;    return api.get('/admin/dashboard');&#10;  },&#10;&#10;  getAllBookings: async (page = 1, filters?: any): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Booking&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (filters) {&#10;      Object.entries(filters).forEach(([key, value]) =&gt; {&#10;        if (value !== undefined &amp;&amp; value !== null) {&#10;          params.append(key, value.toString());&#10;        }&#10;      });&#10;    }&#10;    return api.get(`/admin/bookings?${params.toString()}`);&#10;  },&#10;&#10;  updateBookingStatus: async (id: string, status: string, notes?: string): Promise&lt;AxiosResponse&lt;{ booking: Booking }&gt;&gt; =&gt; {&#10;    return api.put(`/admin/bookings/${id}/status`, { status, notes });&#10;  },&#10;&#10;  getAllUsers: async (page = 1, filters?: any): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;User&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (filters) {&#10;      Object.entries(filters).forEach(([key, value]) =&gt; {&#10;        if (value !== undefined &amp;&amp; value !== null) {&#10;          params.append(key, value.toString());&#10;        }&#10;      });&#10;    }&#10;    return api.get(`/admin/users?${params.toString()}`);&#10;  },&#10;&#10;  getAllToursAdmin: async (page = 1, filters?: any): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Tour&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (filters) {&#10;      Object.entries(filters).forEach(([key, value]) =&gt; {&#10;        if (value !== undefined &amp;&amp; value !== null) {&#10;          params.append(key, value.toString());&#10;        }&#10;      });&#10;    }&#10;    return api.get(`/admin/tours?${params.toString()}`);&#10;  },&#10;&#10;  getAllReviews: async (page = 1, filters?: any): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Review&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (filters) {&#10;      Object.entries(filters).forEach(([key, value]) =&gt; {&#10;        if (value !== undefined &amp;&amp; value !== null) {&#10;          params.append(key, value.toString());&#10;        }&#10;      });&#10;    }&#10;    return api.get(`/admin/reviews?${params.toString()}`);&#10;  },&#10;&#10;  updateReviewStatus: async (id: string, status: string, featured?: boolean): Promise&lt;AxiosResponse&lt;{ review: Review }&gt;&gt; =&gt; {&#10;    return api.put(`/admin/reviews/${id}`, { status, featured });&#10;  },&#10;};&#10;&#10;// Fixed API response for tours specifically&#10;export interface ToursResponse {&#10;  tours: Tour[];&#10;  pagination: {&#10;    currentPage: number;&#10;    totalPages: number;&#10;    totalTours: number;&#10;    hasNext: boolean;&#10;    hasPrev: boolean;&#10;  };&#10;}&#10;&#10;export default api;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/tailwind.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/tailwind.config.js" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="/** @type {import('tailwindcss').Config} */&#10;module.exports = {&#10;  content: [&#10;    &quot;./src/**/*.{js,jsx,ts,tsx}&quot;,&#10;  ],&#10;  darkMode: 'class',&#10;  theme: {&#10;    extend: {&#10;      colors: {&#10;        primary: {&#10;          50: '#eff6ff',&#10;          100: '#dbeafe',&#10;          200: '#bfdbfe',&#10;          300: '#93c5fd',&#10;          400: '#60a5fa',&#10;          500: '#3b82f6',&#10;          600: '#2563eb',&#10;          700: '#1d4ed8',&#10;          800: '#1e40af',&#10;          900: '#1e3a8a',&#10;        },&#10;        secondary: {&#10;          50: '#f0fdfa',&#10;          100: '#ccfbf1',&#10;          200: '#99f6e4',&#10;          300: '#5eead4',&#10;          400: '#2dd4bf',&#10;          500: '#14b8a6',&#10;          600: '#0d9488',&#10;          700: '#0f766e',&#10;          800: '#115e59',&#10;          900: '#134e4a',&#10;        },&#10;        dark: {&#10;          50: '#f8fafc',&#10;          100: '#f1f5f9',&#10;          200: '#e2e8f0',&#10;          300: '#cbd5e1',&#10;          400: '#94a3b8',&#10;          500: '#64748b',&#10;          600: '#475569',&#10;          700: '#334155',&#10;          800: '#1e293b',&#10;          900: '#0f172a',&#10;        }&#10;      },&#10;      fontFamily: {&#10;        sans: ['Inter', 'system-ui', 'sans-serif'],&#10;        serif: ['Playfair Display', 'serif'],&#10;      },&#10;      animation: {&#10;        'fade-in': 'fadeIn 0.5s ease-in-out',&#10;        'slide-up': 'slideUp 0.5s ease-out',&#10;        'bounce-slow': 'bounce 2s infinite',&#10;      },&#10;      keyframes: {&#10;        fadeIn: {&#10;          '0%': { opacity: '0' },&#10;          '100%': { opacity: '1' },&#10;        },&#10;        slideUp: {&#10;          '0%': { transform: 'translateY(20px)', opacity: '0' },&#10;          '100%': { transform: 'translateY(0)', opacity: '1' },&#10;        },&#10;      },&#10;    },&#10;  },&#10;  plugins: [],&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/tsconfig.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/tsconfig.json" />
              <option name="originalContent" value="{&#10;  &quot;compilerOptions&quot;: {&#10;    &quot;target&quot;: &quot;es5&quot;,&#10;    &quot;lib&quot;: [&#10;      &quot;dom&quot;,&#10;      &quot;dom.iterable&quot;,&#10;      &quot;esnext&quot;&#10;    ],&#10;    &quot;allowJs&quot;: true,&#10;    &quot;skipLibCheck&quot;: true,&#10;    &quot;esModuleInterop&quot;: true,&#10;    &quot;allowSyntheticDefaultImports&quot;: true,&#10;    &quot;strict&quot;: true,&#10;    &quot;forceConsistentCasingInFileNames&quot;: true,&#10;    &quot;noFallthroughCasesInSwitch&quot;: true,&#10;    &quot;module&quot;: &quot;esnext&quot;,&#10;    &quot;moduleResolution&quot;: &quot;node&quot;,&#10;    &quot;resolveJsonModule&quot;: true,&#10;    &quot;isolatedModules&quot;: true,&#10;    &quot;noEmit&quot;: true,&#10;    &quot;jsx&quot;: &quot;react-jsx&quot;,&#10;    &quot;paths&quot;: {&#10;      &quot;react&quot;: [ &quot;./node_modules/@types/react&quot; ]&#10;    }&#10;  &quot;include&quot;: [&#10;    &quot;src&quot;&#10;  ]&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;compilerOptions&quot;: {&#10;    &quot;target&quot;: &quot;es5&quot;,&#10;    &quot;lib&quot;: [&#10;      &quot;dom&quot;,&#10;      &quot;dom.iterable&quot;,&#10;      &quot;esnext&quot;&#10;    ],&#10;    &quot;allowJs&quot;: true,&#10;    &quot;skipLibCheck&quot;: true,&#10;    &quot;esModuleInterop&quot;: true,&#10;    &quot;allowSyntheticDefaultImports&quot;: true,&#10;    &quot;strict&quot;: false,&#10;    &quot;forceConsistentCasingInFileNames&quot;: true,&#10;    &quot;noFallthroughCasesInSwitch&quot;: true,&#10;    &quot;module&quot;: &quot;esnext&quot;,&#10;    &quot;moduleResolution&quot;: &quot;node&quot;,&#10;    &quot;resolveJsonModule&quot;: true,&#10;    &quot;isolatedModules&quot;: true,&#10;    &quot;noEmit&quot;: true,&#10;    &quot;jsx&quot;: &quot;react-jsx&quot;,&#10;    &quot;paths&quot;: {&#10;      &quot;react&quot;: [ &quot;./node_modules/@types/react&quot; ]&#10;    },&#10;    &quot;typeRoots&quot;: [&quot;./node_modules/@types&quot;]&#10;  },&#10;  &quot;include&quot;: [&#10;    &quot;src&quot;&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schema.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schema.sql" />
              <option name="updatedContent" value="-- Database schema for Travelling Website using Cloudflare D1&#10;&#10;-- Users table&#10;CREATE TABLE IF NOT EXISTS users (&#10;  id TEXT PRIMARY KEY,&#10;  name TEXT NOT NULL,&#10;  email TEXT UNIQUE NOT NULL,&#10;  password TEXT NOT NULL,&#10;  role TEXT DEFAULT 'user',&#10;  phone TEXT,&#10;  address TEXT,&#10;  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- Tours table&#10;CREATE TABLE IF NOT EXISTS tours (&#10;  id TEXT PRIMARY KEY,&#10;  title TEXT NOT NULL,&#10;  description TEXT,&#10;  price REAL NOT NULL,&#10;  duration TEXT,&#10;  location TEXT,&#10;  max_participants INTEGER,&#10;  difficulty_level TEXT,&#10;  image_url TEXT,&#10;  images TEXT, -- JSON array of image URLs&#10;  itinerary TEXT, -- JSON object&#10;  included TEXT, -- JSON array&#10;  excluded TEXT, -- JSON array&#10;  status TEXT DEFAULT 'active',&#10;  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- Bookings table&#10;CREATE TABLE IF NOT EXISTS bookings (&#10;  id TEXT PRIMARY KEY,&#10;  user_id TEXT NOT NULL,&#10;  tour_id TEXT NOT NULL,&#10;  booking_date DATE NOT NULL,&#10;  participants INTEGER NOT NULL,&#10;  total_amount REAL NOT NULL,&#10;  status TEXT DEFAULT 'pending',&#10;  payment_status TEXT DEFAULT 'pending',&#10;  payment_intent_id TEXT,&#10;  special_requests TEXT,&#10;  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;  FOREIGN KEY (user_id) REFERENCES users (id),&#10;  FOREIGN KEY (tour_id) REFERENCES tours (id)&#10;);&#10;&#10;-- Reviews table&#10;CREATE TABLE IF NOT EXISTS reviews (&#10;  id TEXT PRIMARY KEY,&#10;  user_id TEXT NOT NULL,&#10;  tour_id TEXT NOT NULL,&#10;  rating INTEGER NOT NULL CHECK (rating &gt;= 1 AND rating &lt;= 5),&#10;  comment TEXT,&#10;  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;  FOREIGN KEY (user_id) REFERENCES users (id),&#10;  FOREIGN KEY (tour_id) REFERENCES tours (id)&#10;);&#10;&#10;-- Content table for CMS&#10;CREATE TABLE IF NOT EXISTS content (&#10;  id TEXT PRIMARY KEY,&#10;  type TEXT NOT NULL,&#10;  title TEXT,&#10;  content TEXT,&#10;  image_url TEXT,&#10;  status TEXT DEFAULT 'published',&#10;  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- Indexes for better performance&#10;CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);&#10;CREATE INDEX IF NOT EXISTS idx_tours_status ON tours(status);&#10;CREATE INDEX IF NOT EXISTS idx_tours_location ON tours(location);&#10;CREATE INDEX IF NOT EXISTS idx_bookings_user_id ON bookings(user_id);&#10;CREATE INDEX IF NOT EXISTS idx_bookings_tour_id ON bookings(tour_id);&#10;CREATE INDEX IF NOT EXISTS idx_bookings_status ON bookings(status);&#10;CREATE INDEX IF NOT EXISTS idx_reviews_tour_id ON reviews(tour_id);&#10;CREATE INDEX IF NOT EXISTS idx_reviews_user_id ON reviews(user_id);&#10;CREATE INDEX IF NOT EXISTS idx_content_type ON content(type);&#10;CREATE INDEX IF NOT EXISTS idx_content_status ON content(status);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/setup-cloudflare.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/setup-cloudflare.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;&#10;# Cloudflare D1 and R2 Setup Script for Travelling Website&#10;&#10;echo &quot; Setting up Cloudflare D1 Database and R2 Storage...&quot;&#10;&#10;# Step 1: Create D1 Database&#10;echo &quot; Creating D1 Database...&quot;&#10;wrangler d1 create travelling-website-db&#10;&#10;echo &quot; Please copy the database ID from above and update wrangler.toml&quot;&#10;echo &quot;Update the database_id in wrangler.toml with the ID shown above&quot;&#10;&#10;# Step 2: Create R2 Bucket&#10;echo &quot;️ Creating R2 Bucket...&quot;&#10;wrangler r2 bucket create travelling-website-images&#10;&#10;# Step 3: Execute Database Schema&#10;echo &quot;️ Setting up database schema...&quot;&#10;wrangler d1 execute travelling-website-db --file=./schema.sql&#10;&#10;# Step 4: Install dependencies&#10;echo &quot; Installing backend dependencies...&quot;&#10;cd backend&#10;npm install&#10;&#10;# Step 5: Build and deploy&#10;echo &quot;️ Building and deploying...&quot;&#10;cd ..&#10;wrangler deploy&#10;&#10;echo &quot;✅ Setup complete!&quot;&#10;echo &quot;&quot;&#10;echo &quot;Next steps:&quot;&#10;echo &quot;1. Update your wrangler.toml with the D1 database ID&quot;&#10;echo &quot;2. Configure your R2 custom domain (optional)&quot;&#10;echo &quot;3. Set up environment variables in Cloudflare Workers dashboard&quot;&#10;echo &quot;4. Test your deployment&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/wrangler.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/wrangler.toml" />
              <option name="originalContent" value="name = &quot;travelling-website&quot;&#10;compatibility_date = &quot;2024-08-15&quot;&#10;compatibility_flags = [&quot;nodejs_compat&quot;]&#10;&#10;[assets]&#10;directory = &quot;./frontend/build&quot;&#10;&#10;[build]&#10;command = &quot;cd frontend &amp;&amp; npm ci &amp;&amp; npm run build&quot;&#10;&#10;[env.production.vars]&#10;REACT_APP_API_URL = &quot;https://travelling-website-mu.vercel.app/api&quot;&#10;REACT_APP_STRIPE_PUBLIC_KEY = &quot;&quot;&#10;&#10;# Custom domain routes for phongphan.me (without wildcards)&#10;[[routes]]&#10;pattern = &quot;phongphan.me&quot;&#10;custom_domain = true&#10;&#10;[[routes]]&#10;pattern = &quot;www.phongphan.me&quot;&#10;custom_domain = true&#10;" />
              <option name="updatedContent" value="name = &quot;travelling-website&quot;&#13;&#10;compatibility_date = &quot;2024-08-15&quot;&#13;&#10;compatibility_flags = [&quot;nodejs_compat&quot;]&#13;&#10;&#13;&#10;# D1 Database Configuration&#13;&#10;[[d1_databases]]&#13;&#10;binding = &quot;DB&quot;&#13;&#10;database_name = &quot;travelling-website-db&quot;&#13;&#10;database_id = &quot;your-d1-database-id-here&quot;&#13;&#10;&#13;&#10;# R2 Storage Configuration&#13;&#10;[[r2_buckets]]&#13;&#10;binding = &quot;IMAGES&quot;&#13;&#10;bucket_name = &quot;travelling-website-images&quot;&#13;&#10;&#13;&#10;[assets]&#13;&#10;directory = &quot;./frontend/build&quot;&#13;&#10;&#13;&#10;[build]&#13;&#10;command = &quot;cd frontend &amp;&amp; npm ci &amp;&amp; npm run build&quot;&#13;&#10;&#13;&#10;[env.production.vars]&#13;&#10;REACT_APP_API_URL = &quot;https://travelling-website-mu.vercel.app/api&quot;&#13;&#10;REACT_APP_STRIPE_PUBLIC_KEY = &quot;&quot;&#13;&#10;&#13;&#10;# Custom domain routes for phongphan.me (without wildcards)&#13;&#10;[[routes]]&#13;&#10;pattern = &quot;phongphan.me&quot;&#13;&#10;custom_domain = true&#13;&#10;&#13;&#10;[[routes]]&#13;&#10;pattern = &quot;www.phongphan.me&quot;&#13;&#10;custom_domain = true" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>