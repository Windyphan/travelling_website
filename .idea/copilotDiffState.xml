<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="updatedContent" value="# Use Node.js LTS version&#10;FROM node:18-alpine&#10;&#10;# Set working directory&#10;WORKDIR /app&#10;&#10;# Copy package files&#10;COPY package*.json ./&#10;COPY backend/package*.json ./backend/&#10;&#10;# Install dependencies&#10;RUN npm install&#10;RUN cd backend &amp;&amp; npm install&#10;&#10;# Copy source code&#10;COPY . .&#10;&#10;# Expose port&#10;EXPOSE 5000&#10;&#10;# Set environment to production&#10;ENV NODE_ENV=production&#10;&#10;# Start the server&#10;CMD [&quot;node&quot;, &quot;backend/server.js&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/.env" />
              <option name="updatedContent" value="# Development Environment Variables&#10;NODE_ENV=development&#10;PORT=5000&#10;&#10;# Database&#10;MONGODB_URI=mongodb://localhost:27017/travelling_website&#10;&#10;# JWT Secret (Change this in production!)&#10;JWT_SECRET=your_super_secret_jwt_key_change_in_production_please&#10;&#10;# Client URL&#10;CLIENT_URL=http://localhost:3000&#10;&#10;# Email Configuration (Gmail example)&#10;EMAIL_HOST=smtp.gmail.com&#10;EMAIL_PORT=587&#10;EMAIL_USER=your_email@gmail.com&#10;EMAIL_PASS=your_gmail_app_password&#10;&#10;# Payment Gateway - Stripe (Get from https://stripe.com)&#10;STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here&#10;STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here&#10;STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret&#10;&#10;# Vietnamese Payment Gateway (Get from VNPay)&#10;VNPAY_TMN_CODE=your_vnpay_tmn_code&#10;VNPAY_SECRET_KEY=your_vnpay_secret_key&#10;&#10;# File Upload Configuration&#10;MAX_FILE_SIZE=10485760&#10;UPLOAD_PATH=./uploads&#10;&#10;# Admin Configuration&#10;ADMIN_EMAIL=admin@travelcompany.com&#10;COMPANY_NAME=TravelCo&#10;COMPANY_PHONE=+84-123-456-789&#10;COMPANY_ADDRESS=123 Travel Street, Ho Chi Minh City, Vietnam" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/config/database.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/config/database.js" />
              <option name="updatedContent" value="const mongoose = require('mongoose');&#10;&#10;const connectDB = async () =&gt; {&#10;  try {&#10;    const conn = await mongoose.connect(process.env.MONGODB_URI, {&#10;      useNewUrlParser: true,&#10;      useUnifiedTopology: true,&#10;    });&#10;&#10;    console.log(`MongoDB Connected: ${conn.connection.host}`);&#10;  } catch (error) {&#10;    console.error('Database connection error:', error.message);&#10;    process.exit(1);&#10;  }&#10;};&#10;&#10;module.exports = connectDB;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/controllers/adminController.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/controllers/adminController.js" />
              <option name="updatedContent" value="const Booking = require('../models/Booking');&#10;const Tour = require('../models/Tour');&#10;const User = require('../models/User');&#10;const Review = require('../models/Review');&#10;const Content = require('../models/Content');&#10;&#10;// Dashboard analytics&#10;const getDashboardStats = async (req, res) =&gt; {&#10;  try {&#10;    const now = new Date();&#10;    const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);&#10;    const lastMonth = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);&#10;&#10;    // Total counts&#10;    const totalBookings = await Booking.countDocuments();&#10;    const totalTours = await Tour.countDocuments();&#10;    const totalCustomers = await User.countDocuments({ role: 'customer' });&#10;    const totalRevenue = await Booking.aggregate([&#10;      { $match: { 'payment.status': 'paid' } },&#10;      { $group: { _id: null, total: { $sum: '$pricing.totalAmount' } } }&#10;    ]);&#10;&#10;    // Recent stats&#10;    const weeklyBookings = await Booking.countDocuments({ &#10;      createdAt: { $gte: lastWeek } &#10;    });&#10;    const monthlyRevenue = await Booking.aggregate([&#10;      { &#10;        $match: { &#10;          'payment.status': 'paid',&#10;          'payment.paymentDate': { $gte: lastMonth }&#10;        } &#10;      },&#10;      { $group: { _id: null, total: { $sum: '$pricing.totalAmount' } } }&#10;    ]);&#10;&#10;    // Recent bookings&#10;    const recentBookings = await Booking.find()&#10;      .populate('tour', 'title')&#10;      .populate('customer', 'name email')&#10;      .sort({ createdAt: -1 })&#10;      .limit(10);&#10;&#10;    // Popular tours&#10;    const popularTours = await Tour.aggregate([&#10;      { $match: { status: 'published' } },&#10;      { $sort: { 'ratings.average': -1, 'ratings.count': -1 } },&#10;      { $limit: 5 },&#10;      { $project: { title: 1, 'ratings.average': 1, 'ratings.count': 1 } }&#10;    ]);&#10;&#10;    res.json({&#10;      stats: {&#10;        totalBookings,&#10;        totalTours,&#10;        totalCustomers,&#10;        totalRevenue: totalRevenue[0]?.total || 0,&#10;        weeklyBookings,&#10;        monthlyRevenue: monthlyRevenue[0]?.total || 0&#10;      },&#10;      recentBookings,&#10;      popularTours&#10;    });&#10;  } catch (error) {&#10;    console.error('Dashboard stats error:', error);&#10;    res.status(500).json({ message: 'Server error fetching dashboard stats' });&#10;  }&#10;};&#10;&#10;// Get all bookings for admin&#10;const getAllBookings = async (req, res) =&gt; {&#10;  try {&#10;    const {&#10;      page = 1,&#10;      limit = 20,&#10;      status,&#10;      paymentStatus,&#10;      startDate,&#10;      endDate,&#10;      search&#10;    } = req.query;&#10;&#10;    const filter = {};&#10;    if (status) filter.status = status;&#10;    if (paymentStatus) filter['payment.status'] = paymentStatus;&#10;    if (startDate &amp;&amp; endDate) {&#10;      filter.createdAt = {&#10;        $gte: new Date(startDate),&#10;        $lte: new Date(endDate)&#10;      };&#10;    }&#10;    if (search) {&#10;      filter.$or = [&#10;        { bookingNumber: new RegExp(search, 'i') },&#10;        { 'customer.name': new RegExp(search, 'i') },&#10;        { 'customer.email': new RegExp(search, 'i') }&#10;      ];&#10;    }&#10;&#10;    const bookings = await Booking.find(filter)&#10;      .populate('tour', 'title destination duration')&#10;      .populate('customer', 'name email phone')&#10;      .sort({ createdAt: -1 })&#10;      .limit(limit * 1)&#10;      .skip((page - 1) * limit);&#10;&#10;    const total = await Booking.countDocuments(filter);&#10;&#10;    res.json({&#10;      bookings,&#10;      pagination: {&#10;        currentPage: Number(page),&#10;        totalPages: Math.ceil(total / limit),&#10;        totalBookings: total&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Get all bookings error:', error);&#10;    res.status(500).json({ message: 'Server error fetching bookings' });&#10;  }&#10;};&#10;&#10;// Update booking status&#10;const updateBookingStatus = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    const { status, notes } = req.body;&#10;&#10;    const booking = await Booking.findById(id);&#10;    if (!booking) {&#10;      return res.status(404).json({ message: 'Booking not found' });&#10;    }&#10;&#10;    booking.status = status;&#10;    if (notes) {&#10;      booking.notes.push({&#10;        content: notes,&#10;        author: req.user.id&#10;      });&#10;    }&#10;&#10;    await booking.save();&#10;&#10;    res.json({&#10;      message: 'Booking status updated successfully',&#10;      booking&#10;    });&#10;  } catch (error) {&#10;    console.error('Update booking status error:', error);&#10;    res.status(500).json({ message: 'Server error updating booking status' });&#10;  }&#10;};&#10;&#10;// Get all users&#10;const getAllUsers = async (req, res) =&gt; {&#10;  try {&#10;    const { page = 1, limit = 20, role, search } = req.query;&#10;&#10;    const filter = {};&#10;    if (role) filter.role = role;&#10;    if (search) {&#10;      filter.$or = [&#10;        { name: new RegExp(search, 'i') },&#10;        { email: new RegExp(search, 'i') }&#10;      ];&#10;    }&#10;&#10;    const users = await User.find(filter)&#10;      .select('-password')&#10;      .populate('bookingHistory', 'bookingNumber status pricing.totalAmount')&#10;      .sort({ createdAt: -1 })&#10;      .limit(limit * 1)&#10;      .skip((page - 1) * limit);&#10;&#10;    const total = await User.countDocuments(filter);&#10;&#10;    res.json({&#10;      users,&#10;      pagination: {&#10;        currentPage: Number(page),&#10;        totalPages: Math.ceil(total / limit),&#10;        totalUsers: total&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Get all users error:', error);&#10;    res.status(500).json({ message: 'Server error fetching users' });&#10;  }&#10;};&#10;&#10;// Get all tours for admin&#10;const getAllToursAdmin = async (req, res) =&gt; {&#10;  try {&#10;    const { page = 1, limit = 20, status, category, search } = req.query;&#10;&#10;    const filter = {};&#10;    if (status) filter.status = status;&#10;    if (category) filter.category = category;&#10;    if (search) {&#10;      filter.$or = [&#10;        { title: new RegExp(search, 'i') },&#10;        { destination: new RegExp(search, 'i') }&#10;      ];&#10;    }&#10;&#10;    const tours = await Tour.find(filter)&#10;      .sort({ createdAt: -1 })&#10;      .limit(limit * 1)&#10;      .skip((page - 1) * limit);&#10;&#10;    const total = await Tour.countDocuments(filter);&#10;&#10;    res.json({&#10;      tours,&#10;      pagination: {&#10;        currentPage: Number(page),&#10;        totalPages: Math.ceil(total / limit),&#10;        totalTours: total&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Get all tours admin error:', error);&#10;    res.status(500).json({ message: 'Server error fetching tours' });&#10;  }&#10;};&#10;&#10;// Get all reviews for admin&#10;const getAllReviews = async (req, res) =&gt; {&#10;  try {&#10;    const { page = 1, limit = 20, status, rating } = req.query;&#10;&#10;    const filter = {};&#10;    if (status) filter.status = status;&#10;    if (rating) filter.rating = Number(rating);&#10;&#10;    const reviews = await Review.find(filter)&#10;      .populate('tour', 'title')&#10;      .populate('customer', 'name email')&#10;      .sort({ createdAt: -1 })&#10;      .limit(limit * 1)&#10;      .skip((page - 1) * limit);&#10;&#10;    const total = await Review.countDocuments(filter);&#10;&#10;    res.json({&#10;      reviews,&#10;      pagination: {&#10;        currentPage: Number(page),&#10;        totalPages: Math.ceil(total / limit),&#10;        totalReviews: total&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Get all reviews error:', error);&#10;    res.status(500).json({ message: 'Server error fetching reviews' });&#10;  }&#10;};&#10;&#10;// Update review status&#10;const updateReviewStatus = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    const { status, featured } = req.body;&#10;&#10;    const review = await Review.findByIdAndUpdate(&#10;      id,&#10;      { status, featured },&#10;      { new: true }&#10;    ).populate('tour', 'title').populate('customer', 'name');&#10;&#10;    if (!review) {&#10;      return res.status(404).json({ message: 'Review not found' });&#10;    }&#10;&#10;    res.json({&#10;      message: 'Review updated successfully',&#10;      review&#10;    });&#10;  } catch (error) {&#10;    console.error('Update review status error:', error);&#10;    res.status(500).json({ message: 'Server error updating review' });&#10;  }&#10;};&#10;&#10;module.exports = {&#10;  getDashboardStats,&#10;  getAllBookings,&#10;  updateBookingStatus,&#10;  getAllUsers,&#10;  getAllToursAdmin,&#10;  getAllReviews,&#10;  updateReviewStatus&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/controllers/authController.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/controllers/authController.js" />
              <option name="updatedContent" value="const jwt = require('jsonwebtoken');&#10;const bcrypt = require('bcryptjs');&#10;const User = require('../models/User');&#10;const Joi = require('joi');&#10;&#10;// Validation schemas&#10;const registerSchema = Joi.object({&#10;  name: Joi.string().min(2).max(50).required(),&#10;  email: Joi.string().email().required(),&#10;  password: Joi.string().min(6).required(),&#10;  phone: Joi.string().optional(),&#10;  country: Joi.string().optional()&#10;});&#10;&#10;const loginSchema = Joi.object({&#10;  email: Joi.string().email().required(),&#10;  password: Joi.string().required()&#10;});&#10;&#10;// Generate JWT token&#10;const generateToken = (userId) =&gt; {&#10;  return jwt.sign({ id: userId }, process.env.JWT_SECRET, {&#10;    expiresIn: '7d'&#10;  });&#10;};&#10;&#10;// Register new user&#10;const register = async (req, res) =&gt; {&#10;  try {&#10;    const { error } = registerSchema.validate(req.body);&#10;    if (error) {&#10;      return res.status(400).json({ message: error.details[0].message });&#10;    }&#10;&#10;    const { name, email, password, phone, country } = req.body;&#10;&#10;    // Check if user already exists&#10;    const existingUser = await User.findOne({ email });&#10;    if (existingUser) {&#10;      return res.status(400).json({ message: 'User already exists with this email' });&#10;    }&#10;&#10;    // Create new user&#10;    const user = new User({&#10;      name,&#10;      email,&#10;      password,&#10;      phone,&#10;      country&#10;    });&#10;&#10;    await user.save();&#10;&#10;    // Generate token&#10;    const token = generateToken(user._id);&#10;&#10;    res.status(201).json({&#10;      message: 'User registered successfully',&#10;      token,&#10;      user: {&#10;        id: user._id,&#10;        name: user.name,&#10;        email: user.email,&#10;        role: user.role&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Registration error:', error);&#10;    res.status(500).json({ message: 'Server error during registration' });&#10;  }&#10;};&#10;&#10;// Login user&#10;const login = async (req, res) =&gt; {&#10;  try {&#10;    const { error } = loginSchema.validate(req.body);&#10;    if (error) {&#10;      return res.status(400).json({ message: error.details[0].message });&#10;    }&#10;&#10;    const { email, password } = req.body;&#10;&#10;    // Find user&#10;    const user = await User.findOne({ email });&#10;    if (!user) {&#10;      return res.status(401).json({ message: 'Invalid email or password' });&#10;    }&#10;&#10;    // Check password&#10;    const isMatch = await user.comparePassword(password);&#10;    if (!isMatch) {&#10;      return res.status(401).json({ message: 'Invalid email or password' });&#10;    }&#10;&#10;    // Generate token&#10;    const token = generateToken(user._id);&#10;&#10;    res.json({&#10;      message: 'Login successful',&#10;      token,&#10;      user: {&#10;        id: user._id,&#10;        name: user.name,&#10;        email: user.email,&#10;        role: user.role,&#10;        preferences: user.preferences&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Login error:', error);&#10;    res.status(500).json({ message: 'Server error during login' });&#10;  }&#10;};&#10;&#10;// Get current user profile&#10;const getProfile = async (req, res) =&gt; {&#10;  try {&#10;    const user = await User.findById(req.user.id)&#10;      .select('-password')&#10;      .populate('bookingHistory');&#10;&#10;    res.json({ user });&#10;  } catch (error) {&#10;    console.error('Profile fetch error:', error);&#10;    res.status(500).json({ message: 'Server error fetching profile' });&#10;  }&#10;};&#10;&#10;// Update user profile&#10;const updateProfile = async (req, res) =&gt; {&#10;  try {&#10;    const allowedUpdates = ['name', 'phone', 'country', 'preferences'];&#10;    const updates = {};&#10;&#10;    Object.keys(req.body).forEach(key =&gt; {&#10;      if (allowedUpdates.includes(key)) {&#10;        updates[key] = req.body[key];&#10;      }&#10;    });&#10;&#10;    const user = await User.findByIdAndUpdate(&#10;      req.user.id,&#10;      { $set: updates },&#10;      { new: true, runValidators: true }&#10;    ).select('-password');&#10;&#10;    res.json({&#10;      message: 'Profile updated successfully',&#10;      user&#10;    });&#10;  } catch (error) {&#10;    console.error('Profile update error:', error);&#10;    res.status(500).json({ message: 'Server error updating profile' });&#10;  }&#10;};&#10;&#10;// Change password&#10;const changePassword = async (req, res) =&gt; {&#10;  try {&#10;    const { currentPassword, newPassword } = req.body;&#10;&#10;    if (!currentPassword || !newPassword) {&#10;      return res.status(400).json({ message: 'Current and new passwords are required' });&#10;    }&#10;&#10;    const user = await User.findById(req.user.id);&#10;    &#10;    // Verify current password&#10;    const isMatch = await user.comparePassword(currentPassword);&#10;    if (!isMatch) {&#10;      return res.status(401).json({ message: 'Current password is incorrect' });&#10;    }&#10;&#10;    // Update password&#10;    user.password = newPassword;&#10;    await user.save();&#10;&#10;    res.json({ message: 'Password updated successfully' });&#10;  } catch (error) {&#10;    console.error('Password change error:', error);&#10;    res.status(500).json({ message: 'Server error changing password' });&#10;  }&#10;};&#10;&#10;module.exports = {&#10;  register,&#10;  login,&#10;  getProfile,&#10;  updateProfile,&#10;  changePassword&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/controllers/bookingController.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/controllers/bookingController.js" />
              <option name="updatedContent" value="const Booking = require('../models/Booking');&#10;const Tour = require('../models/Tour');&#10;const User = require('../models/User');&#10;const nodemailer = require('nodemailer');&#10;&#10;// Create email transporter&#10;const createEmailTransporter = () =&gt; {&#10;  return nodemailer.createTransporter({&#10;    host: process.env.EMAIL_HOST,&#10;    port: process.env.EMAIL_PORT,&#10;    secure: false,&#10;    auth: {&#10;      user: process.env.EMAIL_USER,&#10;      pass: process.env.EMAIL_PASS&#10;    }&#10;  });&#10;};&#10;&#10;// Send booking confirmation email&#10;const sendConfirmationEmail = async (booking, customer, tour) =&gt; {&#10;  try {&#10;    const transporter = createEmailTransporter();&#10;    &#10;    const emailTemplate = `&#10;      &lt;h2&gt;Booking Confirmation - ${tour.title}&lt;/h2&gt;&#10;      &lt;p&gt;Dear ${customer.name},&lt;/p&gt;&#10;      &lt;p&gt;Thank you for booking with us! Your booking has been confirmed.&lt;/p&gt;&#10;      &#10;      &lt;h3&gt;Booking Details:&lt;/h3&gt;&#10;      &lt;ul&gt;&#10;        &lt;li&gt;&lt;strong&gt;Booking Number:&lt;/strong&gt; ${booking.bookingNumber}&lt;/li&gt;&#10;        &lt;li&gt;&lt;strong&gt;Tour:&lt;/strong&gt; ${tour.title}&lt;/li&gt;&#10;        &lt;li&gt;&lt;strong&gt;Start Date:&lt;/strong&gt; ${booking.bookingDetails.startDate.toDateString()}&lt;/li&gt;&#10;        &lt;li&gt;&lt;strong&gt;Duration:&lt;/strong&gt; ${tour.duration.days} days / ${tour.duration.nights} nights&lt;/li&gt;&#10;        &lt;li&gt;&lt;strong&gt;Travelers:&lt;/strong&gt; ${booking.bookingDetails.totalTravelers}&lt;/li&gt;&#10;        &lt;li&gt;&lt;strong&gt;Total Amount:&lt;/strong&gt; ${booking.pricing.currency} ${booking.pricing.totalAmount}&lt;/li&gt;&#10;      &lt;/ul&gt;&#10;      &#10;      &lt;p&gt;We will contact you soon with more details about your trip.&lt;/p&gt;&#10;      &lt;p&gt;Best regards,&lt;br&gt;${process.env.COMPANY_NAME}&lt;/p&gt;&#10;    `;&#10;&#10;    await transporter.sendMail({&#10;      from: process.env.EMAIL_USER,&#10;      to: customer.email,&#10;      subject: `Booking Confirmation - ${booking.bookingNumber}`,&#10;      html: emailTemplate&#10;    });&#10;  } catch (error) {&#10;    console.error('Email sending error:', error);&#10;  }&#10;};&#10;&#10;// Create new booking&#10;const createBooking = async (req, res) =&gt; {&#10;  try {&#10;    const {&#10;      tourId,&#10;      startDate,&#10;      numberOfTravelers,&#10;      travelers,&#10;      specialRequests,&#10;      emergencyContact&#10;    } = req.body;&#10;&#10;    // Validate tour exists and is available&#10;    const tour = await Tour.findById(tourId);&#10;    if (!tour) {&#10;      return res.status(404).json({ message: 'Tour not found' });&#10;    }&#10;&#10;    const totalTravelers = numberOfTravelers.adults + numberOfTravelers.children + numberOfTravelers.infants;&#10;    &#10;    // Check availability&#10;    if (!tour.checkAvailability(new Date(startDate), totalTravelers)) {&#10;      return res.status(400).json({ message: 'Tour not available for selected date and group size' });&#10;    }&#10;&#10;    // Calculate pricing&#10;    const basePrice = tour.calculatePrice(new Date(startDate), totalTravelers);&#10;    const subtotal = basePrice * totalTravelers;&#10;    const taxes = subtotal * 0.1; // 10% tax&#10;    const totalAmount = subtotal + taxes;&#10;&#10;    // Calculate end date&#10;    const endDate = new Date(startDate);&#10;    endDate.setDate(endDate.getDate() + tour.duration.days - 1);&#10;&#10;    // Create booking&#10;    const booking = new Booking({&#10;      tour: tourId,&#10;      customer: req.user.id,&#10;      travelers,&#10;      bookingDetails: {&#10;        startDate: new Date(startDate),&#10;        endDate,&#10;        numberOfTravelers,&#10;        totalTravelers&#10;      },&#10;      pricing: {&#10;        basePrice,&#10;        subtotal,&#10;        taxes,&#10;        totalAmount,&#10;        currency: tour.pricing.currency&#10;      },&#10;      specialRequests,&#10;      emergencyContact&#10;    });&#10;&#10;    await booking.save();&#10;&#10;    // Update tour availability&#10;    const availability = tour.availability.find(slot =&gt; {&#10;      const bookingDate = new Date(startDate);&#10;      return bookingDate &gt;= slot.startDate &amp;&amp; bookingDate &lt;= slot.endDate;&#10;    });&#10;    &#10;    if (availability) {&#10;      availability.bookedSpots += totalTravelers;&#10;      await tour.save();&#10;    }&#10;&#10;    // Add booking to user's history&#10;    await User.findByIdAndUpdate(&#10;      req.user.id,&#10;      { $push: { bookingHistory: booking._id } }&#10;    );&#10;&#10;    // Populate booking for response&#10;    await booking.populate(['tour', 'customer']);&#10;&#10;    // Send confirmation email&#10;    sendConfirmationEmail(booking, req.user, tour);&#10;&#10;    res.status(201).json({&#10;      message: 'Booking created successfully',&#10;      booking&#10;    });&#10;  } catch (error) {&#10;    console.error('Create booking error:', error);&#10;    res.status(500).json({ message: 'Server error creating booking' });&#10;  }&#10;};&#10;&#10;// Get user's bookings&#10;const getUserBookings = async (req, res) =&gt; {&#10;  try {&#10;    const { page = 1, limit = 10, status } = req.query;&#10;    &#10;    const filter = { customer: req.user.id };&#10;    if (status) filter.status = status;&#10;&#10;    const bookings = await Booking.find(filter)&#10;      .populate('tour', 'title images duration destination')&#10;      .sort({ createdAt: -1 })&#10;      .limit(limit * 1)&#10;      .skip((page - 1) * limit);&#10;&#10;    const total = await Booking.countDocuments(filter);&#10;&#10;    res.json({&#10;      bookings,&#10;      pagination: {&#10;        currentPage: Number(page),&#10;        totalPages: Math.ceil(total / limit),&#10;        totalBookings: total&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Get user bookings error:', error);&#10;    res.status(500).json({ message: 'Server error fetching bookings' });&#10;  }&#10;};&#10;&#10;// Get single booking&#10;const getBooking = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    &#10;    const booking = await Booking.findOne({&#10;      _id: id,&#10;      customer: req.user.id&#10;    }).populate(['tour', 'customer']);&#10;&#10;    if (!booking) {&#10;      return res.status(404).json({ message: 'Booking not found' });&#10;    }&#10;&#10;    res.json({ booking });&#10;  } catch (error) {&#10;    console.error('Get booking error:', error);&#10;    res.status(500).json({ message: 'Server error fetching booking' });&#10;  }&#10;};&#10;&#10;// Cancel booking&#10;const cancelBooking = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    const { reason } = req.body;&#10;&#10;    const booking = await Booking.findOne({&#10;      _id: id,&#10;      customer: req.user.id&#10;    });&#10;&#10;    if (!booking) {&#10;      return res.status(404).json({ message: 'Booking not found' });&#10;    }&#10;&#10;    if (booking.status === 'cancelled') {&#10;      return res.status(400).json({ message: 'Booking already cancelled' });&#10;    }&#10;&#10;    // Check if cancellation is allowed (e.g., at least 24 hours before start date)&#10;    const now = new Date();&#10;    const startDate = new Date(booking.bookingDetails.startDate);&#10;    const hoursDifference = (startDate - now) / (1000 * 60 * 60);&#10;&#10;    if (hoursDifference &lt; 24) {&#10;      return res.status(400).json({ &#10;        message: 'Cancellation not allowed less than 24 hours before start date' &#10;      });&#10;    }&#10;&#10;    booking.status = 'cancelled';&#10;    booking.notes.push({&#10;      content: `Booking cancelled by customer. Reason: ${reason}`,&#10;      author: req.user.id&#10;    });&#10;&#10;    await booking.save();&#10;&#10;    // Update tour availability&#10;    const tour = await Tour.findById(booking.tour);&#10;    const availability = tour.availability.find(slot =&gt; {&#10;      const bookingDate = booking.bookingDetails.startDate;&#10;      return bookingDate &gt;= slot.startDate &amp;&amp; bookingDate &lt;= slot.endDate;&#10;    });&#10;    &#10;    if (availability) {&#10;      availability.bookedSpots -= booking.bookingDetails.totalTravelers;&#10;      await tour.save();&#10;    }&#10;&#10;    res.json({&#10;      message: 'Booking cancelled successfully',&#10;      booking&#10;    });&#10;  } catch (error) {&#10;    console.error('Cancel booking error:', error);&#10;    res.status(500).json({ message: 'Server error cancelling booking' });&#10;  }&#10;};&#10;&#10;module.exports = {&#10;  createBooking,&#10;  getUserBookings,&#10;  getBooking,&#10;  cancelBooking&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/controllers/paymentController.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/controllers/paymentController.js" />
              <option name="updatedContent" value="const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);&#10;const Booking = require('../models/Booking');&#10;&#10;// Create Stripe payment intent&#10;const createPaymentIntent = async (req, res) =&gt; {&#10;  try {&#10;    const { bookingId } = req.body;&#10;&#10;    const booking = await Booking.findOne({&#10;      _id: bookingId,&#10;      customer: req.user.id&#10;    }).populate('tour');&#10;&#10;    if (!booking) {&#10;      return res.status(404).json({ message: 'Booking not found' });&#10;    }&#10;&#10;    if (booking.payment.status === 'paid') {&#10;      return res.status(400).json({ message: 'Booking already paid' });&#10;    }&#10;&#10;    // Create payment intent with Stripe&#10;    const paymentIntent = await stripe.paymentIntents.create({&#10;      amount: Math.round(booking.pricing.totalAmount * 100), // Convert to cents&#10;      currency: booking.pricing.currency.toLowerCase(),&#10;      metadata: {&#10;        bookingId: booking._id.toString(),&#10;        tourTitle: booking.tour.title,&#10;        customerEmail: req.user.email&#10;      }&#10;    });&#10;&#10;    res.json({&#10;      clientSecret: paymentIntent.client_secret,&#10;      amount: booking.pricing.totalAmount,&#10;      currency: booking.pricing.currency&#10;    });&#10;  } catch (error) {&#10;    console.error('Payment intent error:', error);&#10;    res.status(500).json({ message: 'Error creating payment intent' });&#10;  }&#10;};&#10;&#10;// Confirm payment&#10;const confirmPayment = async (req, res) =&gt; {&#10;  try {&#10;    const { bookingId, paymentIntentId, paymentMethod } = req.body;&#10;&#10;    const booking = await Booking.findOne({&#10;      _id: bookingId,&#10;      customer: req.user.id&#10;    });&#10;&#10;    if (!booking) {&#10;      return res.status(404).json({ message: 'Booking not found' });&#10;    }&#10;&#10;    // Verify payment with Stripe&#10;    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);&#10;    &#10;    if (paymentIntent.status === 'succeeded') {&#10;      booking.payment.status = 'paid';&#10;      booking.payment.method = paymentMethod;&#10;      booking.payment.transactionId = paymentIntentId;&#10;      booking.payment.paidAmount = booking.pricing.totalAmount;&#10;      booking.payment.paymentDate = new Date();&#10;      booking.status = 'confirmed';&#10;&#10;      await booking.save();&#10;&#10;      res.json({&#10;        message: 'Payment confirmed successfully',&#10;        booking&#10;      });&#10;    } else {&#10;      res.status(400).json({ message: 'Payment not successful' });&#10;    }&#10;  } catch (error) {&#10;    console.error('Payment confirmation error:', error);&#10;    res.status(500).json({ message: 'Error confirming payment' });&#10;  }&#10;};&#10;&#10;// Handle VNPay payment (Vietnamese payment gateway)&#10;const createVNPayPayment = async (req, res) =&gt; {&#10;  try {&#10;    const { bookingId } = req.body;&#10;&#10;    const booking = await Booking.findOne({&#10;      _id: bookingId,&#10;      customer: req.user.id&#10;    });&#10;&#10;    if (!booking) {&#10;      return res.status(404).json({ message: 'Booking not found' });&#10;    }&#10;&#10;    // VNPay integration would go here&#10;    // This is a simplified version - you'll need to implement the actual VNPay API&#10;    const vnpayData = {&#10;      vnp_Amount: booking.pricing.totalAmount * 100,&#10;      vnp_Command: 'pay',&#10;      vnp_CreateDate: new Date().toISOString().replace(/[-T:\.Z]/g, ''),&#10;      vnp_CurrCode: 'VND',&#10;      vnp_IpAddr: req.ip,&#10;      vnp_Locale: 'vn',&#10;      vnp_OrderInfo: `Payment for booking ${booking.bookingNumber}`,&#10;      vnp_OrderType: 'other',&#10;      vnp_ReturnUrl: `${process.env.CLIENT_URL}/payment/vnpay/return`,&#10;      vnp_TmnCode: process.env.VNPAY_TMN_CODE,&#10;      vnp_TxnRef: booking.bookingNumber,&#10;      vnp_Version: '2.1.0'&#10;    };&#10;&#10;    // Generate VNPay URL (simplified)&#10;    const vnpayUrl = `https://sandbox.vnpayment.vn/paymentv2/vpcpay.html`;&#10;&#10;    res.json({&#10;      paymentUrl: vnpayUrl,&#10;      vnpayData&#10;    });&#10;  } catch (error) {&#10;    console.error('VNPay payment error:', error);&#10;    res.status(500).json({ message: 'Error creating VNPay payment' });&#10;  }&#10;};&#10;&#10;// Handle payment webhook (for automatic payment confirmation)&#10;const handleWebhook = async (req, res) =&gt; {&#10;  const sig = req.headers['stripe-signature'];&#10;&#10;  try {&#10;    const event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);&#10;&#10;    if (event.type === 'payment_intent.succeeded') {&#10;      const paymentIntent = event.data.object;&#10;      const bookingId = paymentIntent.metadata.bookingId;&#10;&#10;      const booking = await Booking.findById(bookingId);&#10;      if (booking) {&#10;        booking.payment.status = 'paid';&#10;        booking.payment.transactionId = paymentIntent.id;&#10;        booking.payment.paidAmount = paymentIntent.amount / 100;&#10;        booking.payment.paymentDate = new Date();&#10;        booking.status = 'confirmed';&#10;        await booking.save();&#10;      }&#10;    }&#10;&#10;    res.json({ received: true });&#10;  } catch (error) {&#10;    console.error('Webhook error:', error);&#10;    res.status(400).json({ message: 'Webhook error' });&#10;  }&#10;};&#10;&#10;module.exports = {&#10;  createPaymentIntent,&#10;  confirmPayment,&#10;  createVNPayPayment,&#10;  handleWebhook&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/controllers/tourController.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/controllers/tourController.js" />
              <option name="updatedContent" value="const Tour = require('../models/Tour');&#10;const multer = require('multer');&#10;const path = require('path');&#10;&#10;// Configure multer for image uploads&#10;const storage = multer.diskStorage({&#10;  destination: (req, file, cb) =&gt; {&#10;    cb(null, 'uploads/tours');&#10;  },&#10;  filename: (req, file, cb) =&gt; {&#10;    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);&#10;    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));&#10;  }&#10;});&#10;&#10;const upload = multer({ storage: storage });&#10;&#10;// Get all tours with filtering and pagination&#10;const getTours = async (req, res) =&gt; {&#10;  try {&#10;    const {&#10;      page = 1,&#10;      limit = 12,&#10;      destination,&#10;      category,&#10;      minPrice,&#10;      maxPrice,&#10;      duration,&#10;      sortBy = 'createdAt',&#10;      sortOrder = 'desc',&#10;      search&#10;    } = req.query;&#10;&#10;    // Build filter object&#10;    const filter = { status: 'published' };&#10;    &#10;    if (destination) filter.destination = new RegExp(destination, 'i');&#10;    if (category) filter.category = category;&#10;    if (minPrice || maxPrice) {&#10;      filter['pricing.basePrice'] = {};&#10;      if (minPrice) filter['pricing.basePrice'].$gte = Number(minPrice);&#10;      if (maxPrice) filter['pricing.basePrice'].$lte = Number(maxPrice);&#10;    }&#10;    if (duration) {&#10;      filter['duration.days'] = Number(duration);&#10;    }&#10;    if (search) {&#10;      filter.$or = [&#10;        { title: new RegExp(search, 'i') },&#10;        { description: new RegExp(search, 'i') },&#10;        { destination: new RegExp(search, 'i') }&#10;      ];&#10;    }&#10;&#10;    // Sort options&#10;    const sortOptions = {};&#10;    sortOptions[sortBy] = sortOrder === 'desc' ? -1 : 1;&#10;&#10;    const tours = await Tour.find(filter)&#10;      .sort(sortOptions)&#10;      .limit(limit * 1)&#10;      .skip((page - 1) * limit)&#10;      .select('-__v');&#10;&#10;    const total = await Tour.countDocuments(filter);&#10;&#10;    res.json({&#10;      tours,&#10;      pagination: {&#10;        currentPage: Number(page),&#10;        totalPages: Math.ceil(total / limit),&#10;        totalTours: total,&#10;        hasNext: page &lt; Math.ceil(total / limit),&#10;        hasPrev: page &gt; 1&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Get tours error:', error);&#10;    res.status(500).json({ message: 'Server error fetching tours' });&#10;  }&#10;};&#10;&#10;// Get featured tours&#10;const getFeaturedTours = async (req, res) =&gt; {&#10;  try {&#10;    const tours = await Tour.find({ &#10;      status: 'published', &#10;      featured: true &#10;    })&#10;    .sort({ 'ratings.average': -1 })&#10;    .limit(4)&#10;    .select('title shortDescription images pricing duration destination ratings');&#10;&#10;    res.json({ tours });&#10;  } catch (error) {&#10;    console.error('Get featured tours error:', error);&#10;    res.status(500).json({ message: 'Server error fetching featured tours' });&#10;  }&#10;};&#10;&#10;// Get single tour by slug&#10;const getTourBySlug = async (req, res) =&gt; {&#10;  try {&#10;    const { slug } = req.params;&#10;    &#10;    const tour = await Tour.findOne({ slug, status: 'published' });&#10;    &#10;    if (!tour) {&#10;      return res.status(404).json({ message: 'Tour not found' });&#10;    }&#10;&#10;    res.json({ tour });&#10;  } catch (error) {&#10;    console.error('Get tour by slug error:', error);&#10;    res.status(500).json({ message: 'Server error fetching tour' });&#10;  }&#10;};&#10;&#10;// Create new tour (Admin only)&#10;const createTour = async (req, res) =&gt; {&#10;  try {&#10;    const tourData = {&#10;      ...req.body,&#10;      createdBy: req.user.id&#10;    };&#10;&#10;    // Parse JSON fields if they come as strings&#10;    if (typeof tourData.itinerary === 'string') {&#10;      tourData.itinerary = JSON.parse(tourData.itinerary);&#10;    }&#10;    if (typeof tourData.pricing === 'string') {&#10;      tourData.pricing = JSON.parse(tourData.pricing);&#10;    }&#10;&#10;    const tour = new Tour(tourData);&#10;    await tour.save();&#10;&#10;    res.status(201).json({&#10;      message: 'Tour created successfully',&#10;      tour&#10;    });&#10;  } catch (error) {&#10;    console.error('Create tour error:', error);&#10;    res.status(500).json({ message: 'Server error creating tour' });&#10;  }&#10;};&#10;&#10;// Update tour (Admin only)&#10;const updateTour = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    &#10;    const tour = await Tour.findByIdAndUpdate(&#10;      id,&#10;      { $set: req.body },&#10;      { new: true, runValidators: true }&#10;    );&#10;&#10;    if (!tour) {&#10;      return res.status(404).json({ message: 'Tour not found' });&#10;    }&#10;&#10;    res.json({&#10;      message: 'Tour updated successfully',&#10;      tour&#10;    });&#10;  } catch (error) {&#10;    console.error('Update tour error:', error);&#10;    res.status(500).json({ message: 'Server error updating tour' });&#10;  }&#10;};&#10;&#10;// Delete tour (Admin only)&#10;const deleteTour = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    &#10;    const tour = await Tour.findByIdAndDelete(id);&#10;    &#10;    if (!tour) {&#10;      return res.status(404).json({ message: 'Tour not found' });&#10;    }&#10;&#10;    res.json({ message: 'Tour deleted successfully' });&#10;  } catch (error) {&#10;    console.error('Delete tour error:', error);&#10;    res.status(500).json({ message: 'Server error deleting tour' });&#10;  }&#10;};&#10;&#10;// Check tour availability&#10;const checkAvailability = async (req, res) =&gt; {&#10;  try {&#10;    const { tourId } = req.params;&#10;    const { startDate, groupSize = 1 } = req.query;&#10;&#10;    const tour = await Tour.findById(tourId);&#10;    &#10;    if (!tour) {&#10;      return res.status(404).json({ message: 'Tour not found' });&#10;    }&#10;&#10;    const isAvailable = tour.checkAvailability(new Date(startDate), Number(groupSize));&#10;    const price = tour.calculatePrice(new Date(startDate), Number(groupSize));&#10;&#10;    res.json({&#10;      available: isAvailable,&#10;      price,&#10;      currency: tour.pricing.currency&#10;    });&#10;  } catch (error) {&#10;    console.error('Check availability error:', error);&#10;    res.status(500).json({ message: 'Server error checking availability' });&#10;  }&#10;};&#10;&#10;module.exports = {&#10;  getTours,&#10;  getFeaturedTours,&#10;  getTourBySlug,&#10;  createTour,&#10;  updateTour,&#10;  deleteTour,&#10;  checkAvailability,&#10;  upload&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/middleware/auth.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/middleware/auth.js" />
              <option name="updatedContent" value="const jwt = require('jsonwebtoken');&#10;const User = require('../models/User');&#10;&#10;const auth = async (req, res, next) =&gt; {&#10;  try {&#10;    const token = req.header('Authorization')?.replace('Bearer ', '');&#10;    &#10;    if (!token) {&#10;      return res.status(401).json({ message: 'Access denied. No token provided.' });&#10;    }&#10;&#10;    const decoded = jwt.verify(token, process.env.JWT_SECRET);&#10;    const user = await User.findById(decoded.id).select('-password');&#10;    &#10;    if (!user) {&#10;      return res.status(401).json({ message: 'Invalid token.' });&#10;    }&#10;&#10;    req.user = user;&#10;    next();&#10;  } catch (error) {&#10;    res.status(401).json({ message: 'Invalid token.' });&#10;  }&#10;};&#10;&#10;const adminAuth = async (req, res, next) =&gt; {&#10;  try {&#10;    await auth(req, res, () =&gt; {});&#10;    &#10;    if (req.user.role !== 'admin') {&#10;      return res.status(403).json({ message: 'Access denied. Admin privileges required.' });&#10;    }&#10;    &#10;    next();&#10;  } catch (error) {&#10;    res.status(401).json({ message: 'Authentication failed.' });&#10;  }&#10;};&#10;&#10;const editorAuth = async (req, res, next) =&gt; {&#10;  try {&#10;    await auth(req, res, () =&gt; {});&#10;    &#10;    if (!['admin', 'editor'].includes(req.user.role)) {&#10;      return res.status(403).json({ message: 'Access denied. Editor privileges required.' });&#10;    }&#10;    &#10;    next();&#10;  } catch (error) {&#10;    res.status(401).json({ message: 'Authentication failed.' });&#10;  }&#10;};&#10;&#10;module.exports = { auth, adminAuth, editorAuth };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/models/Booking.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/models/Booking.js" />
              <option name="updatedContent" value="const mongoose = require('mongoose');&#10;&#10;const bookingSchema = new mongoose.Schema({&#10;  bookingNumber: {&#10;    type: String,&#10;    unique: true,&#10;    required: true&#10;  },&#10;  tour: {&#10;    type: mongoose.Schema.Types.ObjectId,&#10;    ref: 'Tour',&#10;    required: true&#10;  },&#10;  customer: {&#10;    type: mongoose.Schema.Types.ObjectId,&#10;    ref: 'User',&#10;    required: true&#10;  },&#10;  travelers: [{&#10;    name: {&#10;      type: String,&#10;      required: true&#10;    },&#10;    age: Number,&#10;    type: {&#10;      type: String,&#10;      enum: ['adult', 'child', 'infant'],&#10;      default: 'adult'&#10;    },&#10;    passportNumber: String,&#10;    nationality: String,&#10;    dietaryRequirements: String&#10;  }],&#10;  bookingDetails: {&#10;    startDate: {&#10;      type: Date,&#10;      required: true&#10;    },&#10;    endDate: Date,&#10;    numberOfTravelers: {&#10;      adults: { type: Number, default: 1 },&#10;      children: { type: Number, default: 0 },&#10;      infants: { type: Number, default: 0 }&#10;    },&#10;    totalTravelers: {&#10;      type: Number,&#10;      required: true&#10;    }&#10;  },&#10;  pricing: {&#10;    basePrice: Number,&#10;    seasonalMultiplier: Number,&#10;    groupDiscount: Number,&#10;    addOns: [{&#10;      name: String,&#10;      price: Number,&#10;      quantity: Number&#10;    }],&#10;    subtotal: Number,&#10;    taxes: Number,&#10;    totalAmount: {&#10;      type: Number,&#10;      required: true&#10;    },&#10;    currency: {&#10;      type: String,&#10;      default: 'USD'&#10;    }&#10;  },&#10;  payment: {&#10;    status: {&#10;      type: String,&#10;      enum: ['pending', 'paid', 'partially_paid', 'refunded', 'failed'],&#10;      default: 'pending'&#10;    },&#10;    method: {&#10;      type: String,&#10;      enum: ['credit_card', 'bank_transfer', 'vnpay', 'momo']&#10;    },&#10;    transactionId: String,&#10;    paidAmount: {&#10;      type: Number,&#10;      default: 0&#10;    },&#10;    paymentDate: Date,&#10;    refundAmount: {&#10;      type: Number,&#10;      default: 0&#10;    },&#10;    refundDate: Date&#10;  },&#10;  status: {&#10;    type: String,&#10;    enum: ['pending', 'confirmed', 'in_progress', 'completed', 'cancelled'],&#10;    default: 'pending'&#10;  },&#10;  specialRequests: String,&#10;  emergencyContact: {&#10;    name: String,&#10;    phone: String,&#10;    relationship: String&#10;  },&#10;  documents: [{&#10;    type: String,&#10;    url: String,&#10;    uploadDate: Date&#10;  }],&#10;  notifications: {&#10;    confirmationSent: { type: Boolean, default: false },&#10;    reminderSent: { type: Boolean, default: false },&#10;    followUpSent: { type: Boolean, default: false }&#10;  },&#10;  createdBy: {&#10;    type: mongoose.Schema.Types.ObjectId,&#10;    ref: 'User'&#10;  },&#10;  notes: [{ &#10;    content: String,&#10;    author: {&#10;      type: mongoose.Schema.Types.ObjectId,&#10;      ref: 'User'&#10;    },&#10;    createdAt: {&#10;      type: Date,&#10;      default: Date.now&#10;    }&#10;  }]&#10;}, {&#10;  timestamps: true&#10;});&#10;&#10;// Generate booking number&#10;bookingSchema.pre('save', async function(next) {&#10;  if (!this.bookingNumber) {&#10;    const prefix = 'TRV';&#10;    const timestamp = Date.now().toString().slice(-6);&#10;    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');&#10;    this.bookingNumber = `${prefix}${timestamp}${random}`;&#10;  }&#10;  next();&#10;});&#10;&#10;// Calculate total travelers&#10;bookingSchema.pre('save', function(next) {&#10;  if (this.isModified('bookingDetails.numberOfTravelers')) {&#10;    const { adults, children, infants } = this.bookingDetails.numberOfTravelers;&#10;    this.bookingDetails.totalTravelers = adults + children + infants;&#10;  }&#10;  next();&#10;});&#10;&#10;module.exports = mongoose.model('Booking', bookingSchema);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/models/Content.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/models/Content.js" />
              <option name="updatedContent" value="const mongoose = require('mongoose');&#10;&#10;const contentSchema = new mongoose.Schema({&#10;  type: {&#10;    type: String,&#10;    enum: ['page', 'blog', 'destination', 'faq'],&#10;    required: true&#10;  },&#10;  title: {&#10;    type: String,&#10;    required: true,&#10;    trim: true&#10;  },&#10;  slug: {&#10;    type: String,&#10;    unique: true,&#10;    lowercase: true&#10;  },&#10;  content: {&#10;    type: String,&#10;    required: true&#10;  },&#10;  excerpt: {&#10;    type: String,&#10;    maxlength: 300&#10;  },&#10;  featuredImage: String,&#10;  gallery: [String],&#10;  author: {&#10;    type: mongoose.Schema.Types.ObjectId,&#10;    ref: 'User',&#10;    required: true&#10;  },&#10;  status: {&#10;    type: String,&#10;    enum: ['draft', 'published', 'archived'],&#10;    default: 'draft'&#10;  },&#10;  featured: {&#10;    type: Boolean,&#10;    default: false&#10;  },&#10;  categories: [String],&#10;  tags: [String],&#10;  language: {&#10;    type: String,&#10;    enum: ['en', 'vi'],&#10;    default: 'en'&#10;  },&#10;  seoData: {&#10;    metaTitle: String,&#10;    metaDescription: String,&#10;    keywords: [String]&#10;  },&#10;  views: {&#10;    type: Number,&#10;    default: 0&#10;  }&#10;}, {&#10;  timestamps: true&#10;});&#10;&#10;// Generate slug from title&#10;contentSchema.pre('save', function(next) {&#10;  if (this.isModified('title')) {&#10;    this.slug = this.title&#10;      .toLowerCase()&#10;      .replace(/[^\w\s-]/g, '')&#10;      .replace(/[\s_-]+/g, '-')&#10;      .replace(/^-+|-+$/g, '');&#10;  }&#10;  next();&#10;});&#10;&#10;module.exports = mongoose.model('Content', contentSchema);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/models/Review.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/models/Review.js" />
              <option name="updatedContent" value="const mongoose = require('mongoose');&#10;&#10;const reviewSchema = new mongoose.Schema({&#10;  tour: {&#10;    type: mongoose.Schema.Types.ObjectId,&#10;    ref: 'Tour',&#10;    required: true&#10;  },&#10;  customer: {&#10;    type: mongoose.Schema.Types.ObjectId,&#10;    ref: 'User',&#10;    required: true&#10;  },&#10;  booking: {&#10;    type: mongoose.Schema.Types.ObjectId,&#10;    ref: 'Booking',&#10;    required: true&#10;  },&#10;  rating: {&#10;    type: Number,&#10;    required: true,&#10;    min: 1,&#10;    max: 5&#10;  },&#10;  title: {&#10;    type: String,&#10;    required: true,&#10;    trim: true&#10;  },&#10;  content: {&#10;    type: String,&#10;    required: true&#10;  },&#10;  aspects: {&#10;    guide: { type: Number, min: 1, max: 5 },&#10;    accommodation: { type: Number, min: 1, max: 5 },&#10;    transport: { type: Number, min: 1, max: 5 },&#10;    value: { type: Number, min: 1, max: 5 }&#10;  },&#10;  photos: [String],&#10;  status: {&#10;    type: String,&#10;    enum: ['pending', 'approved', 'rejected'],&#10;    default: 'pending'&#10;  },&#10;  featured: {&#10;    type: Boolean,&#10;    default: false&#10;  },&#10;  helpful: {&#10;    type: Number,&#10;    default: 0&#10;  }&#10;}, {&#10;  timestamps: true&#10;});&#10;&#10;module.exports = mongoose.model('Review', reviewSchema);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/models/Tour.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/models/Tour.js" />
              <option name="updatedContent" value="const mongoose = require('mongoose');&#10;&#10;const tourSchema = new mongoose.Schema({&#10;  title: {&#10;    type: String,&#10;    required: true,&#10;    trim: true&#10;  },&#10;  slug: {&#10;    type: String,&#10;    unique: true,&#10;    lowercase: true&#10;  },&#10;  description: {&#10;    type: String,&#10;    required: true&#10;  },&#10;  shortDescription: {&#10;    type: String,&#10;    required: true,&#10;    maxlength: 200&#10;  },&#10;  destination: {&#10;    type: String,&#10;    required: true&#10;  },&#10;  duration: {&#10;    days: {&#10;      type: Number,&#10;      required: true&#10;    },&#10;    nights: {&#10;      type: Number,&#10;      required: true&#10;    }&#10;  },&#10;  pricing: {&#10;    basePrice: {&#10;      type: Number,&#10;      required: true&#10;    },&#10;    currency: {&#10;      type: String,&#10;      default: 'USD'&#10;    },&#10;    priceType: {&#10;      type: String,&#10;      enum: ['per_person', 'per_group'],&#10;      default: 'per_person'&#10;    },&#10;    seasonalPricing: [{&#10;      season: String,&#10;      startDate: Date,&#10;      endDate: Date,&#10;      multiplier: Number&#10;    }],&#10;    groupDiscounts: [{&#10;      minPeople: Number,&#10;      discount: Number&#10;    }]&#10;  },&#10;  itinerary: [{&#10;    day: Number,&#10;    title: String,&#10;    description: String,&#10;    activities: [String],&#10;    meals: [String],&#10;    accommodation: String&#10;  }],&#10;  inclusions: [String],&#10;  exclusions: [String],&#10;  highlights: [String],&#10;  images: [{&#10;    url: String,&#10;    alt: String,&#10;    isPrimary: Boolean&#10;  }],&#10;  videos: [{&#10;    url: String,&#10;    title: String&#10;  }],&#10;  category: {&#10;    type: String,&#10;    enum: ['adventure', 'luxury', 'family', 'cultural', 'beach', 'city', 'nature'],&#10;    required: true&#10;  },&#10;  difficulty: {&#10;    type: String,&#10;    enum: ['easy', 'moderate', 'challenging', 'extreme'],&#10;    default: 'moderate'&#10;  },&#10;  maxGroupSize: {&#10;    type: Number,&#10;    default: 20&#10;  },&#10;  minAge: {&#10;    type: Number,&#10;    default: 0&#10;  },&#10;  availability: [{&#10;    startDate: Date,&#10;    endDate: Date,&#10;    availableSpots: Number,&#10;    bookedSpots: { type: Number, default: 0 }&#10;  }],&#10;  location: {&#10;    coordinates: {&#10;      type: [Number], // [longitude, latitude]&#10;      index: '2dsphere'&#10;    },&#10;    address: String,&#10;    city: String,&#10;    country: String&#10;  },&#10;  status: {&#10;    type: String,&#10;    enum: ['draft', 'published', 'archived'],&#10;    default: 'draft'&#10;  },&#10;  featured: {&#10;    type: Boolean,&#10;    default: false&#10;  },&#10;  ratings: {&#10;    average: {&#10;      type: Number,&#10;      default: 0&#10;    },&#10;    count: {&#10;      type: Number,&#10;      default: 0&#10;    }&#10;  },&#10;  tags: [String],&#10;  seoData: {&#10;    metaTitle: String,&#10;    metaDescription: String,&#10;    keywords: [String]&#10;  }&#10;}, {&#10;  timestamps: true&#10;});&#10;&#10;// Generate slug from title&#10;tourSchema.pre('save', function(next) {&#10;  if (this.isModified('title')) {&#10;    this.slug = this.title&#10;      .toLowerCase()&#10;      .replace(/[^\w\s-]/g, '')&#10;      .replace(/[\s_-]+/g, '-')&#10;      .replace(/^-+|-+$/g, '');&#10;  }&#10;  next();&#10;});&#10;&#10;// Calculate current price based on season and group size&#10;tourSchema.methods.calculatePrice = function(date, groupSize = 1) {&#10;  let price = this.pricing.basePrice;&#10;  &#10;  // Apply seasonal pricing&#10;  const seasonalPrice = this.pricing.seasonalPricing.find(season =&gt; {&#10;    return date &gt;= season.startDate &amp;&amp; date &lt;= season.endDate;&#10;  });&#10;  &#10;  if (seasonalPrice) {&#10;    price *= seasonalPrice.multiplier;&#10;  }&#10;  &#10;  // Apply group discounts&#10;  const groupDiscount = this.pricing.groupDiscounts&#10;    .filter(discount =&gt; groupSize &gt;= discount.minPeople)&#10;    .sort((a, b) =&gt; b.minPeople - a.minPeople)[0];&#10;    &#10;  if (groupDiscount) {&#10;    price *= (1 - groupDiscount.discount / 100);&#10;  }&#10;  &#10;  return Math.round(price * 100) / 100;&#10;};&#10;&#10;// Check availability for a specific date&#10;tourSchema.methods.checkAvailability = function(startDate, groupSize) {&#10;  const availability = this.availability.find(slot =&gt; {&#10;    return startDate &gt;= slot.startDate &amp;&amp; startDate &lt;= slot.endDate;&#10;  });&#10;  &#10;  if (!availability) return false;&#10;  &#10;  return (availability.availableSpots - availability.bookedSpots) &gt;= groupSize;&#10;};&#10;&#10;module.exports = mongoose.model('Tour', tourSchema);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/models/User.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/models/User.js" />
              <option name="updatedContent" value="const mongoose = require('mongoose');&#10;const bcrypt = require('bcryptjs');&#10;&#10;const userSchema = new mongoose.Schema({&#10;  name: {&#10;    type: String,&#10;    required: true,&#10;    trim: true&#10;  },&#10;  email: {&#10;    type: String,&#10;    required: true,&#10;    unique: true,&#10;    lowercase: true,&#10;    trim: true&#10;  },&#10;  password: {&#10;    type: String,&#10;    required: true,&#10;    minlength: 6&#10;  },&#10;  phone: {&#10;    type: String,&#10;    trim: true&#10;  },&#10;  country: {&#10;    type: String,&#10;    trim: true&#10;  },&#10;  role: {&#10;    type: String,&#10;    enum: ['customer', 'admin', 'editor'],&#10;    default: 'customer'&#10;  },&#10;  avatar: {&#10;    type: String,&#10;    default: ''&#10;  },&#10;  isVerified: {&#10;    type: Boolean,&#10;    default: false&#10;  },&#10;  preferences: {&#10;    language: {&#10;      type: String,&#10;      enum: ['en', 'vi'],&#10;      default: 'en'&#10;    },&#10;    currency: {&#10;      type: String,&#10;      default: 'USD'&#10;    },&#10;    newsletter: {&#10;      type: Boolean,&#10;      default: true&#10;    }&#10;  },&#10;  bookingHistory: [{&#10;    type: mongoose.Schema.Types.ObjectId,&#10;    ref: 'Booking'&#10;  }]&#10;}, {&#10;  timestamps: true&#10;});&#10;&#10;// Hash password before saving&#10;userSchema.pre('save', async function(next) {&#10;  if (!this.isModified('password')) return next();&#10;  &#10;  try {&#10;    const salt = await bcrypt.genSalt(10);&#10;    this.password = await bcrypt.hash(this.password, salt);&#10;    next();&#10;  } catch (error) {&#10;    next(error);&#10;  }&#10;});&#10;&#10;// Compare password method&#10;userSchema.methods.comparePassword = async function(candidatePassword) {&#10;  return await bcrypt.compare(candidatePassword, this.password);&#10;};&#10;&#10;module.exports = mongoose.model('User', userSchema);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/admin.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/admin.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { adminAuth, editorAuth } = require('../middleware/auth');&#10;const {&#10;  getDashboardStats,&#10;  getAllBookings,&#10;  updateBookingStatus,&#10;  getAllUsers,&#10;  getAllToursAdmin,&#10;  getAllReviews,&#10;  updateReviewStatus&#10;} = require('../controllers/adminController');&#10;&#10;// @route   GET /api/admin/dashboard&#10;// @desc    Get dashboard statistics&#10;// @access  Private (Admin only)&#10;router.get('/dashboard', adminAuth, getDashboardStats);&#10;&#10;// @route   GET /api/admin/bookings&#10;// @desc    Get all bookings&#10;// @access  Private (Admin only)&#10;router.get('/bookings', adminAuth, getAllBookings);&#10;&#10;// @route   PUT /api/admin/bookings/:id/status&#10;// @desc    Update booking status&#10;// @access  Private (Admin only)&#10;router.put('/bookings/:id/status', adminAuth, updateBookingStatus);&#10;&#10;// @route   GET /api/admin/users&#10;// @desc    Get all users&#10;// @access  Private (Admin only)&#10;router.get('/users', adminAuth, getAllUsers);&#10;&#10;// @route   GET /api/admin/tours&#10;// @desc    Get all tours for admin&#10;// @access  Private (Editor or Admin)&#10;router.get('/tours', editorAuth, getAllToursAdmin);&#10;&#10;// @route   GET /api/admin/reviews&#10;// @desc    Get all reviews&#10;// @access  Private (Editor or Admin)&#10;router.get('/reviews', editorAuth, getAllReviews);&#10;&#10;// @route   PUT /api/admin/reviews/:id&#10;// @desc    Update review status&#10;// @access  Private (Editor or Admin)&#10;router.put('/reviews/:id', editorAuth, updateReviewStatus);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/auth.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/auth.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth } = require('../middleware/auth');&#10;const {&#10;  register,&#10;  login,&#10;  getProfile,&#10;  updateProfile,&#10;  changePassword&#10;} = require('../controllers/authController');&#10;&#10;// @route   POST /api/auth/register&#10;// @desc    Register a new user&#10;// @access  Public&#10;router.post('/register', register);&#10;&#10;// @route   POST /api/auth/login&#10;// @desc    Login user&#10;// @access  Public&#10;router.post('/login', login);&#10;&#10;// @route   GET /api/auth/profile&#10;// @desc    Get current user profile&#10;// @access  Private&#10;router.get('/profile', auth, getProfile);&#10;&#10;// @route   PUT /api/auth/profile&#10;// @desc    Update user profile&#10;// @access  Private&#10;router.put('/profile', auth, updateProfile);&#10;&#10;// @route   PUT /api/auth/change-password&#10;// @desc    Change user password&#10;// @access  Private&#10;router.put('/change-password', auth, changePassword);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/bookings.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/bookings.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth } = require('../middleware/auth');&#10;const {&#10;  createBooking,&#10;  getUserBookings,&#10;  getBooking,&#10;  cancelBooking&#10;} = require('../controllers/bookingController');&#10;&#10;// @route   POST /api/bookings&#10;// @desc    Create new booking&#10;// @access  Private&#10;router.post('/', auth, createBooking);&#10;&#10;// @route   GET /api/bookings&#10;// @desc    Get user's bookings&#10;// @access  Private&#10;router.get('/', auth, getUserBookings);&#10;&#10;// @route   GET /api/bookings/:id&#10;// @desc    Get single booking&#10;// @access  Private&#10;router.get('/:id', auth, getBooking);&#10;&#10;// @route   PUT /api/bookings/:id/cancel&#10;// @desc    Cancel booking&#10;// @access  Private&#10;router.put('/:id/cancel', auth, cancelBooking);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/content.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/content.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth, editorAuth } = require('../middleware/auth');&#10;const Content = require('../models/Content');&#10;&#10;// Get content&#10;const getContent = async (req, res) =&gt; {&#10;  try {&#10;    const { type, page = 1, limit = 10 } = req.query;&#10;&#10;    const filter = { status: 'published' };&#10;    if (type) filter.type = type;&#10;&#10;    const content = await Content.find(filter)&#10;      .populate('author', 'name')&#10;      .sort({ createdAt: -1 })&#10;      .limit(limit * 1)&#10;      .skip((page - 1) * limit);&#10;&#10;    const total = await Content.countDocuments(filter);&#10;&#10;    res.json({&#10;      data: content,&#10;      pagination: {&#10;        currentPage: Number(page),&#10;        totalPages: Math.ceil(total / limit),&#10;        totalContent: total,&#10;        hasNext: page &lt; Math.ceil(total / limit),&#10;        hasPrev: page &gt; 1&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Get content error:', error);&#10;    res.status(500).json({ message: 'Server error fetching content' });&#10;  }&#10;};&#10;&#10;// Get content by slug&#10;const getContentBySlug = async (req, res) =&gt; {&#10;  try {&#10;    const { slug } = req.params;&#10;    &#10;    const content = await Content.findOne({ slug, status: 'published' })&#10;      .populate('author', 'name');&#10;    &#10;    if (!content) {&#10;      return res.status(404).json({ message: 'Content not found' });&#10;    }&#10;&#10;    // Increment view count&#10;    content.views += 1;&#10;    await content.save();&#10;&#10;    res.json({ content });&#10;  } catch (error) {&#10;    console.error('Get content by slug error:', error);&#10;    res.status(500).json({ message: 'Server error fetching content' });&#10;  }&#10;};&#10;&#10;// Create content&#10;const createContent = async (req, res) =&gt; {&#10;  try {&#10;    const contentData = {&#10;      ...req.body,&#10;      author: req.user.id&#10;    };&#10;&#10;    const content = new Content(contentData);&#10;    await content.save();&#10;&#10;    res.status(201).json({&#10;      message: 'Content created successfully',&#10;      content&#10;    });&#10;  } catch (error) {&#10;    console.error('Create content error:', error);&#10;    res.status(500).json({ message: 'Server error creating content' });&#10;  }&#10;};&#10;&#10;// Update content&#10;const updateContent = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    &#10;    const content = await Content.findByIdAndUpdate(&#10;      id,&#10;      { $set: req.body },&#10;      { new: true, runValidators: true }&#10;    );&#10;&#10;    if (!content) {&#10;      return res.status(404).json({ message: 'Content not found' });&#10;    }&#10;&#10;    res.json({&#10;      message: 'Content updated successfully',&#10;      content&#10;    });&#10;  } catch (error) {&#10;    console.error('Update content error:', error);&#10;    res.status(500).json({ message: 'Server error updating content' });&#10;  }&#10;};&#10;&#10;// Delete content&#10;const deleteContent = async (req, res) =&gt; {&#10;  try {&#10;    const { id } = req.params;&#10;    &#10;    const content = await Content.findByIdAndDelete(id);&#10;    &#10;    if (!content) {&#10;      return res.status(404).json({ message: 'Content not found' });&#10;    }&#10;&#10;    res.json({ message: 'Content deleted successfully' });&#10;  } catch (error) {&#10;    console.error('Delete content error:', error);&#10;    res.status(500).json({ message: 'Server error deleting content' });&#10;  }&#10;};&#10;&#10;// Routes&#10;router.get('/', getContent);&#10;router.get('/:slug', getContentBySlug);&#10;router.post('/', editorAuth, createContent);&#10;router.put('/:id', editorAuth, updateContent);&#10;router.delete('/:id', editorAuth, deleteContent);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/payments.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/payments.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth } = require('../middleware/auth');&#10;const {&#10;  createPaymentIntent,&#10;  confirmPayment,&#10;  createVNPayPayment,&#10;  handleWebhook&#10;} = require('../controllers/paymentController');&#10;&#10;// @route   POST /api/payments/create-intent&#10;// @desc    Create Stripe payment intent&#10;// @access  Private&#10;router.post('/create-intent', auth, createPaymentIntent);&#10;&#10;// @route   POST /api/payments/confirm&#10;// @desc    Confirm payment&#10;// @access  Private&#10;router.post('/confirm', auth, confirmPayment);&#10;&#10;// @route   POST /api/payments/vnpay&#10;// @desc    Create VNPay payment&#10;// @access  Private&#10;router.post('/vnpay', auth, createVNPayPayment);&#10;&#10;// @route   POST /api/payments/webhook&#10;// @desc    Handle payment webhooks&#10;// @access  Public&#10;router.post('/webhook', express.raw({type: 'application/json'}), handleWebhook);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/reviews.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth, editorAuth } = require('../middleware/auth');&#10;const Review = require('../models/Review');&#10;const Tour = require('../models/Tour');&#10;&#10;// Get reviews for a tour&#10;const getReviews = async (req, res) =&gt; {&#10;  try {&#10;    const { tourId } = req.query;&#10;    const { page = 1, limit = 10 } = req.query;&#10;&#10;    const filter = { status: 'approved' };&#10;    if (tourId) filter.tour = tourId;&#10;&#10;    const reviews = await Review.find(filter)&#10;      .populate('customer', 'name')&#10;      .populate('tour', 'title')&#10;      .sort({ createdAt: -1 })&#10;      .limit(limit * 1)&#10;      .skip((page - 1) * limit);&#10;&#10;    const total = await Review.countDocuments(filter);&#10;&#10;    res.json({&#10;      data: reviews,&#10;      pagination: {&#10;        currentPage: Number(page),&#10;        totalPages: Math.ceil(total / limit),&#10;        totalReviews: total,&#10;        hasNext: page &lt; Math.ceil(total / limit),&#10;        hasPrev: page &gt; 1&#10;      }&#10;    });&#10;  } catch (error) {&#10;    console.error('Get reviews error:', error);&#10;    res.status(500).json({ message: 'Server error fetching reviews' });&#10;  }&#10;};&#10;&#10;// Create new review&#10;const createReview = async (req, res) =&gt; {&#10;  try {&#10;    const reviewData = {&#10;      ...req.body,&#10;      customer: req.user.id&#10;    };&#10;&#10;    const review = new Review(reviewData);&#10;    await review.save();&#10;&#10;    // Update tour rating&#10;    const tour = await Tour.findById(reviewData.tour);&#10;    if (tour) {&#10;      const reviews = await Review.find({ tour: reviewData.tour, status: 'approved' });&#10;      const avgRating = reviews.reduce((sum, r) =&gt; sum + r.rating, 0) / reviews.length;&#10;      &#10;      tour.ratings.average = avgRating;&#10;      tour.ratings.count = reviews.length;&#10;      await tour.save();&#10;    }&#10;&#10;    res.status(201).json({&#10;      message: 'Review submitted successfully',&#10;      review&#10;    });&#10;  } catch (error) {&#10;    console.error('Create review error:', error);&#10;    res.status(500).json({ message: 'Server error creating review' });&#10;  }&#10;};&#10;&#10;// @route   GET /api/reviews&#10;// @desc    Get reviews&#10;// @access  Public&#10;router.get('/', getReviews);&#10;&#10;// @route   POST /api/reviews&#10;// @desc    Create new review&#10;// @access  Private&#10;router.post('/', auth, createReview);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/routes/tours.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/routes/tours.js" />
              <option name="updatedContent" value="const express = require('express');&#10;const router = express.Router();&#10;const { auth, adminAuth } = require('../middleware/auth');&#10;const {&#10;  getTours,&#10;  getFeaturedTours,&#10;  getTourBySlug,&#10;  createTour,&#10;  updateTour,&#10;  deleteTour,&#10;  checkAvailability,&#10;  upload&#10;} = require('../controllers/tourController');&#10;&#10;// @route   GET /api/tours&#10;// @desc    Get all tours with filtering and pagination&#10;// @access  Public&#10;router.get('/', getTours);&#10;&#10;// @route   GET /api/tours/featured&#10;// @desc    Get featured tours&#10;// @access  Public&#10;router.get('/featured', getFeaturedTours);&#10;&#10;// @route   GET /api/tours/:slug&#10;// @desc    Get single tour by slug&#10;// @access  Public&#10;router.get('/:slug', getTourBySlug);&#10;&#10;// @route   GET /api/tours/:tourId/availability&#10;// @desc    Check tour availability and pricing&#10;// @access  Public&#10;router.get('/:tourId/availability', checkAvailability);&#10;&#10;// @route   POST /api/tours&#10;// @desc    Create new tour&#10;// @access  Private (Admin only)&#10;router.post('/', adminAuth, upload.array('images', 10), createTour);&#10;&#10;// @route   PUT /api/tours/:id&#10;// @desc    Update tour&#10;// @access  Private (Admin only)&#10;router.put('/:id', adminAuth, updateTour);&#10;&#10;// @route   DELETE /api/tours/:id&#10;// @desc    Delete tour&#10;// @access  Private (Admin only)&#10;router.delete('/:id', adminAuth, deleteTour);&#10;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/deployment-scripts.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/deployment-scripts.json" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;scripts&quot;: {&#10;    &quot;deploy:backend&quot;: &quot;cd backend &amp;&amp; vercel --prod&quot;,&#10;    &quot;deploy:frontend&quot;: &quot;cd frontend &amp;&amp; npm run build &amp;&amp; cd .. &amp;&amp; wrangler pages deploy frontend/build --project-name=travelling-website-frontend&quot;,&#10;    &quot;deploy:all&quot;: &quot;npm run deploy:backend &amp;&amp; npm run deploy:frontend&quot;,&#10;    &quot;build:frontend&quot;: &quot;cd frontend &amp;&amp; npm run build&quot;,&#10;    &quot;preview:backend&quot;: &quot;cd backend &amp;&amp; vercel&quot;,&#10;    &quot;preview:frontend&quot;: &quot;wrangler pages dev frontend/build&quot;,&#10;    &quot;dev:backend&quot;: &quot;cd backend &amp;&amp; nodemon server.js&quot;,&#10;    &quot;dev:frontend&quot;: &quot;cd frontend &amp;&amp; npm start&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/.env" />
              <option name="updatedContent" value="# React App Environment Variables&#10;REACT_APP_API_URL=http://localhost:5000/api&#10;REACT_APP_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here&#10;REACT_APP_GOOGLE_MAPS_API_KEY=your_google_maps_api_key_here" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/postcss.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/postcss.config.js" />
              <option name="originalContent" value="    autoprefixer: {},&#10;  plugins: {&#10;    tailwindcss: {},&#10;    autoprefixer: {},&#10;  },&#10;" />
              <option name="updatedContent" value="const tailwindcss = require('tailwindcss');&#10;const autoprefixer = require('autoprefixer');&#10;&#10;module.exports = {&#10;  plugins: [&#10;    tailwindcss,&#10;    autoprefixer,&#10;  ],&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/App.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import logo from './logo.svg';&#10;import './App.css';&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';&#10;import { QueryClient, QueryClientProvider } from '@tanstack/react-query';&#10;import { AuthProvider } from './contexts/AuthContext';&#10;import Header from './components/layout/Header';&#10;import Footer from './components/layout/Footer';&#10;import Home from './pages/Home';&#10;import Tours from './pages/Tours';&#10;import TourDetail from './pages/TourDetail';&#10;import Booking from './pages/Booking';&#10;import Login from './pages/auth/Login';&#10;import Register from './pages/auth/Register';&#10;import Profile from './pages/Profile';&#10;import MyBookings from './pages/MyBookings';&#10;import AdminDashboard from './pages/admin/Dashboard';&#10;import ProtectedRoute from './components/common/ProtectedRoute';&#10;import { Toaster } from 'react-hot-toast';&#10;&#10;const queryClient = new QueryClient({&#10;  defaultOptions: {&#10;    queries: {&#10;      refetchOnWindowFocus: false,&#10;      retry: 1,&#10;    },&#10;  },&#10;});&#10;&#10;function App() {&#10;  return (&#10;    &lt;QueryClientProvider client={queryClient}&gt;&#10;      &lt;AuthProvider&gt;&#10;        &lt;Router&gt;&#10;          &lt;div className=&quot;min-h-screen bg-gray-50 flex flex-col&quot;&gt;&#10;            &lt;Header /&gt;&#10;            &lt;main className=&quot;flex-1&quot;&gt;&#10;              &lt;Routes&gt;&#10;                {/* Public Routes */}&#10;                &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;&#10;                &lt;Route path=&quot;/tours&quot; element={&lt;Tours /&gt;} /&gt;&#10;                &lt;Route path=&quot;/tours/:slug&quot; element={&lt;TourDetail /&gt;} /&gt;&#10;                &lt;Route path=&quot;/login&quot; element={&lt;Login /&gt;} /&gt;&#10;                &lt;Route path=&quot;/register&quot; element={&lt;Register /&gt;} /&gt;&#10;                &#10;                {/* Protected Routes */}&#10;                &lt;Route path=&quot;/profile&quot; element={&#10;                  &lt;ProtectedRoute&gt;&#10;                    &lt;Profile /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } /&gt;&#10;                &lt;Route path=&quot;/my-bookings&quot; element={&#10;                  &lt;ProtectedRoute&gt;&#10;                    &lt;MyBookings /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } /&gt;&#10;                &lt;Route path=&quot;/booking/:tourId&quot; element={&#10;                  &lt;ProtectedRoute&gt;&#10;                    &lt;Booking /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } /&gt;&#10;                &#10;                {/* Admin Routes */}&#10;                &lt;Route path=&quot;/admin/*&quot; element={&#10;                  &lt;ProtectedRoute requiredRole=&quot;admin&quot;&gt;&#10;                    &lt;AdminDashboard /&gt;&#10;                  &lt;/ProtectedRoute&gt;&#10;                } /&gt;&#10;              &lt;/Routes&gt;&#10;            &lt;/main&gt;&#10;            &lt;Footer /&gt;&#10;            &lt;Toaster &#10;              position=&quot;top-right&quot;&#10;              toastOptions={{&#10;                duration: 4000,&#10;                style: {&#10;                  background: '#363636',&#10;                  color: '#fff',&#10;                },&#10;              }}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/Router&gt;&#10;      &lt;/AuthProvider&gt;&#10;    &lt;/QueryClientProvider&gt;&#10;  );&#10;}&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/common/Icons.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/common/Icons.tsx" />
              <option name="originalContent" value="import React, {JSX} from 'react';&#10;import * as FeatherIcons from 'react-icons/fi';&#10;  FiSettings: FeatherIcons.FiSettings,&#10;  FiEdit3: FeatherIcons.FiEdit3,&#10;  FiSave: FeatherIcons.FiSave,&#10;  FiCheck: FeatherIcons.FiCheck,&#10;  FiCamera: FeatherIcons.FiCamera,&#10;  FiPlay: FeatherIcons.FiPlay,&#10;  FiArrowRight: FeatherIcons.FiArrowRight,&#10;  FiCreditCard: FeatherIcons.FiCreditCard,&#10;  FiDownload: FeatherIcons.FiDownload,&#10;  FiBarChart: FeatherIcons.FiBarChart,&#10;  FiFacebook: FeatherIcons.FiFacebook,&#10;  return &lt;IconComponent className={className} onClick={onClick} size={size} /&gt;;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import {&#10;  FiUser as FiUserOriginal,&#10;  FiMail as FiMailOriginal,&#10;  FiLock as FiLockOriginal,&#10;  FiEye as FiEyeOriginal,&#10;  FiEyeOff as FiEyeOffOriginal,&#10;  FiPhone as FiPhoneOriginal,&#10;  FiMapPin as FiMapPinOriginal,&#10;  FiCalendar as FiCalendarOriginal,&#10;  FiClock as FiClockOriginal,&#10;  FiUsers as FiUsersOriginal,&#10;  FiStar as FiStarOriginal,&#10;  FiFilter as FiFilterOriginal,&#10;  FiSearch as FiSearchOriginal,&#10;  FiGrid as FiGridOriginal,&#10;  FiList as FiListOriginal,&#10;  FiMenu as FiMenuOriginal,&#10;  FiX as FiXOriginal,&#10;  FiLogOut as FiLogOutOriginal,&#10;  FiSettings as FiSettingsOriginal,&#10;  FiEdit3 as FiEdit3Original,&#10;  FiSave as FiSaveOriginal,&#10;  FiCheck as FiCheckOriginal,&#10;  FiCamera as FiCameraOriginal,&#10;  FiPlay as FiPlayOriginal,&#10;  FiArrowRight as FiArrowRightOriginal,&#10;  FiCreditCard as FiCreditCardOriginal,&#10;  FiDownload as FiDownloadOriginal,&#10;  FiBarChart as FiBarChartOriginal,&#10;  FiFacebook as FiFacebookOriginal,&#10;  FiInstagram as FiInstagramOriginal,&#10;  FiTwitter as FiTwitterOriginal,&#10;  FiPlus as FiPlusOriginal,&#10;  FiTrash2 as FiTrash2Original,&#10;} from 'react-icons/fi';&#10;import { IconBaseProps } from 'react-icons';&#10;&#10;// Create a wrapper component for icons that works with React 19&#10;interface IconProps {&#10;  icon: React.ComponentType&lt;IconBaseProps&gt;;&#10;  className?: string;&#10;  onClick?: () =&gt; void;&#10;  size?: number;&#10;}&#10;&#10;export const Icon: React.FC&lt;IconProps&gt; = ({ icon: IconComponent, className, onClick, size }) =&gt; {&#10;  return React.createElement(IconComponent, { className, onClick, size });&#10;};&#10;&#10;// Create functional components that properly wrap the original icons&#10;const createIconComponent = (OriginalIcon: any) =&gt; {&#10;  const IconComponent: React.FC&lt;IconBaseProps&gt; = (props) =&gt; {&#10;    return React.createElement(OriginalIcon, props);&#10;  };&#10;  IconComponent.displayName = OriginalIcon.displayName || OriginalIcon.name;&#10;  return IconComponent;&#10;};&#10;&#10;// Export individual icon components&#10;export const FiUser = createIconComponent(FiUserOriginal);&#10;export const FiMail = createIconComponent(FiMailOriginal);&#10;export const FiLock = createIconComponent(FiLockOriginal);&#10;export const FiEye = createIconComponent(FiEyeOriginal);&#10;export const FiEyeOff = createIconComponent(FiEyeOffOriginal);&#10;export const FiPhone = createIconComponent(FiPhoneOriginal);&#10;export const FiMapPin = createIconComponent(FiMapPinOriginal);&#10;export const FiCalendar = createIconComponent(FiCalendarOriginal);&#10;export const FiClock = createIconComponent(FiClockOriginal);&#10;export const FiUsers = createIconComponent(FiUsersOriginal);&#10;export const FiStar = createIconComponent(FiStarOriginal);&#10;export const FiFilter = createIconComponent(FiFilterOriginal);&#10;export const FiSearch = createIconComponent(FiSearchOriginal);&#10;export const FiGrid = createIconComponent(FiGridOriginal);&#10;export const FiList = createIconComponent(FiListOriginal);&#10;export const FiMenu = createIconComponent(FiMenuOriginal);&#10;export const FiX = createIconComponent(FiXOriginal);&#10;export const FiLogOut = createIconComponent(FiLogOutOriginal);&#10;export const FiSettings = createIconComponent(FiSettingsOriginal);&#10;export const FiEdit3 = createIconComponent(FiEdit3Original);&#10;export const FiSave = createIconComponent(FiSaveOriginal);&#10;export const FiCheck = createIconComponent(FiCheckOriginal);&#10;export const FiCamera = createIconComponent(FiCameraOriginal);&#10;export const FiPlay = createIconComponent(FiPlayOriginal);&#10;export const FiArrowRight = createIconComponent(FiArrowRightOriginal);&#10;export const FiCreditCard = createIconComponent(FiCreditCardOriginal);&#10;export const FiDownload = createIconComponent(FiDownloadOriginal);&#10;export const FiBarChart = createIconComponent(FiBarChartOriginal);&#10;export const FiFacebook = createIconComponent(FiFacebookOriginal);&#10;export const FiInstagram = createIconComponent(FiInstagramOriginal);&#10;export const FiTwitter = createIconComponent(FiTwitterOriginal);&#10;export const FiPlus = createIconComponent(FiPlusOriginal);&#10;export const FiTrash2 = createIconComponent(FiTrash2Original);&#10;&#10;// Export commonly used icons in an object for backward compatibility&#10;export const Icons = {&#10;  FiUser,&#10;  FiMail,&#10;  FiLock,&#10;  FiEye,&#10;  FiEyeOff,&#10;  FiPhone,&#10;  FiMapPin,&#10;  FiCalendar,&#10;  FiClock,&#10;  FiUsers,&#10;  FiStar,&#10;  FiFilter,&#10;  FiSearch,&#10;  FiGrid,&#10;  FiList,&#10;  FiMenu,&#10;  FiX,&#10;  FiLogOut,&#10;  FiSettings,&#10;  FiEdit3,&#10;  FiSave,&#10;  FiCheck,&#10;  FiCamera,&#10;  FiPlay,&#10;  FiArrowRight,&#10;  FiCreditCard,&#10;  FiDownload,&#10;  FiBarChart,&#10;  FiFacebook,&#10;  FiInstagram,&#10;  FiTwitter,&#10;  FiPlus,&#10;  FiTrash2,&#10;} as const;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/common/ProtectedRoute.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/common/ProtectedRoute.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Navigate } from 'react-router-dom';&#10;import { useAuth } from '../../contexts/AuthContext';&#10;&#10;interface ProtectedRouteProps {&#10;  children: React.ReactNode;&#10;  requiredRole?: 'customer' | 'admin' | 'editor';&#10;}&#10;&#10;const ProtectedRoute: React.FC&lt;ProtectedRouteProps&gt; = ({ children, requiredRole }) =&gt; {&#10;  const { state } = useAuth();&#10;&#10;  if (state.isLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!state.isAuthenticated) {&#10;    return &lt;Navigate to=&quot;/login&quot; replace /&gt;;&#10;  }&#10;&#10;  if (requiredRole &amp;&amp; state.user?.role !== requiredRole) {&#10;    return &lt;Navigate to=&quot;/&quot; replace /&gt;;&#10;  }&#10;&#10;  return &lt;&gt;{children}&lt;/&gt;;&#10;};&#10;&#10;export default ProtectedRoute;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/layout/Footer.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/layout/Footer.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Link } from 'react-router-dom';&#10;import { Icon, Icons } from '../common/Icons';&#10;&#10;const Footer: React.FC = () =&gt; {&#10;  return (&#10;    &lt;footer className=&quot;bg-gray-900 text-white&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12&quot;&gt;&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8&quot;&gt;&#10;          {/* Company Info */}&#10;          &lt;div className=&quot;col-span-1 lg:col-span-2&quot;&gt;&#10;            &lt;div className=&quot;flex items-center mb-4&quot;&gt;&#10;              &lt;div className=&quot;w-10 h-10 bg-primary-600 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-white font-bold text-xl&quot;&gt;T&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;span className=&quot;ml-2 text-2xl font-bold&quot;&gt;TravelCo&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;p className=&quot;text-gray-300 mb-6 max-w-md&quot;&gt;&#10;              Your trusted travel partner for unforgettable adventures. We create personalized&#10;              experiences that connect you with the world's most beautiful destinations.&#10;            &lt;/p&gt;&#10;            &lt;div className=&quot;space-y-2 text-gray-300&quot;&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;Icon icon={Icons.FiMapPin} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                &lt;span&gt;123 Travel Street, Ho Chi Minh City, Vietnam&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;Icon icon={Icons.FiPhone} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                &lt;span&gt;+84-123-456-789&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;Icon icon={Icons.FiMail} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                &lt;span&gt;info@travelco.com&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Quick Links */}&#10;          &lt;div&gt;&#10;            &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Quick Links&lt;/h3&gt;&#10;            &lt;ul className=&quot;space-y-2&quot;&gt;&#10;              &lt;li&gt;&#10;                &lt;Link to=&quot;/tours&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;                  All Tours&#10;                &lt;/Link&gt;&#10;              &lt;/li&gt;&#10;              &lt;li&gt;&#10;                &lt;Link to=&quot;/destinations&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;                  Destinations&#10;                &lt;/Link&gt;&#10;              &lt;/li&gt;&#10;              &lt;li&gt;&#10;                &lt;Link to=&quot;/about&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;                  About Us&#10;                &lt;/Link&gt;&#10;              &lt;/li&gt;&#10;              &lt;li&gt;&#10;                &lt;Link to=&quot;/contact&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;                  Contact&#10;                &lt;/Link&gt;&#10;              &lt;/li&gt;&#10;              &lt;li&gt;&#10;                &lt;Link to=&quot;/blog&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;                  Travel Blog&#10;                &lt;/Link&gt;&#10;              &lt;/li&gt;&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Support */}&#10;          &lt;div&gt;&#10;            &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Support&lt;/h3&gt;&#10;            &lt;ul className=&quot;space-y-2&quot;&gt;&#10;              &lt;li&gt;&#10;                &lt;Link to=&quot;/help&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;                  Help Center&#10;                &lt;/Link&gt;&#10;              &lt;/li&gt;&#10;              &lt;li&gt;&#10;                &lt;Link to=&quot;/faq&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;                  FAQ&#10;                &lt;/Link&gt;&#10;              &lt;/li&gt;&#10;              &lt;li&gt;&#10;                &lt;Link to=&quot;/booking-policy&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;                  Booking Policy&#10;                &lt;/Link&gt;&#10;              &lt;/li&gt;&#10;              &lt;li&gt;&#10;                &lt;Link to=&quot;/privacy&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;                  Privacy Policy&#10;                &lt;/Link&gt;&#10;              &lt;/li&gt;&#10;              &lt;li&gt;&#10;                &lt;Link to=&quot;/terms&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;                  Terms &amp; Conditions&#10;                &lt;/Link&gt;&#10;              &lt;/li&gt;&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Newsletter Subscription */}&#10;        &lt;div className=&quot;border-t border-gray-800 mt-8 pt-8&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col lg:flex-row justify-between items-center&quot;&gt;&#10;            &lt;div className=&quot;mb-4 lg:mb-0&quot;&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold mb-2&quot;&gt;Stay Updated&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-300&quot;&gt;Subscribe to our newsletter for travel tips and exclusive offers.&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex w-full lg:w-auto&quot;&gt;&#10;              &lt;input&#10;                type=&quot;email&quot;&#10;                placeholder=&quot;Enter your email&quot;&#10;                className=&quot;flex-1 lg:w-64 px-4 py-2 rounded-l-lg bg-gray-800 border border-gray-700 text-white placeholder-gray-400 focus:outline-none focus:border-primary-500&quot;&#10;              /&gt;&#10;              &lt;button className=&quot;px-6 py-2 bg-primary-600 hover:bg-primary-700 rounded-r-lg font-medium transition-colors&quot;&gt;&#10;                Subscribe&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Social Links &amp; Copyright */}&#10;        &lt;div className=&quot;border-t border-gray-800 mt-8 pt-8 flex flex-col lg:flex-row justify-between items-center&quot;&gt;&#10;          &lt;div className=&quot;flex space-x-4 mb-4 lg:mb-0&quot;&gt;&#10;            &lt;a href=&quot;#&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;              &lt;Icon icon={Icons.FiFacebook} className=&quot;w-5 h-5&quot; /&gt;&#10;            &lt;/a&gt;&#10;            &lt;a href=&quot;#&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;              &lt;Icon icon={Icons.FiInstagram} className=&quot;w-5 h-5&quot; /&gt;&#10;            &lt;/a&gt;&#10;            &lt;a href=&quot;#&quot; className=&quot;text-gray-300 hover:text-white transition-colors&quot;&gt;&#10;              &lt;Icon icon={Icons.FiTwitter} className=&quot;w-5 h-5&quot; /&gt;&#10;            &lt;/a&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;text-gray-300 text-sm&quot;&gt;&#10;            &lt;p&gt;&amp;copy; 2025 TravelCo. All rights reserved.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/footer&gt;&#10;  );&#10;};&#10;&#10;export default Footer;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/layout/Header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/layout/Header.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Link, useNavigate } from 'react-router-dom';&#10;import { useAuth } from '../../contexts/AuthContext';&#10;import { Icon, Icons } from '../common/Icons';&#10;&#10;const Header: React.FC = () =&gt; {&#10;  const [isMenuOpen, setIsMenuOpen] = useState(false);&#10;  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);&#10;  const { state, logout } = useAuth();&#10;  const navigate = useNavigate();&#10;&#10;  const handleLogout = () =&gt; {&#10;    logout();&#10;    navigate('/');&#10;    setIsUserMenuOpen(false);&#10;  };&#10;&#10;  const navigation = [&#10;    { name: 'Home', href: '/' },&#10;    { name: 'Tours', href: '/tours' },&#10;    { name: 'Destinations', href: '/destinations' },&#10;    { name: 'About', href: '/about' },&#10;    { name: 'Contact', href: '/contact' },&#10;  ];&#10;&#10;  return (&#10;    &lt;header className=&quot;bg-white shadow-lg sticky top-0 z-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-center h-16&quot;&gt;&#10;          {/* Logo */}&#10;          &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;            &lt;Link to=&quot;/&quot; className=&quot;flex items-center&quot;&gt;&#10;              &lt;div className=&quot;w-10 h-10 bg-primary-600 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-white font-bold text-xl&quot;&gt;T&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;span className=&quot;ml-2 text-xl font-bold text-gray-900&quot;&gt;TravelCo&lt;/span&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Desktop Navigation */}&#10;          &lt;nav className=&quot;hidden md:flex space-x-8&quot;&gt;&#10;            {navigation.map((item) =&gt; (&#10;              &lt;Link&#10;                key={item.name}&#10;                to={item.href}&#10;                className=&quot;text-gray-700 hover:text-primary-600 px-3 py-2 text-sm font-medium transition-colors duration-200&quot;&#10;              &gt;&#10;                {item.name}&#10;              &lt;/Link&gt;&#10;            ))}&#10;          &lt;/nav&gt;&#10;&#10;          {/* User Menu */}&#10;          &lt;div className=&quot;hidden md:flex items-center space-x-4&quot;&gt;&#10;            {state.isAuthenticated ? (&#10;              &lt;div className=&quot;relative&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setIsUserMenuOpen(!isUserMenuOpen)}&#10;                  className=&quot;flex items-center space-x-2 text-gray-700 hover:text-primary-600 focus:outline-none&quot;&#10;                &gt;&#10;                  &lt;div className=&quot;w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center&quot;&gt;&#10;                    &lt;Icon icon={Icons.FiUser} className=&quot;w-4 h-4 text-primary-600&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;text-sm font-medium&quot;&gt;{state.user?.name}&lt;/span&gt;&#10;                &lt;/button&gt;&#10;&#10;                {isUserMenuOpen &amp;&amp; (&#10;                  &lt;div className=&quot;absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50&quot;&gt;&#10;                    &lt;Link&#10;                      to=&quot;/profile&quot;&#10;                      className=&quot;flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100&quot;&#10;                      onClick={() =&gt; setIsUserMenuOpen(false)}&#10;                    &gt;&#10;                      &lt;Icon icon={Icons.FiUser} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      Profile&#10;                    &lt;/Link&gt;&#10;                    &lt;Link&#10;                      to=&quot;/my-bookings&quot;&#10;                      className=&quot;flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100&quot;&#10;                      onClick={() =&gt; setIsUserMenuOpen(false)}&#10;                    &gt;&#10;                      &lt;Icon icon={Icons.FiSettings} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      My Bookings&#10;                    &lt;/Link&gt;&#10;                    {state.user?.role === 'admin' &amp;&amp; (&#10;                      &lt;Link&#10;                        to=&quot;/admin&quot;&#10;                        className=&quot;flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100&quot;&#10;                        onClick={() =&gt; setIsUserMenuOpen(false)}&#10;                      &gt;&#10;                        &lt;Icon icon={Icons.FiSettings} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                        Admin Panel&#10;                      &lt;/Link&gt;&#10;                    )}&#10;                    &lt;button&#10;                      onClick={handleLogout}&#10;                      className=&quot;flex items-center w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100&quot;&#10;                    &gt;&#10;                      &lt;Icon icon={Icons.FiLogOut} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      Logout&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                &lt;Link&#10;                  to=&quot;/login&quot;&#10;                  className=&quot;text-gray-700 hover:text-primary-600 px-3 py-2 text-sm font-medium&quot;&#10;                &gt;&#10;                  Login&#10;                &lt;/Link&gt;&#10;                &lt;Link&#10;                  to=&quot;/register&quot;&#10;                  className=&quot;btn-primary text-sm&quot;&#10;                &gt;&#10;                  Sign Up&#10;                &lt;/Link&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Mobile menu button */}&#10;          &lt;div className=&quot;md:hidden&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setIsMenuOpen(!isMenuOpen)}&#10;              className=&quot;text-gray-700 hover:text-primary-600 focus:outline-none&quot;&#10;            &gt;&#10;              {isMenuOpen ? (&#10;                &lt;Icon icon={Icons.FiX} className=&quot;w-6 h-6&quot; /&gt;&#10;              ) : (&#10;                &lt;Icon icon={Icons.FiMenu} className=&quot;w-6 h-6&quot; /&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Mobile Navigation */}&#10;        {isMenuOpen &amp;&amp; (&#10;          &lt;div className=&quot;md:hidden&quot;&gt;&#10;            &lt;div className=&quot;px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t&quot;&gt;&#10;              {navigation.map((item) =&gt; (&#10;                &lt;Link&#10;                  key={item.name}&#10;                  to={item.href}&#10;                  className=&quot;text-gray-700 hover:text-primary-600 block px-3 py-2 text-base font-medium&quot;&#10;                  onClick={() =&gt; setIsMenuOpen(false)}&#10;                &gt;&#10;                  {item.name}&#10;                &lt;/Link&gt;&#10;              ))}&#10;&#10;              {state.isAuthenticated ? (&#10;                &lt;div className=&quot;pt-4 border-t border-gray-200&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center px-3 py-2&quot;&gt;&#10;                    &lt;div className=&quot;w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center&quot;&gt;&#10;                      &lt;Icon icon={Icons.FiUser} className=&quot;w-4 h-4 text-primary-600&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;span className=&quot;ml-2 text-sm font-medium text-gray-700&quot;&gt;{state.user?.name}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Link&#10;                    to=&quot;/profile&quot;&#10;                    className=&quot;block px-3 py-2 text-base font-medium text-gray-700 hover:text-primary-600&quot;&#10;                    onClick={() =&gt; setIsMenuOpen(false)}&#10;                  &gt;&#10;                    Profile&#10;                  &lt;/Link&gt;&#10;                  &lt;Link&#10;                    to=&quot;/my-bookings&quot;&#10;                    className=&quot;block px-3 py-2 text-base font-medium text-gray-700 hover:text-primary-600&quot;&#10;                    onClick={() =&gt; setIsMenuOpen(false)}&#10;                  &gt;&#10;                    My Bookings&#10;                  &lt;/Link&gt;&#10;                  {state.user?.role === 'admin' &amp;&amp; (&#10;                    &lt;Link&#10;                      to=&quot;/admin&quot;&#10;                      className=&quot;block px-3 py-2 text-base font-medium text-gray-700 hover:text-primary-600&quot;&#10;                      onClick={() =&gt; setIsMenuOpen(false)}&#10;                    &gt;&#10;                      Admin Panel&#10;                    &lt;/Link&gt;&#10;                  )}&#10;                  &lt;button&#10;                    onClick={handleLogout}&#10;                    className=&quot;block w-full text-left px-3 py-2 text-base font-medium text-gray-700 hover:text-primary-600&quot;&#10;                  &gt;&#10;                    Logout&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;pt-4 border-t border-gray-200&quot;&gt;&#10;                  &lt;Link&#10;                    to=&quot;/login&quot;&#10;                    className=&quot;block px-3 py-2 text-base font-medium text-gray-700 hover:text-primary-600&quot;&#10;                    onClick={() =&gt; setIsMenuOpen(false)}&#10;                  &gt;&#10;                    Login&#10;                  &lt;/Link&gt;&#10;                  &lt;Link&#10;                    to=&quot;/register&quot;&#10;                    className=&quot;block px-3 py-2 text-base font-medium text-gray-700 hover:text-primary-600&quot;&#10;                    onClick={() =&gt; setIsMenuOpen(false)}&#10;                  &gt;&#10;                    Sign Up&#10;                  &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/header&gt;&#10;  );&#10;};&#10;&#10;export default Header;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/contexts/AuthContext.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/contexts/AuthContext.tsx" />
              <option name="updatedContent" value="import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';&#10;import { User } from '../types';&#10;import { authAPI } from '../utils/api';&#10;&#10;interface AuthState {&#10;  user: User | null;&#10;  token: string | null;&#10;  isLoading: boolean;&#10;  isAuthenticated: boolean;&#10;}&#10;&#10;interface AuthAction {&#10;  type: 'LOGIN_START' | 'LOGIN_SUCCESS' | 'LOGIN_FAILURE' | 'LOGOUT' | 'UPDATE_PROFILE' | 'SET_LOADING';&#10;  payload?: any;&#10;}&#10;&#10;const initialState: AuthState = {&#10;  user: null,&#10;  token: localStorage.getItem('token'),&#10;  isLoading: true,&#10;  isAuthenticated: false,&#10;};&#10;&#10;const AuthContext = createContext&lt;{&#10;  state: AuthState;&#10;  login: (email: string, password: string) =&gt; Promise&lt;void&gt;;&#10;  register: (data: any) =&gt; Promise&lt;void&gt;;&#10;  logout: () =&gt; void;&#10;  updateProfile: (data: Partial&lt;User&gt;) =&gt; Promise&lt;void&gt;;&#10;}&gt;({&#10;  state: initialState,&#10;  login: async () =&gt; {},&#10;  register: async () =&gt; {},&#10;  logout: () =&gt; {},&#10;  updateProfile: async () =&gt; {},&#10;});&#10;&#10;const authReducer = (state: AuthState, action: AuthAction): AuthState =&gt; {&#10;  switch (action.type) {&#10;    case 'LOGIN_START':&#10;      return {&#10;        ...state,&#10;        isLoading: true,&#10;      };&#10;    case 'LOGIN_SUCCESS':&#10;      return {&#10;        ...state,&#10;        user: action.payload.user,&#10;        token: action.payload.token,&#10;        isLoading: false,&#10;        isAuthenticated: true,&#10;      };&#10;    case 'LOGIN_FAILURE':&#10;      return {&#10;        ...state,&#10;        user: null,&#10;        token: null,&#10;        isLoading: false,&#10;        isAuthenticated: false,&#10;      };&#10;    case 'LOGOUT':&#10;      return {&#10;        ...state,&#10;        user: null,&#10;        token: null,&#10;        isAuthenticated: false,&#10;      };&#10;    case 'UPDATE_PROFILE':&#10;      return {&#10;        ...state,&#10;        user: action.payload,&#10;      };&#10;    case 'SET_LOADING':&#10;      return {&#10;        ...state,&#10;        isLoading: action.payload,&#10;      };&#10;    default:&#10;      return state;&#10;  }&#10;};&#10;&#10;export const AuthProvider: React.FC&lt;{ children: ReactNode }&gt; = ({ children }) =&gt; {&#10;  const [state, dispatch] = useReducer(authReducer, initialState);&#10;&#10;  useEffect(() =&gt; {&#10;    const token = localStorage.getItem('token');&#10;    if (token) {&#10;      fetchUserProfile();&#10;    } else {&#10;      dispatch({ type: 'SET_LOADING', payload: false });&#10;    }&#10;  }, []);&#10;&#10;  const fetchUserProfile = async () =&gt; {&#10;    try {&#10;      const response = await authAPI.getProfile();&#10;      dispatch({&#10;        type: 'LOGIN_SUCCESS',&#10;        payload: {&#10;          user: response.data.user,&#10;          token: localStorage.getItem('token'),&#10;        },&#10;      });&#10;    } catch (error) {&#10;      localStorage.removeItem('token');&#10;      localStorage.removeItem('user');&#10;      dispatch({ type: 'LOGIN_FAILURE' });&#10;    }&#10;  };&#10;&#10;  const login = async (email: string, password: string) =&gt; {&#10;    try {&#10;      dispatch({ type: 'LOGIN_START' });&#10;      const response = await authAPI.login({ email, password });&#10;      &#10;      localStorage.setItem('token', response.data.token);&#10;      localStorage.setItem('user', JSON.stringify(response.data.user));&#10;      &#10;      dispatch({&#10;        type: 'LOGIN_SUCCESS',&#10;        payload: response.data,&#10;      });&#10;    } catch (error: any) {&#10;      dispatch({ type: 'LOGIN_FAILURE' });&#10;      throw new Error(error.response?.data?.message || 'Login failed');&#10;    }&#10;  };&#10;&#10;  const register = async (data: any) =&gt; {&#10;    try {&#10;      dispatch({ type: 'LOGIN_START' });&#10;      const response = await authAPI.register(data);&#10;      &#10;      localStorage.setItem('token', response.data.token);&#10;      localStorage.setItem('user', JSON.stringify(response.data.user));&#10;      &#10;      dispatch({&#10;        type: 'LOGIN_SUCCESS',&#10;        payload: response.data,&#10;      });&#10;    } catch (error: any) {&#10;      dispatch({ type: 'LOGIN_FAILURE' });&#10;      throw new Error(error.response?.data?.message || 'Registration failed');&#10;    }&#10;  };&#10;&#10;  const logout = () =&gt; {&#10;    localStorage.removeItem('token');&#10;    localStorage.removeItem('user');&#10;    dispatch({ type: 'LOGOUT' });&#10;  };&#10;&#10;  const updateProfile = async (data: Partial&lt;User&gt;) =&gt; {&#10;    try {&#10;      const response = await authAPI.updateProfile(data);&#10;      dispatch({&#10;        type: 'UPDATE_PROFILE',&#10;        payload: response.data.user,&#10;      });&#10;      localStorage.setItem('user', JSON.stringify(response.data.user));&#10;    } catch (error: any) {&#10;      throw new Error(error.response?.data?.message || 'Profile update failed');&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;AuthContext.Provider&#10;      value={{&#10;        state,&#10;        login,&#10;        register,&#10;        logout,&#10;        updateProfile,&#10;      }}&#10;    &gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;};&#10;&#10;export const useAuth = () =&gt; {&#10;  const context = useContext(AuthContext);&#10;  if (!context) {&#10;    throw new Error('useAuth must be used within an AuthProvider');&#10;  }&#10;  return context;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/index.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/index.css" />
              <option name="updatedContent" value="@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&amp;family=Playfair+Display:wght@400;500;600;700&amp;display=swap');&#10;@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;/* Custom scrollbar */&#10;::-webkit-scrollbar {&#10;  width: 6px;&#10;}&#10;&#10;::-webkit-scrollbar-track {&#10;  background: #f1f5f9;&#10;}&#10;&#10;::-webkit-scrollbar-thumb {&#10;  background: #cbd5e1;&#10;  border-radius: 3px;&#10;}&#10;&#10;::-webkit-scrollbar-thumb:hover {&#10;  background: #94a3b8;&#10;}&#10;&#10;/* Custom components */&#10;@layer components {&#10;  .btn-primary {&#10;    @apply bg-primary-600 hover:bg-primary-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;&#10;  }&#10;  &#10;  .btn-secondary {&#10;    @apply bg-white hover:bg-gray-50 text-primary-600 font-medium py-3 px-6 rounded-lg border border-primary-600 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;&#10;  }&#10;  &#10;  .input-field {&#10;    @apply w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors duration-200;&#10;  }&#10;  &#10;  .card {&#10;    @apply bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300;&#10;  }&#10;  &#10;  .hero-gradient {&#10;    background: linear-gradient(135deg, rgba(59, 130, 246, 0.9) 0%, rgba(20, 184, 166, 0.9) 100%);&#10;  }&#10;}&#10;&#10;body {&#10;  margin: 0;&#10;  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',&#10;    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',&#10;    sans-serif;&#10;  -webkit-font-smoothing: antialiased;&#10;  -moz-osx-font-smoothing: grayscale;&#10;}&#10;&#10;code {&#10;  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',&#10;    monospace;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Booking.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Booking.tsx" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { useParams, useNavigate } from 'react-router-dom';&#10;import { useQuery, useMutation } from '@tanstack/react-query';&#10;import { useForm, useFieldArray } from 'react-hook-form';&#10;import { yupResolver } from '@hookform/resolvers/yup';&#10;import * as yup from 'yup';&#10;import { toursAPI, bookingsAPI } from '../utils/api';&#10;import { BookingForm, Traveler } from '../types';&#10;import { FiCalendar, FiUsers, FiPlus, FiTrash2, FiCreditCard } from '../components/common/Icons';&#10;import toast from 'react-hot-toast';&#10;&#10;const schema = yup.object({&#10;  startDate: yup.string().required('Start date is required'),&#10;  numberOfTravelers: yup.object({&#10;    adults: yup.number().min(1, 'At least 1 adult required').required(),&#10;    children: yup.number().min(0).required(),&#10;    infants: yup.number().min(0).required(),&#10;  }),&#10;  travelers: yup.array().of(&#10;    yup.object({&#10;      name: yup.string().required('Name is required'),&#10;      age: yup.number().positive('Age must be positive').optional(),&#10;      type: yup.string().oneOf(['adult', 'child', 'infant']).required(),&#10;    })&#10;  ).required('Travelers information is required'),&#10;  specialRequests: yup.string().notRequired(),&#10;  emergencyContact: yup.object({&#10;    name: yup.string().required('Emergency contact name is required'),&#10;    phone: yup.string().required('Emergency contact phone is required'),&#10;    relationship: yup.string().required('Relationship is required'),&#10;  }).notRequired(),&#10;});&#10;&#10;const Booking: React.FC = () =&gt; {&#10;  const { tourId } = useParams&lt;{ tourId: string }&gt;();&#10;  const navigate = useNavigate();&#10;  const [currentStep, setCurrentStep] = useState(1);&#10;  const [pricing, setPricing] = useState&lt;any&gt;(null);&#10;&#10;  const { data: tourData, isLoading: tourLoading } = useQuery({&#10;    queryKey: ['tour-booking', tourId],&#10;    queryFn: () =&gt; toursAPI.getTourBySlug(tourId!),&#10;    enabled: !!tourId,&#10;  });&#10;&#10;  const createBookingMutation = useMutation({&#10;    mutationFn: bookingsAPI.createBooking,&#10;    onSuccess: (data) =&gt; {&#10;      toast.success('Booking created successfully!');&#10;      navigate('/my-bookings');&#10;    },&#10;    onError: (error: any) =&gt; {&#10;      toast.error(error.response?.data?.message || 'Booking failed');&#10;    },&#10;  });&#10;&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    watch,&#10;    control,&#10;    setValue,&#10;    formState: { errors, isSubmitting },&#10;  } = useForm&lt;BookingForm&gt;({&#10;    resolver: yupResolver(schema) as any,&#10;    defaultValues: {&#10;      numberOfTravelers: { adults: 1, children: 0, infants: 0 },&#10;      travelers: [{ name: '', type: 'adult', age: undefined }],&#10;    },&#10;  });&#10;&#10;  const { fields, append, remove } = useFieldArray({&#10;    control,&#10;    name: 'travelers',&#10;  });&#10;&#10;  const watchedValues = watch();&#10;  const tour = tourData?.data.tour;&#10;&#10;  // Update travelers array when number of travelers changes&#10;  useEffect(() =&gt; {&#10;    const { adults, children, infants } = watchedValues.numberOfTravelers;&#10;    const totalTravelers = adults + children + infants;&#10;    const currentTravelers = fields.length;&#10;&#10;    if (totalTravelers &gt; currentTravelers) {&#10;      // Add travelers&#10;      for (let i = currentTravelers; i &lt; totalTravelers; i++) {&#10;        if (i &lt; adults) {&#10;          append({ name: '', type: 'adult', age: undefined });&#10;        } else if (i &lt; adults + children) {&#10;          append({ name: '', type: 'child', age: undefined });&#10;        } else {&#10;          append({ name: '', type: 'infant', age: undefined });&#10;        }&#10;      }&#10;    } else if (totalTravelers &lt; currentTravelers) {&#10;      // Remove travelers&#10;      for (let i = currentTravelers - 1; i &gt;= totalTravelers; i--) {&#10;        remove(i);&#10;      }&#10;    }&#10;  }, [watchedValues.numberOfTravelers, fields.length, append, remove]);&#10;&#10;  // Calculate pricing when form changes&#10;  useEffect(() =&gt; {&#10;    if (tour &amp;&amp; watchedValues.startDate &amp;&amp; watchedValues.numberOfTravelers) {&#10;      const totalTravelers = watchedValues.numberOfTravelers.adults +&#10;                           watchedValues.numberOfTravelers.children +&#10;                           watchedValues.numberOfTravelers.infants;&#10;&#10;      // Simulate pricing calculation&#10;      const basePrice = tour.pricing.basePrice;&#10;      const subtotal = basePrice * totalTravelers;&#10;      const taxes = subtotal * 0.1;&#10;      const total = subtotal + taxes;&#10;&#10;      setPricing({&#10;        basePrice,&#10;        subtotal,&#10;        taxes,&#10;        total,&#10;        totalTravelers,&#10;      });&#10;    }&#10;  }, [tour, watchedValues.startDate, watchedValues.numberOfTravelers]);&#10;&#10;  const onSubmit = (data: BookingForm) =&gt; {&#10;    if (!tour) return;&#10;&#10;    const bookingData = {&#10;      ...data,&#10;      tourId: tour._id,&#10;    };&#10;&#10;    createBookingMutation.mutate(bookingData);&#10;  };&#10;&#10;  const nextStep = () =&gt; {&#10;    if (currentStep &lt; 3) setCurrentStep(currentStep + 1);&#10;  };&#10;&#10;  const prevStep = () =&gt; {&#10;    if (currentStep &gt; 1) setCurrentStep(currentStep - 1);&#10;  };&#10;&#10;  if (tourLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!tour) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900 mb-4&quot;&gt;Tour Not Found&lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;The tour you're trying to book doesn't exist.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        {/* Progress Steps */}&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-center&quot;&gt;&#10;            {[1, 2, 3].map((step) =&gt; (&#10;              &lt;div key={step} className=&quot;flex items-center&quot;&gt;&#10;                &lt;div&#10;                  className={`w-10 h-10 rounded-full flex items-center justify-center font-medium ${&#10;                    step &lt;= currentStep&#10;                      ? 'bg-primary-600 text-white'&#10;                      : 'bg-gray-300 text-gray-500'&#10;                  }`}&#10;                &gt;&#10;                  {step}&#10;                &lt;/div&gt;&#10;                {step &lt; 3 &amp;&amp; (&#10;                  &lt;div&#10;                    className={`w-16 h-1 mx-2 ${&#10;                      step &lt; currentStep ? 'bg-primary-600' : 'bg-gray-300'&#10;                    }`}&#10;                  /&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex justify-center mt-4&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                Step {currentStep} of 3: {&#10;                  currentStep === 1 ? 'Tour Configuration' :&#10;                  currentStep === 2 ? 'Traveler Information' :&#10;                  'Payment &amp; Confirmation'&#10;                }&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;          {/* Main Form */}&#10;          &lt;div className=&quot;lg:col-span-2&quot;&gt;&#10;            &lt;form onSubmit={handleSubmit(onSubmit as any)}&gt;&#10;              {/* Step 1: Tour Configuration */}&#10;              {currentStep === 1 &amp;&amp; (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                  &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-6&quot;&gt;Tour Configuration&lt;/h2&gt;&#10;&#10;                  {/* Start Date */}&#10;                  &lt;div className=&quot;mb-6&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Start Date&#10;                    &lt;/label&gt;&#10;                    &lt;div className=&quot;relative&quot;&gt;&#10;                      &lt;FiCalendar className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5&quot; /&gt;&#10;                      &lt;input&#10;                        {...register('startDate')}&#10;                        type=&quot;date&quot;&#10;                        className={`input-field pl-10 ${errors.startDate ? 'border-red-500' : ''}`}&#10;                        min={new Date().toISOString().split('T')[0]}&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;                    {errors.startDate &amp;&amp; (&#10;                      &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.startDate.message}&lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Number of Travelers */}&#10;                  &lt;div className=&quot;mb-6&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-4&quot;&gt;&#10;                      Number of Travelers&#10;                    &lt;/label&gt;&#10;                    &lt;div className=&quot;grid grid-cols-3 gap-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm text-gray-600 mb-1&quot;&gt;Adults (18+)&lt;/label&gt;&#10;                        &lt;input&#10;                          {...register('numberOfTravelers.adults')}&#10;                          type=&quot;number&quot;&#10;                          min=&quot;1&quot;&#10;                          className=&quot;input-field&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm text-gray-600 mb-1&quot;&gt;Children (2-17)&lt;/label&gt;&#10;                        &lt;input&#10;                          {...register('numberOfTravelers.children')}&#10;                          type=&quot;number&quot;&#10;                          min=&quot;0&quot;&#10;                          className=&quot;input-field&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm text-gray-600 mb-1&quot;&gt;Infants (0-2)&lt;/label&gt;&#10;                        &lt;input&#10;                          {...register('numberOfTravelers.infants')}&#10;                          type=&quot;number&quot;&#10;                          min=&quot;0&quot;&#10;                          className=&quot;input-field&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    {errors.numberOfTravelers?.adults &amp;&amp; (&#10;                      &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.numberOfTravelers.adults.message}&lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-end&quot;&gt;&#10;                    &lt;button&#10;                      type=&quot;button&quot;&#10;                      onClick={nextStep}&#10;                      className=&quot;btn-primary&quot;&#10;                      disabled={!watchedValues.startDate || !pricing}&#10;                    &gt;&#10;                      Next: Traveler Information&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {/* Step 2: Traveler Information */}&#10;              {currentStep === 2 &amp;&amp; (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                  &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-6&quot;&gt;Traveler Information&lt;/h2&gt;&#10;&#10;                  {/* Travelers */}&#10;                  &lt;div className=&quot;space-y-6 mb-8&quot;&gt;&#10;                    {fields.map((field, index) =&gt; (&#10;                      &lt;div key={field.id} className=&quot;border border-gray-200 rounded-lg p-4&quot;&gt;&#10;                        &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;&#10;                          Traveler {index + 1} ({field.type})&#10;                        &lt;/h3&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                          &lt;div&gt;&#10;                            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                              Full Name&#10;                            &lt;/label&gt;&#10;                            &lt;input&#10;                              {...register(`travelers.${index}.name`)}&#10;                              type=&quot;text&quot;&#10;                              className=&quot;input-field&quot;&#10;                              placeholder=&quot;Enter full name&quot;&#10;                            /&gt;&#10;                            {errors.travelers?.[index]?.name &amp;&amp; (&#10;                              &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;&#10;                                {errors.travelers[index]?.name?.message}&#10;                              &lt;/p&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                          &lt;div&gt;&#10;                            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                              Age&#10;                            &lt;/label&gt;&#10;                            &lt;input&#10;                              {...register(`travelers.${index}.age`)}&#10;                              type=&quot;number&quot;&#10;                              className=&quot;input-field&quot;&#10;                              placeholder=&quot;Age&quot;&#10;                            /&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Emergency Contact */}&#10;                  &lt;div className=&quot;border-t pt-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;Emergency Contact&lt;/h3&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                          Name&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          {...register('emergencyContact.name')}&#10;                          type=&quot;text&quot;&#10;                          className=&quot;input-field&quot;&#10;                          placeholder=&quot;Contact name&quot;&#10;                        /&gt;&#10;                        {errors.emergencyContact?.name &amp;&amp; (&#10;                          &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;&#10;                            {errors.emergencyContact.name.message}&#10;                          &lt;/p&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                          Phone&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          {...register('emergencyContact.phone')}&#10;                          type=&quot;tel&quot;&#10;                          className=&quot;input-field&quot;&#10;                          placeholder=&quot;Phone number&quot;&#10;                        /&gt;&#10;                        {errors.emergencyContact?.phone &amp;&amp; (&#10;                          &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;&#10;                            {errors.emergencyContact.phone.message}&#10;                          &lt;/p&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                          Relationship&#10;                        &lt;/label&gt;&#10;                        &lt;select&#10;                          {...register('emergencyContact.relationship')}&#10;                          className=&quot;input-field&quot;&#10;                        &gt;&#10;                          &lt;option value=&quot;&quot;&gt;Select relationship&lt;/option&gt;&#10;                          &lt;option value=&quot;spouse&quot;&gt;Spouse&lt;/option&gt;&#10;                          &lt;option value=&quot;parent&quot;&gt;Parent&lt;/option&gt;&#10;                          &lt;option value=&quot;child&quot;&gt;Child&lt;/option&gt;&#10;                          &lt;option value=&quot;sibling&quot;&gt;Sibling&lt;/option&gt;&#10;                          &lt;option value=&quot;friend&quot;&gt;Friend&lt;/option&gt;&#10;                          &lt;option value=&quot;other&quot;&gt;Other&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                        {errors.emergencyContact?.relationship &amp;&amp; (&#10;                          &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;&#10;                            {errors.emergencyContact.relationship.message}&#10;                          &lt;/p&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Special Requests */}&#10;                  &lt;div className=&quot;mt-6&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Special Requests (Optional)&#10;                    &lt;/label&gt;&#10;                    &lt;textarea&#10;                      {...register('specialRequests')}&#10;                      rows={3}&#10;                      className=&quot;input-field&quot;&#10;                      placeholder=&quot;Any dietary requirements, accessibility needs, or special requests...&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-between mt-6&quot;&gt;&#10;                    &lt;button&#10;                      type=&quot;button&quot;&#10;                      onClick={prevStep}&#10;                      className=&quot;btn-secondary&quot;&#10;                    &gt;&#10;                      Back&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      type=&quot;button&quot;&#10;                      onClick={nextStep}&#10;                      className=&quot;btn-primary&quot;&#10;                    &gt;&#10;                      Next: Payment&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {/* Step 3: Payment */}&#10;              {currentStep === 3 &amp;&amp; (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                  &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-6&quot;&gt;Payment &amp; Confirmation&lt;/h2&gt;&#10;&#10;                  &lt;div className=&quot;mb-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;Payment Options&lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-3&quot;&gt;&#10;                      &lt;label className=&quot;flex items-center p-4 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50&quot;&gt;&#10;                        &lt;input type=&quot;radio&quot; name=&quot;paymentMethod&quot; value=&quot;credit_card&quot; className=&quot;mr-3&quot; defaultChecked /&gt;&#10;                        &lt;FiCreditCard className=&quot;w-5 h-5 mr-2&quot; /&gt;&#10;                        &lt;span&gt;Credit Card (Stripe)&lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                      &lt;label className=&quot;flex items-center p-4 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50&quot;&gt;&#10;                        &lt;input type=&quot;radio&quot; name=&quot;paymentMethod&quot; value=&quot;vnpay&quot; className=&quot;mr-3&quot; /&gt;&#10;                        &lt;span&gt;VNPay (Vietnamese QR Code)&lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                      &lt;label className=&quot;flex items-center p-4 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50&quot;&gt;&#10;                        &lt;input type=&quot;radio&quot; name=&quot;paymentMethod&quot; value=&quot;bank_transfer&quot; className=&quot;mr-3&quot; /&gt;&#10;                        &lt;span&gt;Bank Transfer&lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                    &lt;button&#10;                      type=&quot;button&quot;&#10;                      onClick={prevStep}&#10;                      className=&quot;btn-secondary&quot;&#10;                    &gt;&#10;                      Back&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      type=&quot;submit&quot;&#10;                      disabled={isSubmitting}&#10;                      className=&quot;btn-primary disabled:opacity-50&quot;&#10;                    &gt;&#10;                      {isSubmitting ? 'Creating Booking...' : 'Confirm Booking'}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Booking Summary */}&#10;          &lt;div className=&quot;lg:col-span-1&quot;&gt;&#10;            &lt;div className=&quot;sticky top-4&quot;&gt;&#10;              &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-bold text-gray-900 mb-4&quot;&gt;Booking Summary&lt;/h3&gt;&#10;&#10;                {tour &amp;&amp; (&#10;                  &lt;&gt;&#10;                    &lt;div className=&quot;mb-4&quot;&gt;&#10;                      &lt;img&#10;                        src={tour.images[0]?.url || `https://images.unsplash.com/photo-1469474968028-56623f02e42e?ixlib=rb-4.0.3&amp;auto=format&amp;fit=crop&amp;w=400&amp;q=80`}&#10;                        alt={tour.title}&#10;                        className=&quot;w-full h-32 object-cover rounded-lg&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;h4 className=&quot;font-semibold text-gray-900 mb-2&quot;&gt;{tour.title}&lt;/h4&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600 mb-4&quot;&gt;{tour.destination}&lt;/p&gt;&#10;&#10;                    {watchedValues.startDate &amp;&amp; (&#10;                      &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                          &lt;span&gt;Start Date:&lt;/span&gt;&#10;                          &lt;span&gt;{new Date(watchedValues.startDate).toLocaleDateString()}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                          &lt;span&gt;Duration:&lt;/span&gt;&#10;                          &lt;span&gt;{tour.duration.days}D/{tour.duration.nights}N&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/&gt;&#10;                )}&#10;&#10;                {pricing &amp;&amp; (&#10;                  &lt;div className=&quot;border-t pt-4 mt-4&quot;&gt;&#10;                    &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                        &lt;span&gt;Base Price x {pricing.totalTravelers}:&lt;/span&gt;&#10;                        &lt;span&gt;${pricing.subtotal}&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                        &lt;span&gt;Taxes &amp; Fees:&lt;/span&gt;&#10;                        &lt;span&gt;${pricing.taxes.toFixed(2)}&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t pt-2 font-bold&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                          &lt;span&gt;Total:&lt;/span&gt;&#10;                          &lt;span&gt;${pricing.total.toFixed(2)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Booking;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/MyBookings.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/MyBookings.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#13;&#10;import { useQuery } from '@tanstack/react-query';&#13;&#10;import { Link } from 'react-router-dom';&#13;&#10;import { bookingsAPI } from '../utils/api';&#13;&#10;import { Booking } from '../types';&#13;&#10;import { &#13;&#10;  FiFilter, FiCalendar, FiMapPin, FiClock, FiUsers, &#13;&#10;  FiCreditCard, FiEye, FiX, FiDownload &#13;&#10;} from '../components/common/Icons';&#13;&#10;import { format } from 'date-fns';&#13;&#10;&#13;&#10;const MyBookings: React.FC = () =&gt; {&#13;&#10;  const [statusFilter, setStatusFilter] = useState&lt;string&gt;('');&#13;&#10;  const [currentPage, setCurrentPage] = useState(1);&#13;&#10;&#13;&#10;  const { data: bookingsData, isLoading, error } = useQuery({&#13;&#10;    queryKey: ['user-bookings', currentPage, statusFilter],&#13;&#10;    queryFn: () =&gt; bookingsAPI.getUserBookings(currentPage, statusFilter || undefined),&#13;&#10;  });&#13;&#10;&#13;&#10;  const bookings = bookingsData?.data.data || [];&#13;&#10;  const pagination = bookingsData?.data.pagination;&#13;&#10;&#13;&#10;  const statusOptions = [&#13;&#10;    { value: '', label: 'All Bookings' },&#13;&#10;    { value: 'pending', label: 'Pending' },&#13;&#10;    { value: 'confirmed', label: 'Confirmed' },&#13;&#10;    { value: 'in_progress', label: 'In Progress' },&#13;&#10;    { value: 'completed', label: 'Completed' },&#13;&#10;    { value: 'cancelled', label: 'Cancelled' },&#13;&#10;  ];&#13;&#10;&#13;&#10;  const getStatusColor = (status: string) =&gt; {&#13;&#10;    switch (status) {&#13;&#10;      case 'pending':&#13;&#10;        return 'bg-yellow-100 text-yellow-800';&#13;&#10;      case 'confirmed':&#13;&#10;        return 'bg-blue-100 text-blue-800';&#13;&#10;      case 'in_progress':&#13;&#10;        return 'bg-green-100 text-green-800';&#13;&#10;      case 'completed':&#13;&#10;        return 'bg-gray-100 text-gray-800';&#13;&#10;      case 'cancelled':&#13;&#10;        return 'bg-red-100 text-red-800';&#13;&#10;      default:&#13;&#10;        return 'bg-gray-100 text-gray-800';&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const getPaymentStatusColor = (status: string) =&gt; {&#13;&#10;    switch (status) {&#13;&#10;      case 'paid':&#13;&#10;        return 'bg-green-100 text-green-800';&#13;&#10;      case 'pending':&#13;&#10;        return 'bg-yellow-100 text-yellow-800';&#13;&#10;      case 'failed':&#13;&#10;        return 'bg-red-100 text-red-800';&#13;&#10;      case 'refunded':&#13;&#10;        return 'bg-purple-100 text-purple-800';&#13;&#10;      default:&#13;&#10;        return 'bg-gray-100 text-gray-800';&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  if (isLoading) {&#13;&#10;    return (&#13;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#13;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#13;&#10;          &lt;div className=&quot;animate-pulse space-y-6&quot;&gt;&#13;&#10;            {[...Array(3)].map((_, index) =&gt; (&#13;&#10;              &lt;div key={index} className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#13;&#10;                &lt;div className=&quot;h-4 bg-gray-300 rounded w-1/4 mb-4&quot;&gt;&lt;/div&gt;&#13;&#10;                &lt;div className=&quot;h-6 bg-gray-300 rounded w-1/2 mb-2&quot;&gt;&lt;/div&gt;&#13;&#10;                &lt;div className=&quot;h-4 bg-gray-300 rounded w-1/3&quot;&gt;&lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ))}&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#13;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#13;&#10;        {/* Header */}&#13;&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#13;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900 mb-4&quot;&gt;My Bookings&lt;/h1&gt;&#13;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;Manage and view all your travel bookings in one place&lt;/p&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Filters */}&#13;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 mb-8&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4&quot;&gt;&#13;&#10;            &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#13;&#10;              &lt;FiFilter className=&quot;w-5 h-5 text-gray-400&quot; /&gt;&#13;&#10;              &lt;select&#13;&#10;                value={statusFilter}&#13;&#10;                onChange={(e) =&gt; {&#13;&#10;                  setStatusFilter(e.target.value);&#13;&#10;                  setCurrentPage(1);&#13;&#10;                }}&#13;&#10;                className=&quot;input-field min-w-48&quot;&#13;&#10;              &gt;&#13;&#10;                {statusOptions.map(option =&gt; (&#13;&#10;                  &lt;option key={option.value} value={option.value}&gt;&#13;&#10;                    {option.label}&#13;&#10;                  &lt;/option&gt;&#13;&#10;                ))}&#13;&#10;              &lt;/select&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {pagination &amp;&amp; (&#13;&#10;              &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#13;&#10;                Showing {((pagination.currentPage - 1) * 10) + 1}-{Math.min(pagination.currentPage * 10, pagination.totalBookings || pagination.totalItems)} of {pagination.totalBookings || pagination.totalItems} bookings&#13;&#10;              &lt;/p&gt;&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Bookings List */}&#13;&#10;        {error ? (&#13;&#10;          &lt;div className=&quot;bg-white rounded-lg shadow-lg p-12 text-center&quot;&gt;&#13;&#10;            &lt;p className=&quot;text-gray-500&quot;&gt;Error loading bookings. Please try again.&lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        ) : !bookings.length ? (&#13;&#10;          &lt;div className=&quot;bg-white rounded-lg shadow-lg p-12 text-center&quot;&gt;&#13;&#10;            &lt;FiCalendar className=&quot;w-16 h-16 text-gray-300 mx-auto mb-4&quot; /&gt;&#13;&#10;            &lt;h3 className=&quot;text-xl font-semibold text-gray-900 mb-2&quot;&gt;No bookings found&lt;/h3&gt;&#13;&#10;            &lt;p className=&quot;text-gray-600 mb-6&quot;&gt;&#13;&#10;              {statusFilter&#13;&#10;                ? `No ${statusFilter} bookings found. Try adjusting your filters.`&#13;&#10;                : &quot;You haven't made any bookings yet. Start exploring our amazing tours!&quot;&#13;&#10;              }&#13;&#10;            &lt;/p&gt;&#13;&#10;            &lt;Link to=&quot;/tours&quot; className=&quot;btn-primary&quot;&gt;&#13;&#10;              Browse Tours&#13;&#10;            &lt;/Link&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        ) : (&#13;&#10;          &lt;div className=&quot;space-y-6&quot;&gt;&#13;&#10;            {bookings.map((booking: Booking) =&gt; (&#13;&#10;              &lt;BookingCard key={booking._id} booking={booking} getStatusColor={getStatusColor} getPaymentStatusColor={getPaymentStatusColor} /&gt;&#13;&#10;            ))}&#13;&#10;          &lt;/div&gt;&#13;&#10;        )}&#13;&#10;&#13;&#10;        {/* Pagination */}&#13;&#10;        {pagination &amp;&amp; pagination.totalPages &gt; 1 &amp;&amp; (&#13;&#10;          &lt;div className=&quot;flex justify-center mt-8&quot;&gt;&#13;&#10;            &lt;nav className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;              &lt;button&#13;&#10;                onClick={() =&gt; setCurrentPage(pagination.currentPage - 1)}&#13;&#10;                disabled={!pagination.hasPrev}&#13;&#10;                className=&quot;px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#13;&#10;              &gt;&#13;&#10;                Previous&#13;&#10;              &lt;/button&gt;&#13;&#10;&#13;&#10;              {[...Array(Math.min(5, pagination.totalPages))].map((_, index) =&gt; {&#13;&#10;                const page = index + 1;&#13;&#10;                return (&#13;&#10;                  &lt;button&#13;&#10;                    key={page}&#13;&#10;                    onClick={() =&gt; setCurrentPage(page)}&#13;&#10;                    className={`px-3 py-2 text-sm font-medium rounded-md ${&#13;&#10;                      page === pagination.currentPage&#13;&#10;                        ? 'bg-primary-600 text-white'&#13;&#10;                        : 'text-gray-500 bg-white border border-gray-300 hover:bg-gray-50'&#13;&#10;                    }`}&#13;&#10;                  &gt;&#13;&#10;                    {page}&#13;&#10;                  &lt;/button&gt;&#13;&#10;                );&#13;&#10;              })}&#13;&#10;&#13;&#10;              &lt;button&#13;&#10;                onClick={() =&gt; setCurrentPage(pagination.currentPage + 1)}&#13;&#10;                disabled={!pagination.hasNext}&#13;&#10;                className=&quot;px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#13;&#10;              &gt;&#13;&#10;                Next&#13;&#10;              &lt;/button&gt;&#13;&#10;            &lt;/nav&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        )}&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;interface BookingCardProps {&#13;&#10;  booking: Booking;&#13;&#10;  getStatusColor: (status: string) =&gt; string;&#13;&#10;  getPaymentStatusColor: (status: string) =&gt; string;&#13;&#10;}&#13;&#10;&#13;&#10;const BookingCard: React.FC&lt;BookingCardProps&gt; = ({ booking, getStatusColor, getPaymentStatusColor }) =&gt; {&#13;&#10;  const [showDetails, setShowDetails] = useState(false);&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;bg-white rounded-lg shadow-lg overflow-hidden&quot;&gt;&#13;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex flex-col lg:flex-row lg:items-center justify-between mb-4&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex items-center space-x-4 mb-4 lg:mb-0&quot;&gt;&#13;&#10;            &lt;div className=&quot;w-16 h-16 bg-gray-200 rounded-lg overflow-hidden flex-shrink-0&quot;&gt;&#13;&#10;              {booking.tour.images?.[0]?.url ? (&#13;&#10;                &lt;img&#13;&#10;                  src={booking.tour.images[0].url}&#13;&#10;                  alt={booking.tour.title}&#13;&#10;                  className=&quot;w-full h-full object-cover&quot;&#13;&#10;                /&gt;&#13;&#10;              ) : (&#13;&#10;                &lt;div className=&quot;w-full h-full bg-gray-300 flex items-center justify-center&quot;&gt;&#13;&#10;                  &lt;FiMapPin className=&quot;w-6 h-6 text-gray-500&quot; /&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              )}&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div&gt;&#13;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-900 mb-1&quot;&gt;&#13;&#10;                {booking.tour.title}&#13;&#10;              &lt;/h3&gt;&#13;&#10;              &lt;p className=&quot;text-sm text-gray-600 flex items-center&quot;&gt;&#13;&#10;                &lt;FiMapPin className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;                {booking.tour.destination}&#13;&#10;              &lt;/p&gt;&#13;&#10;              &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#13;&#10;                Booking #{booking.bookingNumber}&#13;&#10;              &lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4&quot;&gt;&#13;&#10;            &lt;div className=&quot;flex space-x-2&quot;&gt;&#13;&#10;              &lt;span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(booking.status)}`}&gt;&#13;&#10;                {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}&#13;&#10;              &lt;/span&gt;&#13;&#10;              &lt;span className={`px-3 py-1 rounded-full text-xs font-medium ${getPaymentStatusColor(booking.payment.status)}`}&gt;&#13;&#10;                {booking.payment.status.charAt(0).toUpperCase() + booking.payment.status.slice(1)}&#13;&#10;              &lt;/span&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className=&quot;text-right&quot;&gt;&#13;&#10;              &lt;div className=&quot;text-lg font-bold text-primary-600&quot;&gt;&#13;&#10;                ${booking.pricing.totalAmount.toFixed(2)}&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className=&quot;text-sm text-gray-500&quot;&gt;&#13;&#10;                {booking.pricing.currency}&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-4&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex items-center text-sm text-gray-600&quot;&gt;&#13;&#10;            &lt;FiCalendar className=&quot;w-4 h-4 mr-2&quot; /&gt;&#13;&#10;            &lt;div&gt;&#13;&#10;              &lt;div className=&quot;font-medium&quot;&gt;Start Date&lt;/div&gt;&#13;&#10;              &lt;div&gt;{format(new Date(booking.bookingDetails.startDate), 'MMM dd, yyyy')}&lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className=&quot;flex items-center text-sm text-gray-600&quot;&gt;&#13;&#10;            &lt;FiClock className=&quot;w-4 h-4 mr-2&quot; /&gt;&#13;&#10;            &lt;div&gt;&#13;&#10;              &lt;div className=&quot;font-medium&quot;&gt;Duration&lt;/div&gt;&#13;&#10;              &lt;div&gt;{booking.tour.duration.days}D/{booking.tour.duration.nights}N&lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className=&quot;flex items-center text-sm text-gray-600&quot;&gt;&#13;&#10;            &lt;FiUsers className=&quot;w-4 h-4 mr-2&quot; /&gt;&#13;&#10;            &lt;div&gt;&#13;&#10;              &lt;div className=&quot;font-medium&quot;&gt;Travelers&lt;/div&gt;&#13;&#10;              &lt;div&gt;{booking.bookingDetails.totalTravelers} people&lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className=&quot;flex items-center text-sm text-gray-600&quot;&gt;&#13;&#10;            &lt;FiCreditCard className=&quot;w-4 h-4 mr-2&quot; /&gt;&#13;&#10;            &lt;div&gt;&#13;&#10;              &lt;div className=&quot;font-medium&quot;&gt;Payment&lt;/div&gt;&#13;&#10;              &lt;div&gt;{booking.payment.method || 'Not specified'}&lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#13;&#10;          &lt;button&#13;&#10;            onClick={() =&gt; setShowDetails(!showDetails)}&#13;&#10;            className=&quot;btn-secondary text-sm flex items-center&quot;&#13;&#10;          &gt;&#13;&#10;            &lt;FiEye className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;            {showDetails ? 'Hide Details' : 'View Details'}&#13;&#10;          &lt;/button&gt;&#13;&#10;&#13;&#10;          {booking.status !== 'cancelled' &amp;&amp; booking.status !== 'completed' &amp;&amp; (&#13;&#10;            &lt;button className=&quot;text-sm px-4 py-2 text-red-600 border border-red-600 rounded-lg hover:bg-red-50 flex items-center&quot;&gt;&#13;&#10;              &lt;FiX className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;              Cancel Booking&#13;&#10;            &lt;/button&gt;&#13;&#10;          )}&#13;&#10;&#13;&#10;          &lt;button className=&quot;text-sm px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 flex items-center&quot;&gt;&#13;&#10;            &lt;FiDownload className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;            Download Invoice&#13;&#10;          &lt;/button&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Expanded Details */}&#13;&#10;        {showDetails &amp;&amp; (&#13;&#10;          &lt;div className=&quot;mt-6 pt-6 border-t border-gray-200&quot;&gt;&#13;&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#13;&#10;              {/* Travelers */}&#13;&#10;              &lt;div&gt;&#13;&#10;                &lt;h4 className=&quot;font-semibold text-gray-900 mb-3&quot;&gt;Travelers&lt;/h4&gt;&#13;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#13;&#10;                  {booking.travelers.map((traveler, index) =&gt; (&#13;&#10;                    &lt;div key={index} className=&quot;flex justify-between items-center text-sm&quot;&gt;&#13;&#10;                      &lt;span&gt;{traveler.name}&lt;/span&gt;&#13;&#10;                      &lt;span className=&quot;text-gray-500 capitalize&quot;&gt;&#13;&#10;                        {traveler.type} {traveler.age &amp;&amp; `(${traveler.age}y)`}&#13;&#10;                      &lt;/span&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  ))}&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Emergency Contact */}&#13;&#10;              {booking.emergencyContact &amp;&amp; (&#13;&#10;                &lt;div&gt;&#13;&#10;                  &lt;h4 className=&quot;font-semibold text-gray-900 mb-3&quot;&gt;Emergency Contact&lt;/h4&gt;&#13;&#10;                  &lt;div className=&quot;text-sm space-y-1&quot;&gt;&#13;&#10;                    &lt;div&gt;&lt;span className=&quot;font-medium&quot;&gt;Name:&lt;/span&gt; {booking.emergencyContact.name}&lt;/div&gt;&#13;&#10;                    &lt;div&gt;&lt;span className=&quot;font-medium&quot;&gt;Phone:&lt;/span&gt; {booking.emergencyContact.phone}&lt;/div&gt;&#13;&#10;                    &lt;div&gt;&lt;span className=&quot;font-medium&quot;&gt;Relationship:&lt;/span&gt; {booking.emergencyContact.relationship}&lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              )}&#13;&#10;&#13;&#10;              {/* Special Requests */}&#13;&#10;              {booking.specialRequests &amp;&amp; (&#13;&#10;                &lt;div className=&quot;lg:col-span-2&quot;&gt;&#13;&#10;                  &lt;h4 className=&quot;font-semibold text-gray-900 mb-3&quot;&gt;Special Requests&lt;/h4&gt;&#13;&#10;                  &lt;p className=&quot;text-sm text-gray-600&quot;&gt;{booking.specialRequests}&lt;/p&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              )}&#13;&#10;&#13;&#10;              {/* Payment Details */}&#13;&#10;              &lt;div className=&quot;lg:col-span-2&quot;&gt;&#13;&#10;                &lt;h4 className=&quot;font-semibold text-gray-900 mb-3&quot;&gt;Payment Details&lt;/h4&gt;&#13;&#10;                &lt;div className=&quot;bg-gray-50 rounded-lg p-4&quot;&gt;&#13;&#10;                  &lt;div className=&quot;grid grid-cols-2 gap-4 text-sm&quot;&gt;&#13;&#10;                    &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                      &lt;span&gt;Subtotal:&lt;/span&gt;&#13;&#10;                      &lt;span&gt;${booking.pricing.subtotal.toFixed(2)}&lt;/span&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                      &lt;span&gt;Taxes &amp; Fees:&lt;/span&gt;&#13;&#10;                      &lt;span&gt;${booking.pricing.taxes.toFixed(2)}&lt;/span&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;div className=&quot;flex justify-between font-semibold border-t pt-2&quot;&gt;&#13;&#10;                      &lt;span&gt;Total:&lt;/span&gt;&#13;&#10;                      &lt;span&gt;${booking.pricing.totalAmount.toFixed(2)}&lt;/span&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;div className=&quot;flex justify-between&quot;&gt;&#13;&#10;                      &lt;span&gt;Paid Amount:&lt;/span&gt;&#13;&#10;                      &lt;span&gt;${booking.payment.paidAmount.toFixed(2)}&lt;/span&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  {booking.payment.transactionId &amp;&amp; (&#13;&#10;                    &lt;div className=&quot;mt-2 text-xs text-gray-500&quot;&gt;&#13;&#10;                      Transaction ID: {booking.payment.transactionId}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  )}&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        )}&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default MyBookings;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Profile.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Profile.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { useQuery, useMutation } from '@tanstack/react-query';&#10;import { useForm } from 'react-hook-form';&#10;import { yupResolver } from '@hookform/resolvers/yup';&#10;import * as yup from 'yup';&#10;import { useAuth } from '../contexts/AuthContext';&#10;import { authAPI } from '../utils/api';&#10;import { User } from '../types';&#10;import { FiUser, FiMail, FiPhone, FiMapPin, FiSettings, FiLock, FiSave, FiEdit3 } from '../components/common/Icons';&#10;import toast from 'react-hot-toast';&#10;&#10;const profileSchema = yup.object({&#10;  name: yup.string().min(2, 'Name must be at least 2 characters').required('Name is required'),&#10;  email: yup.string().email('Invalid email').required('Email is required'),&#10;  phone: yup.string().optional(),&#10;  country: yup.string().optional(),&#10;});&#10;&#10;const passwordSchema = yup.object({&#10;  currentPassword: yup.string().required('Current password is required'),&#10;  newPassword: yup.string().min(6, 'Password must be at least 6 characters').required('New password is required'),&#10;  confirmPassword: yup.string()&#10;    .oneOf([yup.ref('newPassword')], 'Passwords must match')&#10;    .required('Please confirm your password'),&#10;});&#10;&#10;interface ProfileFormData {&#10;  name: string;&#10;  email: string;&#10;  phone?: string;&#10;  country?: string;&#10;}&#10;&#10;interface PasswordFormData {&#10;  currentPassword: string;&#10;  newPassword: string;&#10;  confirmPassword: string;&#10;}&#10;&#10;const Profile: React.FC = () =&gt; {&#10;  const { state, updateProfile } = useAuth();&#10;  const [activeTab, setActiveTab] = useState('profile');&#10;  const [isEditing, setIsEditing] = useState(false);&#10;&#10;  const { data: profileData, refetch } = useQuery({&#10;    queryKey: ['profile'],&#10;    queryFn: authAPI.getProfile,&#10;    enabled: !!state.user,&#10;  });&#10;&#10;  const updateProfileMutation = useMutation({&#10;    mutationFn: authAPI.updateProfile,&#10;    onSuccess: (data) =&gt; {&#10;      updateProfile(data.data.user);&#10;      setIsEditing(false);&#10;      toast.success('Profile updated successfully!');&#10;      refetch();&#10;    },&#10;    onError: (error: any) =&gt; {&#10;      toast.error(error.response?.data?.message || 'Failed to update profile');&#10;    },&#10;  });&#10;&#10;  const changePasswordMutation = useMutation({&#10;    mutationFn: authAPI.changePassword,&#10;    onSuccess: () =&gt; {&#10;      toast.success('Password changed successfully!');&#10;      resetPassword();&#10;    },&#10;    onError: (error: any) =&gt; {&#10;      toast.error(error.response?.data?.message || 'Failed to change password');&#10;    },&#10;  });&#10;&#10;  const {&#10;    register: registerProfile,&#10;    handleSubmit: handleProfileSubmit,&#10;    formState: { errors: profileErrors, isSubmitting: isUpdatingProfile },&#10;    reset: resetProfile,&#10;  } = useForm&lt;ProfileFormData&gt;({&#10;    resolver: yupResolver(profileSchema) as any,&#10;    defaultValues: {&#10;      name: profileData?.data.user.name || '',&#10;      email: profileData?.data.user.email || '',&#10;      phone: profileData?.data.user.phone || '',&#10;      country: profileData?.data.user.country || '',&#10;    },&#10;  });&#10;&#10;  const {&#10;    register: registerPassword,&#10;    handleSubmit: handlePasswordSubmit,&#10;    formState: { errors: passwordErrors, isSubmitting: isChangingPassword },&#10;    reset: resetPassword,&#10;  } = useForm&lt;PasswordFormData&gt;({&#10;    resolver: yupResolver(passwordSchema),&#10;  });&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (profileData?.data.user) {&#10;      resetProfile({&#10;        name: profileData.data.user.name,&#10;        email: profileData.data.user.email,&#10;        phone: profileData.data.user.phone || '',&#10;        country: profileData.data.user.country || '',&#10;      });&#10;    }&#10;  }, [profileData, resetProfile]);&#10;&#10;  const onProfileSubmit = (data: ProfileFormData) =&gt; {&#10;    updateProfileMutation.mutate(data);&#10;  };&#10;&#10;  const onPasswordSubmit = (data: PasswordFormData) =&gt; {&#10;    changePasswordMutation.mutate({&#10;      currentPassword: data.currentPassword,&#10;      newPassword: data.newPassword,&#10;    });&#10;  };&#10;&#10;  const user = profileData?.data.user;&#10;&#10;  if (!user) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  const tabs = [&#10;    { id: 'profile', name: 'Profile Information', icon: FiUser },&#10;    { id: 'security', name: 'Security', icon: FiLock },&#10;    { id: 'preferences', name: 'Preferences', icon: FiSettings },&#10;  ];&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 mb-8&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;w-20 h-20 bg-primary-100 rounded-full flex items-center justify-center mr-6&quot;&gt;&#10;              {user.avatar ? (&#10;                &lt;img&#10;                  src={user.avatar}&#10;                  alt={user.name}&#10;                  className=&quot;w-20 h-20 rounded-full object-cover&quot;&#10;                /&gt;&#10;              ) : (&#10;                &lt;FiUser className=&quot;w-10 h-10 text-primary-600&quot; /&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;{user.name}&lt;/h1&gt;&#10;              &lt;p className=&quot;text-gray-600&quot;&gt;{user.email}&lt;/p&gt;&#10;              &lt;div className=&quot;flex items-center mt-2&quot;&gt;&#10;                &lt;span className={`px-3 py-1 rounded-full text-xs font-medium ${&#10;                  user.role === 'admin' ? 'bg-red-100 text-red-800' :&#10;                  user.role === 'editor' ? 'bg-blue-100 text-blue-800' :&#10;                  'bg-green-100 text-green-800'&#10;                }`}&gt;&#10;                  {user.role.charAt(0).toUpperCase() + user.role.slice(1)}&#10;                &lt;/span&gt;&#10;                {user.isVerified &amp;&amp; (&#10;                  &lt;span className=&quot;ml-2 px-3 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium&quot;&gt;&#10;                    Verified&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-4 gap-8&quot;&gt;&#10;          {/* Sidebar */}&#10;          &lt;div className=&quot;lg:col-span-1&quot;&gt;&#10;            &lt;div className=&quot;bg-white rounded-lg shadow-lg&quot;&gt;&#10;              &lt;nav className=&quot;space-y-1 p-2&quot;&gt;&#10;                {tabs.map((tab) =&gt; (&#10;                  &lt;button&#10;                    key={tab.id}&#10;                    onClick={() =&gt; setActiveTab(tab.id)}&#10;                    className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-colors ${&#10;                      activeTab === tab.id&#10;                        ? 'bg-primary-100 text-primary-700'&#10;                        : 'text-gray-600 hover:bg-gray-50'&#10;                    }`}&#10;                  &gt;&#10;                    &lt;tab.icon className=&quot;w-5 h-5 mr-3&quot; /&gt;&#10;                    {tab.name}&#10;                  &lt;/button&gt;&#10;                ))}&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Main Content */}&#10;          &lt;div className=&quot;lg:col-span-3&quot;&gt;&#10;            {/* Profile Information Tab */}&#10;            {activeTab === 'profile' &amp;&amp; (&#10;              &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                  &lt;h2 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;Profile Information&lt;/h2&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setIsEditing(!isEditing)}&#10;                    className=&quot;btn-secondary flex items-center&quot;&#10;                  &gt;&#10;                    &lt;FiEdit3 className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                    {isEditing ? 'Cancel' : 'Edit'}&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;form onSubmit={handleProfileSubmit(onProfileSubmit)}&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Full Name&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;FiUser className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5&quot; /&gt;&#10;                        &lt;input&#10;                          {...registerProfile('name')}&#10;                          type=&quot;text&quot;&#10;                          disabled={!isEditing}&#10;                          className={`input-field pl-10 ${!isEditing ? 'bg-gray-50 cursor-not-allowed' : ''} ${&#10;                            profileErrors.name ? 'border-red-500' : ''&#10;                          }`}&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      {profileErrors.name &amp;&amp; (&#10;                        &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{profileErrors.name.message}&lt;/p&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Email Address&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;FiMail className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5&quot; /&gt;&#10;                        &lt;input&#10;                          {...registerProfile('email')}&#10;                          type=&quot;email&quot;&#10;                          disabled={!isEditing}&#10;                          className={`input-field pl-10 ${!isEditing ? 'bg-gray-50 cursor-not-allowed' : ''} ${&#10;                            profileErrors.email ? 'border-red-500' : ''&#10;                          }`}&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      {profileErrors.email &amp;&amp; (&#10;                        &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{profileErrors.email.message}&lt;/p&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Phone Number&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;FiPhone className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5&quot; /&gt;&#10;                        &lt;input&#10;                          {...registerProfile('phone')}&#10;                          type=&quot;tel&quot;&#10;                          disabled={!isEditing}&#10;                          className={`input-field pl-10 ${!isEditing ? 'bg-gray-50 cursor-not-allowed' : ''}`}&#10;                          placeholder=&quot;Enter phone number&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Country&#10;                      &lt;/label&gt;&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;FiMapPin className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5&quot; /&gt;&#10;                        &lt;select&#10;                          {...registerProfile('country')}&#10;                          disabled={!isEditing}&#10;                          className={`input-field pl-10 ${!isEditing ? 'bg-gray-50 cursor-not-allowed' : ''}`}&#10;                        &gt;&#10;                          &lt;option value=&quot;&quot;&gt;Select country&lt;/option&gt;&#10;                          &lt;option value=&quot;Vietnam&quot;&gt;Vietnam&lt;/option&gt;&#10;                          &lt;option value=&quot;United States&quot;&gt;United States&lt;/option&gt;&#10;                          &lt;option value=&quot;Canada&quot;&gt;Canada&lt;/option&gt;&#10;                          &lt;option value=&quot;Australia&quot;&gt;Australia&lt;/option&gt;&#10;                          &lt;option value=&quot;United Kingdom&quot;&gt;United Kingdom&lt;/option&gt;&#10;                          &lt;option value=&quot;Germany&quot;&gt;Germany&lt;/option&gt;&#10;                          &lt;option value=&quot;France&quot;&gt;France&lt;/option&gt;&#10;                          &lt;option value=&quot;Japan&quot;&gt;Japan&lt;/option&gt;&#10;                          &lt;option value=&quot;South Korea&quot;&gt;South Korea&lt;/option&gt;&#10;                          &lt;option value=&quot;Singapore&quot;&gt;Singapore&lt;/option&gt;&#10;                          &lt;option value=&quot;Other&quot;&gt;Other&lt;/option&gt;&#10;                        &lt;/select&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {isEditing &amp;&amp; (&#10;                    &lt;div className=&quot;mt-6 flex justify-end&quot;&gt;&#10;                      &lt;button&#10;                        type=&quot;submit&quot;&#10;                        disabled={isUpdatingProfile}&#10;                        className=&quot;btn-primary disabled:opacity-50 flex items-center&quot;&#10;                      &gt;&#10;                        &lt;FiSave className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                        {isUpdatingProfile ? 'Saving...' : 'Save Changes'}&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/form&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Security Tab */}&#10;            {activeTab === 'security' &amp;&amp; (&#10;              &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-6&quot;&gt;Security Settings&lt;/h2&gt;&#10;&#10;                &lt;form onSubmit={handlePasswordSubmit(onPasswordSubmit)}&gt;&#10;                  &lt;div className=&quot;space-y-6&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Current Password&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        {...registerPassword('currentPassword')}&#10;                        type=&quot;password&quot;&#10;                        className={`input-field ${passwordErrors.currentPassword ? 'border-red-500' : ''}`}&#10;                        placeholder=&quot;Enter current password&quot;&#10;                      /&gt;&#10;                      {passwordErrors.currentPassword &amp;&amp; (&#10;                        &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{passwordErrors.currentPassword.message}&lt;/p&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        New Password&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        {...registerPassword('newPassword')}&#10;                        type=&quot;password&quot;&#10;                        className={`input-field ${passwordErrors.newPassword ? 'border-red-500' : ''}`}&#10;                        placeholder=&quot;Enter new password&quot;&#10;                      /&gt;&#10;                      {passwordErrors.newPassword &amp;&amp; (&#10;                        &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{passwordErrors.newPassword.message}&lt;/p&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                      &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                        Confirm New Password&#10;                      &lt;/label&gt;&#10;                      &lt;input&#10;                        {...registerPassword('confirmPassword')}&#10;                        type=&quot;password&quot;&#10;                        className={`input-field ${passwordErrors.confirmPassword ? 'border-red-500' : ''}`}&#10;                        placeholder=&quot;Confirm new password&quot;&#10;                      /&gt;&#10;                      {passwordErrors.confirmPassword &amp;&amp; (&#10;                        &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{passwordErrors.confirmPassword.message}&lt;/p&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex justify-end&quot;&gt;&#10;                      &lt;button&#10;                        type=&quot;submit&quot;&#10;                        disabled={isChangingPassword}&#10;                        className=&quot;btn-primary disabled:opacity-50 flex items-center&quot;&#10;                      &gt;&#10;                        &lt;FiLock className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                        {isChangingPassword ? 'Changing...' : 'Change Password'}&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/form&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Preferences Tab */}&#10;            {activeTab === 'preferences' &amp;&amp; (&#10;              &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-6&quot;&gt;Preferences&lt;/h2&gt;&#10;&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Language&#10;                    &lt;/label&gt;&#10;                    &lt;select className=&quot;input-field&quot; defaultValue={user.preferences.language}&gt;&#10;                      &lt;option value=&quot;en&quot;&gt;English&lt;/option&gt;&#10;                      &lt;option value=&quot;vi&quot;&gt;Tiếng Việt&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Currency&#10;                    &lt;/label&gt;&#10;                    &lt;select className=&quot;input-field&quot; defaultValue={user.preferences.currency}&gt;&#10;                      &lt;option value=&quot;USD&quot;&gt;US Dollar (USD)&lt;/option&gt;&#10;                      &lt;option value=&quot;VND&quot;&gt;Vietnamese Dong (VND)&lt;/option&gt;&#10;                      &lt;option value=&quot;EUR&quot;&gt;Euro (EUR)&lt;/option&gt;&#10;                      &lt;option value=&quot;GBP&quot;&gt;British Pound (GBP)&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;input&#10;                      type=&quot;checkbox&quot;&#10;                      id=&quot;newsletter&quot;&#10;                      className=&quot;h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded&quot;&#10;                      defaultChecked={user.preferences.newsletter}&#10;                    /&gt;&#10;                    &lt;label htmlFor=&quot;newsletter&quot; className=&quot;ml-2 block text-sm text-gray-900&quot;&gt;&#10;                      Subscribe to newsletter and promotional emails&#10;                    &lt;/label&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-end&quot;&gt;&#10;                    &lt;button className=&quot;btn-primary&quot;&gt;&#10;                      Save Preferences&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Profile;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/TourDetail.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/TourDetail.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#13;&#10;import { useParams, Link } from 'react-router-dom';&#13;&#10;import { useQuery } from '@tanstack/react-query';&#13;&#10;import { toursAPI } from '../utils/api';&#13;&#10;import { FiStar, FiMapPin, FiClock, FiUsers, FiCheck, FiX, FiCalendar, FiCamera } from '../components/common/Icons';&#13;&#10;&#13;&#10;const TourDetail: React.FC = () =&gt; {&#13;&#10;  const { slug } = useParams&lt;{ slug: string }&gt;();&#13;&#10;  const [selectedImage, setSelectedImage] = useState(0);&#13;&#10;  const [showBookingWidget, setShowBookingWidget] = useState(false);&#13;&#10;&#13;&#10;  const { data: tourData, isLoading, error } = useQuery({&#13;&#10;    queryKey: ['tour', slug],&#13;&#10;    queryFn: () =&gt; toursAPI.getTourBySlug(slug!),&#13;&#10;    enabled: !!slug,&#13;&#10;  });&#13;&#10;&#13;&#10;  const tour = tourData?.data.tour;&#13;&#10;&#13;&#10;  if (isLoading) {&#13;&#10;    return (&#13;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#13;&#10;        &lt;div className=&quot;animate-pulse&quot;&gt;&#13;&#10;          &lt;div className=&quot;h-96 bg-gray-300&quot;&gt;&lt;/div&gt;&#13;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 py-8&quot;&gt;&#13;&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#13;&#10;              &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#13;&#10;                &lt;div className=&quot;h-8 bg-gray-300 rounded&quot;&gt;&lt;/div&gt;&#13;&#10;                &lt;div className=&quot;h-4 bg-gray-300 rounded w-3/4&quot;&gt;&lt;/div&gt;&#13;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#13;&#10;                  &lt;div className=&quot;h-4 bg-gray-300 rounded&quot;&gt;&lt;/div&gt;&#13;&#10;                  &lt;div className=&quot;h-4 bg-gray-300 rounded&quot;&gt;&lt;/div&gt;&#13;&#10;                  &lt;div className=&quot;h-4 bg-gray-300 rounded w-2/3&quot;&gt;&lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className=&quot;h-96 bg-gray-300 rounded-lg&quot;&gt;&lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  if (error || !tour) {&#13;&#10;    return (&#13;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#13;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900 mb-4&quot;&gt;Tour Not Found&lt;/h1&gt;&#13;&#10;          &lt;p className=&quot;text-gray-600 mb-8&quot;&gt;The tour you're looking for doesn't exist or has been removed.&lt;/p&gt;&#13;&#10;          &lt;Link to=&quot;/tours&quot; className=&quot;btn-primary&quot;&gt;&#13;&#10;            Browse All Tours&#13;&#10;          &lt;/Link&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#13;&#10;      {/* Hero Image Gallery */}&#13;&#10;      &lt;div className=&quot;relative h-96 md:h-[500px] overflow-hidden&quot;&gt;&#13;&#10;        &lt;img&#13;&#10;          src={tour.images[selectedImage]?.url || `https://images.unsplash.com/photo-1469474968028-56623f02e42e?ixlib=rb-4.0.3&amp;auto=format&amp;fit=crop&amp;w=2070&amp;q=80`}&#13;&#10;          alt={tour.title}&#13;&#10;          className=&quot;w-full h-full object-cover&quot;&#13;&#10;        /&gt;&#13;&#10;        &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-20&quot;&gt;&lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Image Navigation */}&#13;&#10;        {tour.images.length &gt; 1 &amp;&amp; (&#13;&#10;          &lt;div className=&quot;absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2&quot;&gt;&#13;&#10;            {tour.images.slice(0, 5).map((_, index) =&gt; (&#13;&#10;              &lt;button&#13;&#10;                key={index}&#13;&#10;                onClick={() =&gt; setSelectedImage(index)}&#13;&#10;                className={`w-3 h-3 rounded-full transition-all ${&#13;&#10;                  index === selectedImage ? 'bg-white' : 'bg-white/50'&#13;&#10;                }`}&#13;&#10;              /&gt;&#13;&#10;            ))}&#13;&#10;            {tour.images.length &gt; 5 &amp;&amp; (&#13;&#10;              &lt;button className=&quot;text-white text-sm bg-black/50 px-2 py-1 rounded&quot;&gt;&#13;&#10;                &lt;FiCamera className=&quot;w-4 h-4 inline mr-1&quot; /&gt;&#13;&#10;                +{tour.images.length - 5}&#13;&#10;              &lt;/button&gt;&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;        )}&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#13;&#10;        &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#13;&#10;          {/* Main Content */}&#13;&#10;          &lt;div className=&quot;lg:col-span-2&quot;&gt;&#13;&#10;            {/* Tour Header */}&#13;&#10;            &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 mb-6&quot;&gt;&#13;&#10;              &lt;div className=&quot;flex items-center text-sm text-gray-500 mb-2&quot;&gt;&#13;&#10;                &lt;FiMapPin className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;                {tour.destination}&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;h1 className=&quot;text-3xl md:text-4xl font-bold text-gray-900 mb-4&quot;&gt;&#13;&#10;                {tour.title}&#13;&#10;              &lt;/h1&gt;&#13;&#10;&#13;&#10;              &lt;div className=&quot;flex flex-wrap items-center gap-6 text-sm text-gray-600&quot;&gt;&#13;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                  &lt;FiClock className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;                  {tour.duration.days} Days / {tour.duration.nights} Nights&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                  &lt;FiUsers className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;                  Max {tour.maxGroupSize} People&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                  &lt;FiStar className=&quot;w-4 h-4 text-yellow-400 mr-1&quot; /&gt;&#13;&#10;                  {tour.ratings.average.toFixed(1)} ({tour.ratings.count} reviews)&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;span className={`px-3 py-1 rounded-full text-xs font-medium ${&#13;&#10;                  tour.difficulty === 'easy' ? 'bg-green-100 text-green-800' :&#13;&#10;                  tour.difficulty === 'moderate' ? 'bg-yellow-100 text-yellow-800' :&#13;&#10;                  tour.difficulty === 'challenging' ? 'bg-orange-100 text-orange-800' :&#13;&#10;                  'bg-red-100 text-red-800'&#13;&#10;                }`}&gt;&#13;&#10;                  {tour.difficulty.charAt(0).toUpperCase() + tour.difficulty.slice(1)}&#13;&#10;                &lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {/* Description */}&#13;&#10;            &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 mb-6&quot;&gt;&#13;&#10;              &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-4&quot;&gt;About This Tour&lt;/h2&gt;&#13;&#10;              &lt;div className=&quot;prose max-w-none text-gray-600&quot; dangerouslySetInnerHTML={{ __html: tour.description }} /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {/* Highlights */}&#13;&#10;            {tour.highlights.length &gt; 0 &amp;&amp; (&#13;&#10;              &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 mb-6&quot;&gt;&#13;&#10;                &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-4&quot;&gt;Tour Highlights&lt;/h2&gt;&#13;&#10;                &lt;ul className=&quot;grid grid-cols-1 md:grid-cols-2 gap-3&quot;&gt;&#13;&#10;                  {tour.highlights.map((highlight, index) =&gt; (&#13;&#10;                    &lt;li key={index} className=&quot;flex items-start&quot;&gt;&#13;&#10;                      &lt;FiCheck className=&quot;w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0&quot; /&gt;&#13;&#10;                      &lt;span className=&quot;text-gray-600&quot;&gt;{highlight}&lt;/span&gt;&#13;&#10;                    &lt;/li&gt;&#13;&#10;                  ))}&#13;&#10;                &lt;/ul&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            )}&#13;&#10;&#13;&#10;            {/* Itinerary */}&#13;&#10;            &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 mb-6&quot;&gt;&#13;&#10;              &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-4&quot;&gt;Day by Day Itinerary&lt;/h2&gt;&#13;&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#13;&#10;                {tour.itinerary.map((day, index) =&gt; (&#13;&#10;                  &lt;div key={index} className=&quot;border-l-4 border-primary-200 pl-6&quot;&gt;&#13;&#10;                    &lt;div className=&quot;flex items-center mb-2&quot;&gt;&#13;&#10;                      &lt;div className=&quot;w-8 h-8 bg-primary-600 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3&quot;&gt;&#13;&#10;                        {day.day}&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;{day.title}&lt;/h3&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;p className=&quot;text-gray-600 mb-3&quot;&gt;{day.description}&lt;/p&gt;&#13;&#10;                    {day.activities.length &gt; 0 &amp;&amp; (&#13;&#10;                      &lt;div className=&quot;mb-2&quot;&gt;&#13;&#10;                        &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;Activities: &lt;/span&gt;&#13;&#10;                        &lt;span className=&quot;text-sm text-gray-600&quot;&gt;{day.activities.join(', ')}&lt;/span&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    )}&#13;&#10;                    {day.meals.length &gt; 0 &amp;&amp; (&#13;&#10;                      &lt;div className=&quot;mb-2&quot;&gt;&#13;&#10;                        &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;Meals: &lt;/span&gt;&#13;&#10;                        &lt;span className=&quot;text-sm text-gray-600&quot;&gt;{day.meals.join(', ')}&lt;/span&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    )}&#13;&#10;                    {day.accommodation &amp;&amp; (&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;Accommodation: &lt;/span&gt;&#13;&#10;                        &lt;span className=&quot;text-sm text-gray-600&quot;&gt;{day.accommodation}&lt;/span&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    )}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                ))}&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {/* Inclusions &amp; Exclusions */}&#13;&#10;            &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 mb-6&quot;&gt;&#13;&#10;              &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-6&quot;&gt;What's Included&lt;/h2&gt;&#13;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-8&quot;&gt;&#13;&#10;                &lt;div&gt;&#13;&#10;                  &lt;h3 className=&quot;text-lg font-semibold text-green-600 mb-4 flex items-center&quot;&gt;&#13;&#10;                    &lt;FiCheck className=&quot;w-5 h-5 mr-2&quot; /&gt;&#13;&#10;                    Included&#13;&#10;                  &lt;/h3&gt;&#13;&#10;                  &lt;ul className=&quot;space-y-2&quot;&gt;&#13;&#10;                    {tour.inclusions.map((inclusion, index) =&gt; (&#13;&#10;                      &lt;li key={index} className=&quot;flex items-start&quot;&gt;&#13;&#10;                        &lt;FiCheck className=&quot;w-4 h-4 text-green-500 mr-2 mt-0.5 flex-shrink-0&quot; /&gt;&#13;&#10;                        &lt;span className=&quot;text-gray-600 text-sm&quot;&gt;{inclusion}&lt;/span&gt;&#13;&#10;                      &lt;/li&gt;&#13;&#10;                    ))}&#13;&#10;                  &lt;/ul&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div&gt;&#13;&#10;                  &lt;h3 className=&quot;text-lg font-semibold text-red-600 mb-4 flex items-center&quot;&gt;&#13;&#10;                    &lt;FiX className=&quot;w-5 h-5 mr-2&quot; /&gt;&#13;&#10;                    Not Included&#13;&#10;                  &lt;/h3&gt;&#13;&#10;                  &lt;ul className=&quot;space-y-2&quot;&gt;&#13;&#10;                    {tour.exclusions.map((exclusion, index) =&gt; (&#13;&#10;                      &lt;li key={index} className=&quot;flex items-start&quot;&gt;&#13;&#10;                        &lt;FiX className=&quot;w-4 h-4 text-red-500 mr-2 mt-0.5 flex-shrink-0&quot; /&gt;&#13;&#10;                        &lt;span className=&quot;text-gray-600 text-sm&quot;&gt;{exclusion}&lt;/span&gt;&#13;&#10;                      &lt;/li&gt;&#13;&#10;                    ))}&#13;&#10;                  &lt;/ul&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {/* Map */}&#13;&#10;            {tour.location.coordinates &amp;&amp; (&#13;&#10;              &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 mb-6&quot;&gt;&#13;&#10;                &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-4&quot;&gt;Location&lt;/h2&gt;&#13;&#10;                &lt;div className=&quot;h-64 bg-gray-200 rounded-lg flex items-center justify-center&quot;&gt;&#13;&#10;                  &lt;p className=&quot;text-gray-500&quot;&gt;Interactive map would be embedded here&lt;/p&gt;&#13;&#10;                  {/* In a real implementation, you would embed Google Maps or another map service */}&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className=&quot;mt-4 text-sm text-gray-600&quot;&gt;&#13;&#10;                  &lt;FiMapPin className=&quot;w-4 h-4 inline mr-1&quot; /&gt;&#13;&#10;                  {tour.location.address}, {tour.location.city}, {tour.location.country}&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          {/* Booking Widget */}&#13;&#10;          &lt;div className=&quot;lg:col-span-1&quot;&gt;&#13;&#10;            &lt;div className=&quot;sticky top-4&quot;&gt;&#13;&#10;              &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#13;&#10;                &lt;div className=&quot;text-center mb-6&quot;&gt;&#13;&#10;                  &lt;div className=&quot;text-3xl font-bold text-primary-600&quot;&gt;&#13;&#10;                    ${tour.pricing.basePrice}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div className=&quot;text-sm text-gray-500&quot;&gt;&#13;&#10;                    {tour.pricing.priceType === 'per_person' ? 'per person' : 'per group'}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                &lt;div className=&quot;space-y-4 mb-6&quot;&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#13;&#10;                    &lt;span className=&quot;text-gray-600&quot;&gt;Duration:&lt;/span&gt;&#13;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;{tour.duration.days}D/{tour.duration.nights}N&lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#13;&#10;                    &lt;span className=&quot;text-gray-600&quot;&gt;Group Size:&lt;/span&gt;&#13;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;Max {tour.maxGroupSize}&lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#13;&#10;                    &lt;span className=&quot;text-gray-600&quot;&gt;Minimum Age:&lt;/span&gt;&#13;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;{tour.minAge}+ years&lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                &lt;Link&#13;&#10;                  to={`/booking/${tour._id}`}&#13;&#10;                  className=&quot;w-full btn-primary mb-4 flex items-center justify-center&quot;&#13;&#10;                &gt;&#13;&#10;                  &lt;FiCalendar className=&quot;w-4 h-4 mr-2&quot; /&gt;&#13;&#10;                  Book Now&#13;&#10;                &lt;/Link&gt;&#13;&#10;&#13;&#10;                &lt;button className=&quot;w-full btn-secondary&quot;&gt;&#13;&#10;                  Check Availability&#13;&#10;                &lt;/button&gt;&#13;&#10;&#13;&#10;                &lt;div className=&quot;mt-6 pt-6 border-t border-gray-200&quot;&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center justify-center text-sm text-gray-500&quot;&gt;&#13;&#10;                    &lt;FiCheck className=&quot;w-4 h-4 mr-1 text-green-500&quot; /&gt;&#13;&#10;                    Free cancellation up to 24 hours before&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default TourDetail;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Tours.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Tours.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#13;&#10;import { useQuery } from '@tanstack/react-query';&#13;&#10;import { Link } from 'react-router-dom';&#13;&#10;import { toursAPI } from '../utils/api';&#13;&#10;import { Tour, TourFilters, ToursResponse } from '../types';&#13;&#10;import { Icon, Icons } from '../components/common/Icons';&#13;&#10;&#13;&#10;const Tours: React.FC = () =&gt; {&#13;&#10;  const [filters, setFilters] = useState&lt;TourFilters&gt;({&#13;&#10;    page: 1,&#13;&#10;    limit: 12,&#13;&#10;    sortBy: 'createdAt',&#13;&#10;    sortOrder: 'desc',&#13;&#10;  });&#13;&#10;  const [viewMode, setViewMode] = useState&lt;'grid' | 'list'&gt;('grid');&#13;&#10;  const [showFilters, setShowFilters] = useState(false);&#13;&#10;&#13;&#10;  const { data: toursData, isLoading, error } = useQuery({&#13;&#10;    queryKey: ['tours', filters],&#13;&#10;    queryFn: () =&gt; toursAPI.getTours(filters),&#13;&#10;  });&#13;&#10;&#13;&#10;  const categories = [&#13;&#10;    { value: '', label: 'All Categories' },&#13;&#10;    { value: 'adventure', label: 'Adventure' },&#13;&#10;    { value: 'luxury', label: 'Luxury' },&#13;&#10;    { value: 'family', label: 'Family' },&#13;&#10;    { value: 'cultural', label: 'Cultural' },&#13;&#10;    { value: 'beach', label: 'Beach' },&#13;&#10;    { value: 'city', label: 'City' },&#13;&#10;    { value: 'nature', label: 'Nature' },&#13;&#10;  ];&#13;&#10;&#13;&#10;  const durations = [&#13;&#10;    { value: '', label: 'Any Duration' },&#13;&#10;    { value: '1', label: '1 Day' },&#13;&#10;    { value: '2', label: '2-3 Days' },&#13;&#10;    { value: '4', label: '4-7 Days' },&#13;&#10;    { value: '8', label: '8+ Days' },&#13;&#10;  ];&#13;&#10;&#13;&#10;  const sortOptions = [&#13;&#10;    { value: 'createdAt-desc', label: 'Newest First' },&#13;&#10;    { value: 'pricing.basePrice-asc', label: 'Price: Low to High' },&#13;&#10;    { value: 'pricing.basePrice-desc', label: 'Price: High to Low' },&#13;&#10;    { value: 'ratings.average-desc', label: 'Highest Rated' },&#13;&#10;    { value: 'duration.days-asc', label: 'Duration: Short to Long' },&#13;&#10;  ];&#13;&#10;&#13;&#10;  const handleFilterChange = (key: keyof TourFilters, value: string | number | undefined) =&gt; {&#13;&#10;    setFilters(prev =&gt; ({&#13;&#10;      ...prev,&#13;&#10;      [key]: value,&#13;&#10;      page: 1, // Reset to first page when filters change&#13;&#10;    }));&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleSortChange = (sortValue: string) =&gt; {&#13;&#10;    const [sortBy, sortOrder] = sortValue.split('-');&#13;&#10;    setFilters(prev =&gt; ({&#13;&#10;      ...prev,&#13;&#10;      sortBy,&#13;&#10;      sortOrder: sortOrder as 'asc' | 'desc',&#13;&#10;      page: 1,&#13;&#10;    }));&#13;&#10;  };&#13;&#10;&#13;&#10;  const handlePageChange = (page: number) =&gt; {&#13;&#10;    setFilters(prev =&gt; ({ ...prev, page }));&#13;&#10;    window.scrollTo({ top: 0, behavior: 'smooth' });&#13;&#10;  };&#13;&#10;&#13;&#10;  const clearFilters = () =&gt; {&#13;&#10;    setFilters({&#13;&#10;      page: 1,&#13;&#10;      limit: 12,&#13;&#10;      sortBy: 'createdAt',&#13;&#10;      sortOrder: 'desc',&#13;&#10;    });&#13;&#10;  };&#13;&#10;&#13;&#10;  const pagination = toursData?.data.pagination;&#13;&#10;  const tours = toursData?.data.data || [];&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#13;&#10;      {/* Hero Section */}&#13;&#10;      &lt;div className=&quot;bg-primary-600 text-white py-16&quot;&gt;&#13;&#10;        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#13;&#10;          &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;            &lt;h1 className=&quot;text-4xl md:text-5xl font-bold mb-4&quot;&gt;Discover Amazing Tours&lt;/h1&gt;&#13;&#10;            &lt;p className=&quot;text-xl text-blue-100 max-w-2xl mx-auto&quot;&gt;&#13;&#10;              Explore our curated collection of unforgettable travel experiences around the world&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex flex-col lg:flex-row gap-8&quot;&gt;&#13;&#10;          {/* Filters Sidebar */}&#13;&#10;          &lt;div className={`lg:w-64 ${showFilters ? 'block' : 'hidden lg:block'}`}&gt;&#13;&#10;            &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 sticky top-4&quot;&gt;&#13;&#10;              &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#13;&#10;                &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;Filters&lt;/h3&gt;&#13;&#10;                &lt;button&#13;&#10;                  onClick={clearFilters}&#13;&#10;                  className=&quot;text-sm text-primary-600 hover:text-primary-700&quot;&#13;&#10;                &gt;&#13;&#10;                  Clear All&#13;&#10;                &lt;/button&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Search */}&#13;&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#13;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#13;&#10;                  Search Tours&#13;&#10;                &lt;/label&gt;&#13;&#10;                &lt;div className=&quot;relative&quot;&gt;&#13;&#10;                  &lt;Icon icon={Icons.FiSearch} className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4&quot; /&gt;&#13;&#10;                  &lt;input&#13;&#10;                    type=&quot;text&quot;&#13;&#10;                    placeholder=&quot;Search destinations, tours...&quot;&#13;&#10;                    className=&quot;input-field pl-10&quot;&#13;&#10;                    value={filters.search || ''}&#13;&#10;                    onChange={(e) =&gt; handleFilterChange('search', e.target.value)}&#13;&#10;                  /&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Category Filter */}&#13;&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#13;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#13;&#10;                  Category&#13;&#10;                &lt;/label&gt;&#13;&#10;                &lt;select&#13;&#10;                  className=&quot;input-field&quot;&#13;&#10;                  value={filters.category || ''}&#13;&#10;                  onChange={(e) =&gt; handleFilterChange('category', e.target.value)}&#13;&#10;                &gt;&#13;&#10;                  {categories.map(category =&gt; (&#13;&#10;                    &lt;option key={category.value} value={category.value}&gt;&#13;&#10;                      {category.label}&#13;&#10;                    &lt;/option&gt;&#13;&#10;                  ))}&#13;&#10;                &lt;/select&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Price Range */}&#13;&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#13;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#13;&#10;                  Price Range (USD)&#13;&#10;                &lt;/label&gt;&#13;&#10;                &lt;div className=&quot;grid grid-cols-2 gap-2&quot;&gt;&#13;&#10;                  &lt;input&#13;&#10;                    type=&quot;number&quot;&#13;&#10;                    placeholder=&quot;Min&quot;&#13;&#10;                    className=&quot;input-field&quot;&#13;&#10;                    value={filters.minPrice || ''}&#13;&#10;                    onChange={(e) =&gt; handleFilterChange('minPrice', e.target.value ? Number(e.target.value) : undefined)}&#13;&#10;                  /&gt;&#13;&#10;                  &lt;input&#13;&#10;                    type=&quot;number&quot;&#13;&#10;                    placeholder=&quot;Max&quot;&#13;&#10;                    className=&quot;input-field&quot;&#13;&#10;                    value={filters.maxPrice || ''}&#13;&#10;                    onChange={(e) =&gt; handleFilterChange('maxPrice', e.target.value ? Number(e.target.value) : undefined)}&#13;&#10;                  /&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              {/* Duration Filter */}&#13;&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#13;&#10;                &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#13;&#10;                  Duration&#13;&#10;                &lt;/label&gt;&#13;&#10;                &lt;select&#13;&#10;                  className=&quot;input-field&quot;&#13;&#10;                  value={filters.duration || ''}&#13;&#10;                  onChange={(e) =&gt; handleFilterChange('duration', e.target.value)}&#13;&#10;                &gt;&#13;&#10;                  {durations.map(duration =&gt; (&#13;&#10;                    &lt;option key={duration.value} value={duration.value}&gt;&#13;&#10;                      {duration.label}&#13;&#10;                    &lt;/option&gt;&#13;&#10;                  ))}&#13;&#10;                &lt;/select&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          {/* Main Content */}&#13;&#10;          &lt;div className=&quot;flex-1&quot;&gt;&#13;&#10;            {/* Top Bar */}&#13;&#10;            &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4&quot;&gt;&#13;&#10;              &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#13;&#10;                &lt;button&#13;&#10;                  onClick={() =&gt; setShowFilters(!showFilters)}&#13;&#10;                  className=&quot;lg:hidden btn-secondary flex items-center&quot;&#13;&#10;                &gt;&#13;&#10;                  &lt;Icon icon={Icons.FiFilter} className=&quot;w-4 h-4 mr-2&quot; /&gt;&#13;&#10;                  Filters&#13;&#10;                &lt;/button&gt;&#13;&#10;                {pagination &amp;&amp; (&#13;&#10;                  &lt;p className=&quot;text-gray-600&quot;&gt;&#13;&#10;                    Showing {((pagination.currentPage - 1) * 12) + 1}-{Math.min(pagination.currentPage * 12, pagination.totalTours || pagination.totalItems)} of {pagination.totalTours || pagination.totalItems} tours&#13;&#10;                  &lt;/p&gt;&#13;&#10;                )}&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#13;&#10;                {/* Sort */}&#13;&#10;                &lt;select&#13;&#10;                  className=&quot;input-field min-w-48&quot;&#13;&#10;                  value={`${filters.sortBy}-${filters.sortOrder}`}&#13;&#10;                  onChange={(e) =&gt; handleSortChange(e.target.value)}&#13;&#10;                &gt;&#13;&#10;                  {sortOptions.map(option =&gt; (&#13;&#10;                    &lt;option key={option.value} value={option.value}&gt;&#13;&#10;                      {option.label}&#13;&#10;                    &lt;/option&gt;&#13;&#10;                  ))}&#13;&#10;                &lt;/select&gt;&#13;&#10;&#13;&#10;                {/* View Mode */}&#13;&#10;                &lt;div className=&quot;flex border border-gray-300 rounded-lg&quot;&gt;&#13;&#10;                  &lt;button&#13;&#10;                    onClick={() =&gt; setViewMode('grid')}&#13;&#10;                    className={`p-2 ${viewMode === 'grid' ? 'bg-primary-600 text-white' : 'text-gray-400'}`}&#13;&#10;                  &gt;&#13;&#10;                    &lt;Icon icon={Icons.FiGrid} className=&quot;w-5 h-5&quot; /&gt;&#13;&#10;                  &lt;/button&gt;&#13;&#10;                  &lt;button&#13;&#10;                    onClick={() =&gt; setViewMode('list')}&#13;&#10;                    className={`p-2 ${viewMode === 'list' ? 'bg-primary-600 text-white' : 'text-gray-400'}`}&#13;&#10;                  &gt;&#13;&#10;                    &lt;Icon icon={Icons.FiList} className=&quot;w-5 h-5&quot; /&gt;&#13;&#10;                  &lt;/button&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {/* Tours Grid/List */}&#13;&#10;            {isLoading ? (&#13;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#13;&#10;                {[...Array(6)].map((_, index) =&gt; (&#13;&#10;                  &lt;div key={index} className=&quot;card animate-pulse&quot;&gt;&#13;&#10;                    &lt;div className=&quot;h-48 bg-gray-300 rounded-t-xl&quot;&gt;&lt;/div&gt;&#13;&#10;                    &lt;div className=&quot;p-6&quot;&gt;&#13;&#10;                      &lt;div className=&quot;h-4 bg-gray-300 rounded mb-2&quot;&gt;&lt;/div&gt;&#13;&#10;                      &lt;div className=&quot;h-6 bg-gray-300 rounded mb-4&quot;&gt;&lt;/div&gt;&#13;&#10;                      &lt;div className=&quot;h-4 bg-gray-300 rounded&quot;&gt;&lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                ))}&#13;&#10;              &lt;/div&gt;&#13;&#10;            ) : error ? (&#13;&#10;              &lt;div className=&quot;text-center py-12&quot;&gt;&#13;&#10;                &lt;p className=&quot;text-gray-500&quot;&gt;Error loading tours. Please try again.&lt;/p&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ) : !tours.length ? (&#13;&#10;              &lt;div className=&quot;text-center py-12&quot;&gt;&#13;&#10;                &lt;p className=&quot;text-gray-500&quot;&gt;No tours found matching your criteria.&lt;/p&gt;&#13;&#10;                &lt;button&#13;&#10;                  onClick={clearFilters}&#13;&#10;                  className=&quot;mt-4 btn-primary&quot;&#13;&#10;                &gt;&#13;&#10;                  Clear Filters&#13;&#10;                &lt;/button&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ) : (&#13;&#10;              &lt;&gt;&#13;&#10;                &lt;div className={viewMode === 'grid'&#13;&#10;                  ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'&#13;&#10;                  : 'space-y-6'&#13;&#10;                }&gt;&#13;&#10;                  {tours.map((tour: Tour) =&gt; (&#13;&#10;                    &lt;TourCard key={tour._id} tour={tour} viewMode={viewMode} /&gt;&#13;&#10;                  ))}&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                {/* Pagination */}&#13;&#10;                {pagination &amp;&amp; pagination.totalPages &gt; 1 &amp;&amp; (&#13;&#10;                  &lt;div className=&quot;flex justify-center mt-12&quot;&gt;&#13;&#10;                    &lt;nav className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;                      &lt;button&#13;&#10;                        onClick={() =&gt; handlePageChange(pagination.currentPage - 1)}&#13;&#10;                        disabled={!pagination.hasPrev}&#13;&#10;                        className=&quot;px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#13;&#10;                      &gt;&#13;&#10;                        Previous&#13;&#10;                      &lt;/button&gt;&#13;&#10;&#13;&#10;                      {[...Array(Math.min(5, pagination.totalPages))].map((_, index) =&gt; {&#13;&#10;                        const page = index + 1;&#13;&#10;                        return (&#13;&#10;                          &lt;button&#13;&#10;                            key={page}&#13;&#10;                            onClick={() =&gt; handlePageChange(page)}&#13;&#10;                            className={`px-3 py-2 text-sm font-medium rounded-md ${&#13;&#10;                              page === pagination.currentPage&#13;&#10;                                ? 'bg-primary-600 text-white'&#13;&#10;                                : 'text-gray-500 bg-white border border-gray-300 hover:bg-gray-50'&#13;&#10;                            }`}&#13;&#10;                          &gt;&#13;&#10;                            {page}&#13;&#10;                          &lt;/button&gt;&#13;&#10;                        );&#13;&#10;                      })}&#13;&#10;&#13;&#10;                      &lt;button&#13;&#10;                        onClick={() =&gt; handlePageChange(pagination.currentPage + 1)}&#13;&#10;                        disabled={!pagination.hasNext}&#13;&#10;                        className=&quot;px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#13;&#10;                      &gt;&#13;&#10;                        Next&#13;&#10;                      &lt;/button&gt;&#13;&#10;                    &lt;/nav&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                )}&#13;&#10;              &lt;/&gt;&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;// Tour Card Component&#13;&#10;interface TourCardProps {&#13;&#10;  tour: Tour;&#13;&#10;  viewMode: 'grid' | 'list';&#13;&#10;}&#13;&#10;&#13;&#10;const TourCard: React.FC&lt;TourCardProps&gt; = ({ tour, viewMode }) =&gt; {&#13;&#10;  if (viewMode === 'list') {&#13;&#10;    return (&#13;&#10;      &lt;div className=&quot;card overflow-hidden&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex flex-col md:flex-row&quot;&gt;&#13;&#10;          &lt;div className=&quot;md:w-1/3&quot;&gt;&#13;&#10;            &lt;img&#13;&#10;              src={tour.images[0]?.url || `https://images.unsplash.com/photo-1469474968028-56623f02e42e?ixlib=rb-4.0.3&amp;auto=format&amp;fit=crop&amp;w=400&amp;q=80`}&#13;&#10;              alt={tour.title}&#13;&#10;              className=&quot;w-full h-48 md:h-full object-cover&quot;&#13;&#10;            /&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className=&quot;flex-1 p-6&quot;&gt;&#13;&#10;            &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#13;&#10;              &lt;div className=&quot;flex-1&quot;&gt;&#13;&#10;                &lt;div className=&quot;flex items-center text-sm text-gray-500 mb-2&quot;&gt;&#13;&#10;                  &lt;Icon icon={Icons.FiMapPin} className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;                  {tour.destination}&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;h3 className=&quot;text-xl font-semibold text-gray-900 mb-2&quot;&gt;&#13;&#10;                  {tour.title}&#13;&#10;                &lt;/h3&gt;&#13;&#10;                &lt;p className=&quot;text-gray-600 mb-4 line-clamp-2&quot;&gt;&#13;&#10;                  {tour.shortDescription}&#13;&#10;                &lt;/p&gt;&#13;&#10;                &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-500&quot;&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                    &lt;Icon icon={Icons.FiClock} className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;                    {tour.duration.days}D/{tour.duration.nights}N&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                    &lt;Icon icon={Icons.FiUsers} className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;                    Max {tour.maxGroupSize}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;                    &lt;Icon icon={Icons.FiStar} className=&quot;w-4 h-4 text-yellow-400 mr-1&quot; /&gt;&#13;&#10;                    {tour.ratings.average.toFixed(1)} ({tour.ratings.count})&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className=&quot;text-right ml-6&quot;&gt;&#13;&#10;                &lt;div className=&quot;text-2xl font-bold text-primary-600&quot;&gt;&#13;&#10;                  ${tour.pricing.basePrice}&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className=&quot;text-sm text-gray-500 mb-4&quot;&gt;per person&lt;/div&gt;&#13;&#10;                &lt;Link&#13;&#10;                  to={`/tours/${tour.slug}`}&#13;&#10;                  className=&quot;btn-primary&quot;&#13;&#10;                &gt;&#13;&#10;                  View Details&#13;&#10;                &lt;/Link&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;card overflow-hidden group&quot;&gt;&#13;&#10;      &lt;div className=&quot;relative h-48 overflow-hidden&quot;&gt;&#13;&#10;        &lt;img&#13;&#10;          src={tour.images[0]?.url || `https://images.unsplash.com/photo-1469474968028-56623f02e42e?ixlib=rb-4.0.3&amp;auto=format&amp;fit=crop&amp;w=400&amp;q=80`}&#13;&#10;          alt={tour.title}&#13;&#10;          className=&quot;w-full h-full object-cover group-hover:scale-110 transition-transform duration-300&quot;&#13;&#10;        /&gt;&#13;&#10;        &lt;div className=&quot;absolute top-4 right-4 bg-white rounded-full px-3 py-1 text-sm font-medium text-primary-600&quot;&gt;&#13;&#10;          ${tour.pricing.basePrice}&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;      &lt;div className=&quot;p-6&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex items-center text-sm text-gray-500 mb-2&quot;&gt;&#13;&#10;          &lt;Icon icon={Icons.FiMapPin} className=&quot;w-4 h-4 mr-1&quot; /&gt;&#13;&#10;          {tour.destination}&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;h3 className=&quot;text-lg font-semibold text-gray-900 mb-2 line-clamp-2&quot;&gt;&#13;&#10;          {tour.title}&#13;&#10;        &lt;/h3&gt;&#13;&#10;        &lt;p className=&quot;text-gray-600 text-sm mb-4 line-clamp-2&quot;&gt;&#13;&#10;          {tour.shortDescription}&#13;&#10;        &lt;/p&gt;&#13;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;            &lt;Icon icon={Icons.FiClock} className=&quot;w-4 h-4 mr-1 text-gray-400&quot; /&gt;&#13;&#10;            &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#13;&#10;              {tour.duration.days}D/{tour.duration.nights}N&#13;&#10;            &lt;/span&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#13;&#10;            &lt;Icon icon={Icons.FiStar} className=&quot;w-4 h-4 text-yellow-400 mr-1&quot; /&gt;&#13;&#10;            &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#13;&#10;              {tour.ratings.average.toFixed(1)} ({tour.ratings.count})&#13;&#10;            &lt;/span&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;Link&#13;&#10;          to={`/tours/${tour.slug}`}&#13;&#10;          className=&quot;block w-full text-center btn-primary&quot;&#13;&#10;        &gt;&#13;&#10;          View Details&#13;&#10;        &lt;/Link&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default Tours;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/auth/Login.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/auth/Login.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Link, useNavigate, useLocation } from 'react-router-dom';&#10;import { useForm } from 'react-hook-form';&#10;import { yupResolver } from '@hookform/resolvers/yup';&#10;import * as yup from 'yup';&#10;import { useAuth } from '../../contexts/AuthContext';&#10;import { Icon, Icons } from '../../components/common/Icons';&#10;import toast from 'react-hot-toast';&#10;&#10;const schema = yup.object({&#10;  email: yup.string().email('Invalid email').required('Email is required'),&#10;  password: yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),&#10;});&#10;&#10;interface LoginFormData {&#10;  email: string;&#10;  password: string;&#10;}&#10;&#10;const Login: React.FC = () =&gt; {&#10;  const [showPassword, setShowPassword] = useState(false);&#10;  const { login, state } = useAuth();&#10;  const navigate = useNavigate();&#10;  const location = useLocation();&#10;&#10;  const from = location.state?.from?.pathname || '/';&#10;&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    formState: { errors, isSubmitting },&#10;  } = useForm&lt;LoginFormData&gt;({&#10;    resolver: yupResolver(schema),&#10;  });&#10;&#10;  const onSubmit = async (data: LoginFormData) =&gt; {&#10;    try {&#10;      await login(data.email, data.password);&#10;      toast.success('Login successful!');&#10;      navigate(from, { replace: true });&#10;    } catch (error: any) {&#10;      toast.error(error.message || 'Login failed');&#10;    }&#10;  };&#10;&#10;  // Redirect if already authenticated&#10;  React.useEffect(() =&gt; {&#10;    if (state.isAuthenticated) {&#10;      navigate(from, { replace: true });&#10;    }&#10;  }, [state.isAuthenticated, navigate, from]);&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8&quot;&gt;&#10;      &lt;div className=&quot;sm:mx-auto sm:w-full sm:max-w-md&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;mx-auto w-16 h-16 bg-primary-600 rounded-full flex items-center justify-center mb-4&quot;&gt;&#10;            &lt;span className=&quot;text-white font-bold text-2xl&quot;&gt;T&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Welcome back&lt;/h2&gt;&#10;          &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;Sign in to your account to continue your journey&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;mt-8 sm:mx-auto sm:w-full sm:max-w-md&quot;&gt;&#10;        &lt;div className=&quot;bg-white py-8 px-4 shadow-xl rounded-lg sm:px-10&quot;&gt;&#10;          &lt;form className=&quot;space-y-6&quot; onSubmit={handleSubmit(onSubmit)}&gt;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Email address&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiMail} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('email')}&#10;                  type=&quot;email&quot;&#10;                  autoComplete=&quot;email&quot;&#10;                  className={`input-field pl-10 ${errors.email ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Enter your email&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              {errors.email &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.email.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;password&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Password&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiLock} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('password')}&#10;                  type={showPassword ? 'text' : 'password'}&#10;                  autoComplete=&quot;current-password&quot;&#10;                  className={`input-field pl-10 pr-10 ${errors.password ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Enter your password&quot;&#10;                /&gt;&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  className=&quot;absolute inset-y-0 right-0 pr-3 flex items-center&quot;&#10;                  onClick={() =&gt; setShowPassword(!showPassword)}&#10;                &gt;&#10;                  {showPassword ? (&#10;                    &lt;Icon icon={Icons.FiEyeOff} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  ) : (&#10;                    &lt;Icon icon={Icons.FiEye} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  )}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              {errors.password &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.password.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;input&#10;                  id=&quot;remember-me&quot;&#10;                  name=&quot;remember-me&quot;&#10;                  type=&quot;checkbox&quot;&#10;                  className=&quot;h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded&quot;&#10;                /&gt;&#10;                &lt;label htmlFor=&quot;remember-me&quot; className=&quot;ml-2 block text-sm text-gray-900&quot;&gt;&#10;                  Remember me&#10;                &lt;/label&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;text-sm&quot;&gt;&#10;                &lt;Link&#10;                  to=&quot;/forgot-password&quot;&#10;                  className=&quot;font-medium text-primary-600 hover:text-primary-500&quot;&#10;                &gt;&#10;                  Forgot your password?&#10;                &lt;/Link&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;button&#10;                type=&quot;submit&quot;&#10;                disabled={isSubmitting}&#10;                className=&quot;w-full btn-primary disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;              &gt;&#10;                {isSubmitting ? (&#10;                  &lt;div className=&quot;flex items-center justify-center&quot;&gt;&#10;                    &lt;div className=&quot;animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2&quot;&gt;&lt;/div&gt;&#10;                    Signing in...&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  'Sign in'&#10;                )}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6&quot;&gt;&#10;              &lt;div className=&quot;relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-0 flex items-center&quot;&gt;&#10;                  &lt;div className=&quot;w-full border-t border-gray-300&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;relative flex justify-center text-sm&quot;&gt;&#10;                  &lt;span className=&quot;px-2 bg-white text-gray-500&quot;&gt;New to TravelCo?&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;mt-6&quot;&gt;&#10;                &lt;Link&#10;                  to=&quot;/register&quot;&#10;                  className=&quot;w-full btn-secondary text-center block&quot;&#10;                &gt;&#10;                  Create an account&#10;                &lt;/Link&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Login;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/auth/Register_fixed.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/auth/Register_fixed.tsx" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Link, useNavigate } from 'react-router-dom';&#10;import { useForm } from 'react-hook-form';&#10;import { yupResolver } from '@hookform/resolvers/yup';&#10;import * as yup from 'yup';&#10;import { useAuth } from '../../contexts/AuthContext';&#10;import { Icon, Icons } from '../../components/common/Icons';&#10;import toast from 'react-hot-toast';&#10;&#10;const schema = yup.object().shape({&#10;  name: yup.string().min(2, 'Name must be at least 2 characters').required('Name is required'),&#10;  email: yup.string().email('Invalid email').required('Email is required'),&#10;  password: yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),&#10;  confirmPassword: yup.string()&#10;    .oneOf([yup.ref('password')], 'Passwords must match')&#10;    .required('Please confirm your password'),&#10;  phone: yup.string().optional(),&#10;  country: yup.string().optional(),&#10;  terms: yup.boolean().oneOf([true], 'You must accept the terms and conditions'),&#10;});&#10;&#10;interface RegisterFormData {&#10;  name: string;&#10;  email: string;&#10;  password: string;&#10;  confirmPassword: string;&#10;  phone?: string;&#10;  country?: string;&#10;  terms: boolean;&#10;}&#10;&#10;const Register: React.FC = () =&gt; {&#10;  const [showPassword, setShowPassword] = useState(false);&#10;  const [showConfirmPassword, setShowConfirmPassword] = useState(false);&#10;  const { register: registerUser, state } = useAuth();&#10;  const navigate = useNavigate();&#10;&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    formState: { errors, isSubmitting },&#10;  } = useForm&lt;RegisterFormData&gt;({&#10;    resolver: yupResolver(schema),&#10;  });&#10;&#10;  const onSubmit = async (data: RegisterFormData) =&gt; {&#10;    try {&#10;      const { confirmPassword, terms, ...registerData } = data;&#10;      await registerUser(registerData);&#10;      toast.success('Registration successful! Welcome to TravelCo!');&#10;      navigate('/');&#10;    } catch (error: any) {&#10;      toast.error(error.message || 'Registration failed');&#10;    }&#10;  };&#10;&#10;  // Redirect if already authenticated&#10;  React.useEffect(() =&gt; {&#10;    if (state.isAuthenticated) {&#10;      navigate('/');&#10;    }&#10;  }, [state.isAuthenticated, navigate]);&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8&quot;&gt;&#10;      &lt;div className=&quot;sm:mx-auto sm:w-full sm:max-w-md&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;mx-auto w-16 h-16 bg-primary-600 rounded-full flex items-center justify-center mb-4&quot;&gt;&#10;            &lt;span className=&quot;text-white font-bold text-2xl&quot;&gt;T&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Create your account&lt;/h2&gt;&#10;          &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;Join thousands of travelers exploring the world&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;mt-8 sm:mx-auto sm:w-full sm:max-w-md&quot;&gt;&#10;        &lt;div className=&quot;bg-white py-8 px-4 shadow-xl rounded-lg sm:px-10&quot;&gt;&#10;          &lt;form className=&quot;space-y-6&quot; onSubmit={handleSubmit(onSubmit)}&gt;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;name&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Full name&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiUser} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('name')}&#10;                  type=&quot;text&quot;&#10;                  autoComplete=&quot;name&quot;&#10;                  className={`input-field pl-10 ${errors.name ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Enter your full name&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              {errors.name &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.name.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Email address&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiMail} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('email')}&#10;                  type=&quot;email&quot;&#10;                  autoComplete=&quot;email&quot;&#10;                  className={`input-field pl-10 ${errors.email ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Enter your email&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              {errors.email &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.email.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 gap-6 sm:grid-cols-2&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;label htmlFor=&quot;phone&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                  Phone (optional)&#10;                &lt;/label&gt;&#10;                &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                  &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                    &lt;Icon icon={Icons.FiPhone} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;input&#10;                    {...register('phone')}&#10;                    type=&quot;tel&quot;&#10;                    autoComplete=&quot;tel&quot;&#10;                    className=&quot;input-field pl-10&quot;&#10;                    placeholder=&quot;Phone number&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div&gt;&#10;                &lt;label htmlFor=&quot;country&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                  Country (optional)&#10;                &lt;/label&gt;&#10;                &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                  &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                    &lt;Icon icon={Icons.FiMapPin} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;select&#10;                    {...register('country')}&#10;                    className=&quot;input-field pl-10&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;&quot;&gt;Select country&lt;/option&gt;&#10;                    &lt;option value=&quot;Vietnam&quot;&gt;Vietnam&lt;/option&gt;&#10;                    &lt;option value=&quot;United States&quot;&gt;United States&lt;/option&gt;&#10;                    &lt;option value=&quot;Canada&quot;&gt;Canada&lt;/option&gt;&#10;                    &lt;option value=&quot;Australia&quot;&gt;Australia&lt;/option&gt;&#10;                    &lt;option value=&quot;United Kingdom&quot;&gt;United Kingdom&lt;/option&gt;&#10;                    &lt;option value=&quot;Germany&quot;&gt;Germany&lt;/option&gt;&#10;                    &lt;option value=&quot;France&quot;&gt;France&lt;/option&gt;&#10;                    &lt;option value=&quot;Japan&quot;&gt;Japan&lt;/option&gt;&#10;                    &lt;option value=&quot;South Korea&quot;&gt;South Korea&lt;/option&gt;&#10;                    &lt;option value=&quot;Singapore&quot;&gt;Singapore&lt;/option&gt;&#10;                    &lt;option value=&quot;Other&quot;&gt;Other&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;password&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Password&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiLock} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('password')}&#10;                  type={showPassword ? 'text' : 'password'}&#10;                  autoComplete=&quot;new-password&quot;&#10;                  className={`input-field pl-10 pr-10 ${errors.password ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Create a password&quot;&#10;                /&gt;&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  className=&quot;absolute inset-y-0 right-0 pr-3 flex items-center&quot;&#10;                  onClick={() =&gt; setShowPassword(!showPassword)}&#10;                &gt;&#10;                  {showPassword ? (&#10;                    &lt;Icon icon={Icons.FiEyeOff} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  ) : (&#10;                    &lt;Icon icon={Icons.FiEye} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  )}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              {errors.password &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.password.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;confirmPassword&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Confirm password&#10;              &lt;/label&gt;&#10;              &lt;div className=&quot;mt-1 relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none&quot;&gt;&#10;                  &lt;Icon icon={Icons.FiLock} className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;input&#10;                  {...register('confirmPassword')}&#10;                  type={showConfirmPassword ? 'text' : 'password'}&#10;                  autoComplete=&quot;new-password&quot;&#10;                  className={`input-field pl-10 pr-10 ${errors.confirmPassword ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : ''}`}&#10;                  placeholder=&quot;Confirm your password&quot;&#10;                /&gt;&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  className=&quot;absolute inset-y-0 right-0 pr-3 flex items-center&quot;&#10;                  onClick={() =&gt; setShowConfirmPassword(!showConfirmPassword)}&#10;                &gt;&#10;                  {showConfirmPassword ? (&#10;                    &lt;Icon icon={Icons.FiEyeOff} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  ) : (&#10;                    &lt;Icon icon={Icons.FiEye} className=&quot;h-5 w-5 text-gray-400 hover:text-gray-500&quot; /&gt;&#10;                  )}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              {errors.confirmPassword &amp;&amp; (&#10;                &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.confirmPassword.message}&lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;input&#10;                {...register('terms')}&#10;                id=&quot;terms&quot;&#10;                type=&quot;checkbox&quot;&#10;                className={`h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded ${errors.terms ? 'border-red-500' : ''}`}&#10;              /&gt;&#10;              &lt;label htmlFor=&quot;terms&quot; className=&quot;ml-2 block text-sm text-gray-900&quot;&gt;&#10;                I agree to the{' '}&#10;                &lt;Link to=&quot;/terms&quot; className=&quot;text-primary-600 hover:text-primary-500&quot;&gt;&#10;                  Terms and Conditions&#10;                &lt;/Link&gt;{' '}&#10;                and{' '}&#10;                &lt;Link to=&quot;/privacy&quot; className=&quot;text-primary-600 hover:text-primary-500&quot;&gt;&#10;                  Privacy Policy&#10;                &lt;/Link&gt;&#10;              &lt;/label&gt;&#10;            &lt;/div&gt;&#10;            {errors.terms &amp;&amp; (&#10;              &lt;p className=&quot;mt-1 text-sm text-red-600&quot;&gt;{errors.terms.message}&lt;/p&gt;&#10;            )}&#10;&#10;            &lt;div&gt;&#10;              &lt;button&#10;                type=&quot;submit&quot;&#10;                disabled={isSubmitting}&#10;                className=&quot;w-full btn-primary disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;              &gt;&#10;                {isSubmitting ? (&#10;                  &lt;div className=&quot;flex items-center justify-center&quot;&gt;&#10;                    &lt;div className=&quot;animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2&quot;&gt;&lt;/div&gt;&#10;                    Creating account...&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  'Create account'&#10;                )}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6&quot;&gt;&#10;              &lt;div className=&quot;relative&quot;&gt;&#10;                &lt;div className=&quot;absolute inset-0 flex items-center&quot;&gt;&#10;                  &lt;div className=&quot;w-full border-t border-gray-300&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;relative flex justify-center text-sm&quot;&gt;&#10;                  &lt;span className=&quot;px-2 bg-white text-gray-500&quot;&gt;Already have an account?&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;mt-6&quot;&gt;&#10;                &lt;Link&#10;                  to=&quot;/login&quot;&#10;                  className=&quot;w-full btn-secondary text-center block&quot;&#10;                &gt;&#10;                  Sign in instead&#10;                &lt;/Link&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Register;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/types/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/types/index.ts" />
              <option name="updatedContent" value="// User types&#10;export interface User {&#10;  _id: string;&#10;  name: string;&#10;  email: string;&#10;  phone?: string;&#10;  country?: string;&#10;  role: 'customer' | 'admin' | 'editor';&#10;  avatar?: string;&#10;  isVerified: boolean;&#10;  preferences: {&#10;    language: 'en' | 'vi';&#10;    currency: string;&#10;    newsletter: boolean;&#10;  };&#10;  bookingHistory: string[];&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;// Tour types&#10;export interface Tour {&#10;  _id: string;&#10;  title: string;&#10;  slug: string;&#10;  description: string;&#10;  shortDescription: string;&#10;  destination: string;&#10;  duration: {&#10;    days: number;&#10;    nights: number;&#10;  };&#10;  pricing: {&#10;    basePrice: number;&#10;    currency: string;&#10;    priceType: 'per_person' | 'per_group';&#10;    seasonalPricing: SeasonalPricing[];&#10;    groupDiscounts: GroupDiscount[];&#10;  };&#10;  itinerary: ItineraryDay[];&#10;  inclusions: string[];&#10;  exclusions: string[];&#10;  highlights: string[];&#10;  images: TourImage[];&#10;  videos: TourVideo[];&#10;  category: 'adventure' | 'luxury' | 'family' | 'cultural' | 'beach' | 'city' | 'nature';&#10;  difficulty: 'easy' | 'moderate' | 'challenging' | 'extreme';&#10;  maxGroupSize: number;&#10;  minAge: number;&#10;  availability: TourAvailability[];&#10;  location: {&#10;    coordinates: [number, number];&#10;    address: string;&#10;    city: string;&#10;    country: string;&#10;  };&#10;  status: 'draft' | 'published' | 'archived';&#10;  featured: boolean;&#10;  ratings: {&#10;    average: number;&#10;    count: number;&#10;  };&#10;  tags: string[];&#10;  seoData: {&#10;    metaTitle: string;&#10;    metaDescription: string;&#10;    keywords: string[];&#10;  };&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;export interface SeasonalPricing {&#10;  season: string;&#10;  startDate: string;&#10;  endDate: string;&#10;  multiplier: number;&#10;}&#10;&#10;export interface GroupDiscount {&#10;  minPeople: number;&#10;  discount: number;&#10;}&#10;&#10;export interface ItineraryDay {&#10;  day: number;&#10;  title: string;&#10;  description: string;&#10;  activities: string[];&#10;  meals: string[];&#10;  accommodation: string;&#10;}&#10;&#10;export interface TourImage {&#10;  url: string;&#10;  alt: string;&#10;  isPrimary: boolean;&#10;}&#10;&#10;export interface TourVideo {&#10;  url: string;&#10;  title: string;&#10;}&#10;&#10;export interface TourAvailability {&#10;  startDate: string;&#10;  endDate: string;&#10;  availableSpots: number;&#10;  bookedSpots: number;&#10;}&#10;&#10;// Booking types&#10;export interface Booking {&#10;  _id: string;&#10;  bookingNumber: string;&#10;  tour: Tour;&#10;  customer: User;&#10;  travelers: Traveler[];&#10;  bookingDetails: {&#10;    startDate: string;&#10;    endDate: string;&#10;    numberOfTravelers: {&#10;      adults: number;&#10;      children: number;&#10;      infants: number;&#10;    };&#10;    totalTravelers: number;&#10;  };&#10;  pricing: {&#10;    basePrice: number;&#10;    seasonalMultiplier?: number;&#10;    groupDiscount?: number;&#10;    addOns: AddOn[];&#10;    subtotal: number;&#10;    taxes: number;&#10;    totalAmount: number;&#10;    currency: string;&#10;  };&#10;  payment: {&#10;    status: 'pending' | 'paid' | 'partially_paid' | 'refunded' | 'failed';&#10;    method?: 'credit_card' | 'bank_transfer' | 'vnpay' | 'momo';&#10;    transactionId?: string;&#10;    paidAmount: number;&#10;    paymentDate?: string;&#10;    refundAmount: number;&#10;    refundDate?: string;&#10;  };&#10;  status: 'pending' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled';&#10;  specialRequests?: string;&#10;  emergencyContact?: {&#10;    name: string;&#10;    phone: string;&#10;    relationship: string;&#10;  };&#10;  documents: BookingDocument[];&#10;  notifications: {&#10;    confirmationSent: boolean;&#10;    reminderSent: boolean;&#10;    followUpSent: boolean;&#10;  };&#10;  createdBy?: string;&#10;  notes: BookingNote[];&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;export interface Traveler {&#10;  name: string;&#10;  age?: number;&#10;  type: 'adult' | 'child' | 'infant';&#10;  passportNumber?: string;&#10;  nationality?: string;&#10;  dietaryRequirements?: string;&#10;}&#10;&#10;export interface AddOn {&#10;  name: string;&#10;  price: number;&#10;  quantity: number;&#10;}&#10;&#10;export interface BookingDocument {&#10;  type: string;&#10;  url: string;&#10;  uploadDate: string;&#10;}&#10;&#10;export interface BookingNote {&#10;  content: string;&#10;  author: string;&#10;  createdAt: string;&#10;}&#10;&#10;// Review types&#10;export interface Review {&#10;  _id: string;&#10;  tour: string | Tour;&#10;  customer: string | User;&#10;  booking: string | Booking;&#10;  rating: number;&#10;  title: string;&#10;  content: string;&#10;  aspects: {&#10;    guide?: number;&#10;    accommodation?: number;&#10;    transport?: number;&#10;    value?: number;&#10;  };&#10;  photos: string[];&#10;  status: 'pending' | 'approved' | 'rejected';&#10;  featured: boolean;&#10;  helpful: number;&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;// Content types&#10;export interface Content {&#10;  _id: string;&#10;  type: 'page' | 'blog' | 'destination' | 'faq';&#10;  title: string;&#10;  slug: string;&#10;  content: string;&#10;  excerpt?: string;&#10;  featuredImage?: string;&#10;  gallery: string[];&#10;  author: string | User;&#10;  status: 'draft' | 'published' | 'archived';&#10;  featured: boolean;&#10;  categories: string[];&#10;  tags: string[];&#10;  language: 'en' | 'vi';&#10;  seoData: {&#10;    metaTitle: string;&#10;    metaDescription: string;&#10;    keywords: string[];&#10;  };&#10;  views: number;&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;// API Response types&#10;export interface ApiResponse&lt;T&gt; {&#10;  data?: T;&#10;  message: string;&#10;  success: boolean;&#10;}&#10;&#10;export interface PaginationResponse&lt;T&gt; {&#10;  data: T[];&#10;  pagination: {&#10;    currentPage: number;&#10;    totalPages: number;&#10;    totalItems: number;&#10;    totalTours?: number;&#10;    totalBookings?: number;&#10;    hasNext: boolean;&#10;    hasPrev: boolean;&#10;  };&#10;}&#10;&#10;// Fixed API response for tours specifically&#10;export interface ToursResponse {&#10;  tours: Tour[];&#10;  pagination: {&#10;    currentPage: number;&#10;    totalPages: number;&#10;    totalTours: number;&#10;    hasNext: boolean;&#10;    hasPrev: boolean;&#10;  };&#10;}&#10;&#10;// Form types&#10;export interface LoginForm {&#10;  email: string;&#10;  password: string;&#10;}&#10;&#10;export interface RegisterForm {&#10;  name: string;&#10;  email: string;&#10;  password: string;&#10;  confirmPassword: string;&#10;  phone?: string;&#10;  country?: string;&#10;}&#10;&#10;export interface BookingForm {&#10;  tourId: string;&#10;  startDate: string;&#10;  numberOfTravelers: {&#10;    adults: number;&#10;    children: number;&#10;    infants: number;&#10;  };&#10;  travelers: Traveler[];&#10;  specialRequests?: string;&#10;  emergencyContact?: {&#10;    name: string;&#10;    phone: string;&#10;    relationship: string;&#10;  };&#10;}&#10;&#10;export interface ContactForm {&#10;  name: string;&#10;  email: string;&#10;  phone?: string;&#10;  subject: string;&#10;  message: string;&#10;}&#10;&#10;// Filter types&#10;export interface TourFilters {&#10;  destination?: string;&#10;  category?: string;&#10;  minPrice?: number;&#10;  maxPrice?: number;&#10;  duration?: number;&#10;  sortBy?: string;&#10;  sortOrder?: 'asc' | 'desc';&#10;  search?: string;&#10;  page?: number;&#10;  limit?: number;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/utils/api.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/utils/api.ts" />
              <option name="updatedContent" value="import axios, { AxiosResponse } from 'axios';&#10;import {&#10;  User,&#10;  Tour,&#10;  Booking,&#10;  Review,&#10;  Content,&#10;  LoginForm,&#10;  RegisterForm,&#10;  BookingForm,&#10;  TourFilters,&#10;  ApiResponse,&#10;  PaginationResponse&#10;} from '../types';&#10;&#10;// Create axios instance&#10;const api = axios.create({&#10;  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',&#10;  headers: {&#10;    'Content-Type': 'application/json',&#10;  },&#10;});&#10;&#10;// Request interceptor to add auth token&#10;api.interceptors.request.use(&#10;  (config) =&gt; {&#10;    const token = localStorage.getItem('token');&#10;    if (token) {&#10;      config.headers.Authorization = `Bearer ${token}`;&#10;    }&#10;    return config;&#10;  },&#10;  (error) =&gt; {&#10;    return Promise.reject(error);&#10;  }&#10;);&#10;&#10;// Response interceptor to handle errors&#10;api.interceptors.response.use(&#10;  (response) =&gt; response,&#10;  (error) =&gt; {&#10;    if (error.response?.status === 401) {&#10;      localStorage.removeItem('token');&#10;      localStorage.removeItem('user');&#10;      window.location.href = '/login';&#10;    }&#10;    return Promise.reject(error);&#10;  }&#10;);&#10;&#10;// Auth API&#10;export const authAPI = {&#10;  login: async (data: LoginForm): Promise&lt;AxiosResponse&lt;{ token: string; user: User }&gt;&gt; =&gt; {&#10;    return api.post('/auth/login', data);&#10;  },&#10;&#10;  register: async (data: RegisterForm): Promise&lt;AxiosResponse&lt;{ token: string; user: User }&gt;&gt; =&gt; {&#10;    return api.post('/auth/register', data);&#10;  },&#10;&#10;  getProfile: async (): Promise&lt;AxiosResponse&lt;{ user: User }&gt;&gt; =&gt; {&#10;    return api.get('/auth/profile');&#10;  },&#10;&#10;  updateProfile: async (data: Partial&lt;User&gt;): Promise&lt;AxiosResponse&lt;{ user: User }&gt;&gt; =&gt; {&#10;    return api.put('/auth/profile', data);&#10;  },&#10;&#10;  changePassword: async (data: { currentPassword: string; newPassword: string }): Promise&lt;AxiosResponse&lt;ApiResponse&lt;any&gt;&gt;&gt; =&gt; {&#10;    return api.put('/auth/change-password', data);&#10;  },&#10;};&#10;&#10;// Tours API&#10;export const toursAPI = {&#10;  getTours: async (filters?: TourFilters): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Tour&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams();&#10;    if (filters) {&#10;      Object.entries(filters).forEach(([key, value]) =&gt; {&#10;        if (value !== undefined &amp;&amp; value !== null) {&#10;          params.append(key, value.toString());&#10;        }&#10;      });&#10;    }&#10;    return api.get(`/tours?${params.toString()}`);&#10;  },&#10;&#10;  getFeaturedTours: async (): Promise&lt;AxiosResponse&lt;{ tours: Tour[] }&gt;&gt; =&gt; {&#10;    return api.get('/tours/featured');&#10;  },&#10;&#10;  getTourBySlug: async (slug: string): Promise&lt;AxiosResponse&lt;{ tour: Tour }&gt;&gt; =&gt; {&#10;    return api.get(`/tours/${slug}`);&#10;  },&#10;&#10;  checkAvailability: async (tourId: string, startDate: string, groupSize: number): Promise&lt;AxiosResponse&lt;{ available: boolean; price: number; currency: string }&gt;&gt; =&gt; {&#10;    return api.get(`/tours/${tourId}/availability?startDate=${startDate}&amp;groupSize=${groupSize}`);&#10;  },&#10;&#10;  createTour: async (data: FormData): Promise&lt;AxiosResponse&lt;{ tour: Tour }&gt;&gt; =&gt; {&#10;    return api.post('/tours', data, {&#10;      headers: { 'Content-Type': 'multipart/form-data' },&#10;    });&#10;  },&#10;&#10;  updateTour: async (id: string, data: Partial&lt;Tour&gt;): Promise&lt;AxiosResponse&lt;{ tour: Tour }&gt;&gt; =&gt; {&#10;    return api.put(`/tours/${id}`, data);&#10;  },&#10;&#10;  deleteTour: async (id: string): Promise&lt;AxiosResponse&lt;ApiResponse&lt;any&gt;&gt;&gt; =&gt; {&#10;    return api.delete(`/tours/${id}`);&#10;  },&#10;};&#10;&#10;// Bookings API&#10;export const bookingsAPI = {&#10;  createBooking: async (data: BookingForm): Promise&lt;AxiosResponse&lt;{ booking: Booking }&gt;&gt; =&gt; {&#10;    return api.post('/bookings', data);&#10;  },&#10;&#10;  getUserBookings: async (page = 1, status?: string): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Booking&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (status) params.append('status', status);&#10;    return api.get(`/bookings?${params.toString()}`);&#10;  },&#10;&#10;  getBooking: async (id: string): Promise&lt;AxiosResponse&lt;{ booking: Booking }&gt;&gt; =&gt; {&#10;    return api.get(`/bookings/${id}`);&#10;  },&#10;&#10;  cancelBooking: async (id: string, reason: string): Promise&lt;AxiosResponse&lt;{ booking: Booking }&gt;&gt; =&gt; {&#10;    return api.put(`/bookings/${id}/cancel`, { reason });&#10;  },&#10;};&#10;&#10;// Payments API&#10;export const paymentsAPI = {&#10;  createPaymentIntent: async (bookingId: string): Promise&lt;AxiosResponse&lt;{ clientSecret: string; amount: number; currency: string }&gt;&gt; =&gt; {&#10;    return api.post('/payments/create-intent', { bookingId });&#10;  },&#10;&#10;  confirmPayment: async (data: { bookingId: string; paymentIntentId: string; paymentMethod: string }): Promise&lt;AxiosResponse&lt;{ booking: Booking }&gt;&gt; =&gt; {&#10;    return api.post('/payments/confirm', data);&#10;  },&#10;&#10;  createVNPayPayment: async (bookingId: string): Promise&lt;AxiosResponse&lt;{ paymentUrl: string; vnpayData: any }&gt;&gt; =&gt; {&#10;    return api.post('/payments/vnpay', { bookingId });&#10;  },&#10;};&#10;&#10;// Reviews API&#10;export const reviewsAPI = {&#10;  getReviews: async (tourId?: string, page = 1): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Review&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (tourId) params.append('tourId', tourId);&#10;    return api.get(`/reviews?${params.toString()}`);&#10;  },&#10;&#10;  createReview: async (data: Partial&lt;Review&gt;): Promise&lt;AxiosResponse&lt;{ review: Review }&gt;&gt; =&gt; {&#10;    return api.post('/reviews', data);&#10;  },&#10;&#10;  updateReview: async (id: string, data: Partial&lt;Review&gt;): Promise&lt;AxiosResponse&lt;{ review: Review }&gt;&gt; =&gt; {&#10;    return api.put(`/reviews/${id}`, data);&#10;  },&#10;&#10;  deleteReview: async (id: string): Promise&lt;AxiosResponse&lt;ApiResponse&lt;any&gt;&gt;&gt; =&gt; {&#10;    return api.delete(`/reviews/${id}`);&#10;  },&#10;};&#10;&#10;// Content API&#10;export const contentAPI = {&#10;  getContent: async (type?: string, page = 1): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Content&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (type) params.append('type', type);&#10;    return api.get(`/content?${params.toString()}`);&#10;  },&#10;&#10;  getContentBySlug: async (slug: string): Promise&lt;AxiosResponse&lt;{ content: Content }&gt;&gt; =&gt; {&#10;    return api.get(`/content/${slug}`);&#10;  },&#10;&#10;  createContent: async (data: Partial&lt;Content&gt;): Promise&lt;AxiosResponse&lt;{ content: Content }&gt;&gt; =&gt; {&#10;    return api.post('/content', data);&#10;  },&#10;&#10;  updateContent: async (id: string, data: Partial&lt;Content&gt;): Promise&lt;AxiosResponse&lt;{ content: Content }&gt;&gt; =&gt; {&#10;    return api.put(`/content/${id}`, data);&#10;  },&#10;&#10;  deleteContent: async (id: string): Promise&lt;AxiosResponse&lt;ApiResponse&lt;any&gt;&gt;&gt; =&gt; {&#10;    return api.delete(`/content/${id}`);&#10;  },&#10;};&#10;&#10;// Admin API&#10;export const adminAPI = {&#10;  getDashboardStats: async (): Promise&lt;AxiosResponse&lt;any&gt;&gt; =&gt; {&#10;    return api.get('/admin/dashboard');&#10;  },&#10;&#10;  getAllBookings: async (page = 1, filters?: any): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Booking&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (filters) {&#10;      Object.entries(filters).forEach(([key, value]) =&gt; {&#10;        if (value !== undefined &amp;&amp; value !== null) {&#10;          params.append(key, value.toString());&#10;        }&#10;      });&#10;    }&#10;    return api.get(`/admin/bookings?${params.toString()}`);&#10;  },&#10;&#10;  updateBookingStatus: async (id: string, status: string, notes?: string): Promise&lt;AxiosResponse&lt;{ booking: Booking }&gt;&gt; =&gt; {&#10;    return api.put(`/admin/bookings/${id}/status`, { status, notes });&#10;  },&#10;&#10;  getAllUsers: async (page = 1, filters?: any): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;User&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (filters) {&#10;      Object.entries(filters).forEach(([key, value]) =&gt; {&#10;        if (value !== undefined &amp;&amp; value !== null) {&#10;          params.append(key, value.toString());&#10;        }&#10;      });&#10;    }&#10;    return api.get(`/admin/users?${params.toString()}`);&#10;  },&#10;&#10;  getAllToursAdmin: async (page = 1, filters?: any): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Tour&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (filters) {&#10;      Object.entries(filters).forEach(([key, value]) =&gt; {&#10;        if (value !== undefined &amp;&amp; value !== null) {&#10;          params.append(key, value.toString());&#10;        }&#10;      });&#10;    }&#10;    return api.get(`/admin/tours?${params.toString()}`);&#10;  },&#10;&#10;  getAllReviews: async (page = 1, filters?: any): Promise&lt;AxiosResponse&lt;PaginationResponse&lt;Review&gt;&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({ page: page.toString() });&#10;    if (filters) {&#10;      Object.entries(filters).forEach(([key, value]) =&gt; {&#10;        if (value !== undefined &amp;&amp; value !== null) {&#10;          params.append(key, value.toString());&#10;        }&#10;      });&#10;    }&#10;    return api.get(`/admin/reviews?${params.toString()}`);&#10;  },&#10;&#10;  updateReviewStatus: async (id: string, status: string, featured?: boolean): Promise&lt;AxiosResponse&lt;{ review: Review }&gt;&gt; =&gt; {&#10;    return api.put(`/admin/reviews/${id}`, { status, featured });&#10;  },&#10;};&#10;&#10;// Fixed API response for tours specifically&#10;export interface ToursResponse {&#10;  tours: Tour[];&#10;  pagination: {&#10;    currentPage: number;&#10;    totalPages: number;&#10;    totalTours: number;&#10;    hasNext: boolean;&#10;    hasPrev: boolean;&#10;  };&#10;}&#10;&#10;export default api;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/tailwind.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/tailwind.config.js" />
              <option name="updatedContent" value="/** @type {import('tailwindcss').Config} */&#10;module.exports = {&#10;  content: [&#10;    &quot;./src/**/*.{js,jsx,ts,tsx}&quot;,&#10;  ],&#10;  theme: {&#10;    extend: {&#10;      colors: {&#10;        primary: {&#10;          50: '#eff6ff',&#10;          100: '#dbeafe',&#10;          200: '#bfdbfe',&#10;          300: '#93c5fd',&#10;          400: '#60a5fa',&#10;          500: '#3b82f6',&#10;          600: '#2563eb',&#10;          700: '#1d4ed8',&#10;          800: '#1e40af',&#10;          900: '#1e3a8a',&#10;        },&#10;        secondary: {&#10;          50: '#f0fdfa',&#10;          100: '#ccfbf1',&#10;          200: '#99f6e4',&#10;          300: '#5eead4',&#10;          400: '#2dd4bf',&#10;          500: '#14b8a6',&#10;          600: '#0d9488',&#10;          700: '#0f766e',&#10;          800: '#115e59',&#10;          900: '#134e4a',&#10;        },&#10;      },&#10;      fontFamily: {&#10;        sans: ['Inter', 'system-ui', 'sans-serif'],&#10;        serif: ['Playfair Display', 'serif'],&#10;      },&#10;      animation: {&#10;        'fade-in': 'fadeIn 0.5s ease-in-out',&#10;        'slide-up': 'slideUp 0.5s ease-out',&#10;        'bounce-slow': 'bounce 2s infinite',&#10;      },&#10;      keyframes: {&#10;        fadeIn: {&#10;          '0%': { opacity: '0' },&#10;          '100%': { opacity: '1' },&#10;        },&#10;        slideUp: {&#10;          '0%': { transform: 'translateY(20px)', opacity: '0' },&#10;          '100%': { transform: 'translateY(0)', opacity: '1' },&#10;        },&#10;      },&#10;    },&#10;  },&#10;  plugins: [],&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/wrangler.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/wrangler.toml" />
              <option name="originalContent" value="compatibility_date = &quot;2024-08-15&quot;&#10;&#10;[build]&#10;command = &quot;cd frontend &amp;&amp; npm ci &amp;&amp; npm run build&quot;&#10;publish = &quot;frontend/build&quot;&#10;&#10;[build.environment]&#10;REACT_APP_API_URL = &quot;https://your-backend.vercel.app/api&quot;&#10;REACT_APP_STRIPE_PUBLIC_KEY = &quot;&quot;&#10;&#10;[[redirects]]&#10;from = &quot;/*&quot;&#10;to = &quot;/index.html&quot;&#10;status = 200&#10;&#10;[compatibility_flags]&#10;nodejs_compat = true&#10;" />
              <option name="updatedContent" value="compatibility_date = &quot;2024-08-15&quot;&#13;&#10;compatibility_flags = [&quot;nodejs_compat&quot;]&#13;&#10;&#13;&#10;[build]&#13;&#10;command = &quot;cd frontend &amp;&amp; npm ci &amp;&amp; npm run build&quot;&#13;&#10;&#13;&#10;[env.production.vars]&#13;&#10;REACT_APP_API_URL = &quot;https://your-backend.vercel.app/api&quot;&#13;&#10;REACT_APP_STRIPE_PUBLIC_KEY = &quot;&quot;&#13;&#10;&#13;&#10;[[routes]]&#13;&#10;pattern = &quot;/*&quot;&#13;&#10;custom_domain = true" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>